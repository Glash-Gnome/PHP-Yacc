<?php

namespace PhpParser\Parser;

use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 */
class Parser extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 127;
    protected $actionTableSize      = 4056;
    protected $gotoTableSize        = 428;

    protected $invalidSymbol       = 157;
    protected $errorSymbol         = 156;
    protected $defaultAction       = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE = 0;
    protected $YYNLSTATES  = 921;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'`'",
        "']'",
        "'\"'",
        "'\$'"
    );

    protected $tokenToSymbol = array(
          156,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   53,  157,  157,  157,   52,   35,  157,
          157,  157,   50,   47,    7,   48,   49,   51,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   29,  157,
           41,   15,   43,   28,   65,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   67,  157,  157,   34,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,   33,  157,   55
    );

    protected $action = array(
          576,   42,   43,  389,   44,   45, -282,  518,  127,  310,
           46,   47,   26,   48,   75,   76,   77,   78,   79,   80,
           81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,    0,  238,  818,
          819,  820,  821,  822,  823,  604,   49,   50,  579,  632,
           98,  116,   51,   24,   52,  218,  219,   53,   54,   55,
           56,   57,   58,   59,   60,  626,   22,  231,   61,  344,
          390, -133, -133, -133,  577,  578,  391,  476,  579,  384,
          580,  368,  581,   32,   17,  392, -133,  393, -133,  394,
         -133,  395, -133, -172,  396, -133, -133, -133,   34,   35,
          397,  345, -488,   36,  398, -487,  791,   62,  792,  793,
          285,  287,  399,  400,  356,  632,  372,  548,  401,  402,
          403,  668,  583,  404,  405,  263,   25,  221,  406,  407,
          676,  584,  585,  586,  587,  588,  589,  242,  626,  604,
           38,  439,  416,  590,  591,  346,  615,  592,  546, -133,
           63,   74,  254,  875,  259,  263,   -4,  576,   42,   43,
          389,   44,   45,  128,  617,  618,  361,   46,   47,   26,
           48,   75,   76,   77,   78,   79,   80,   81,   82,   83,
           84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
           94,   95,   96,   97,  676,  238,  633,  549,  627,   25,
          221,  246,  269,   49,   50,  604,  360,   98,  336,   51,
          341,   52,  218,  219,   53,   54,   55,   56,   57,   58,
           59,   60,  113,   22,  231,   61,  344,  390,  604,  604,
          292,  577,  578,  391, -479,  579,  373,  580, -172,  581,
           32,   17,  392,   41,  393, -173,  394, -488,  395, -488,
         -487,  396, -487,  617,  618,   34,   35,  397,  345,  334,
           36,  398,  633,  -88,   62,  253,  332,  285,  287,  399,
          400,  416,  876,  288,  346,  401,  402,  403,  582,  583,
          404,  405,  769,  770,  604,  406,  407,  112,  584,  585,
          586,  587,  588,  589,  242,  416,  604,  286,  346,  273,
          590,  591,  346,  437,  592,  546,   -4,   63,  275,  254,
          114,  259,  263,  680,  681,  682,  683,  684,  685,  605,
          686,  687,  688,  689,  690,   26,  353,   75,   76,   77,
           78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
          416,  238,  257,  346,  528,  818,  819,  820,  821,  822,
          823,  824,  271,   98,  262,  337,  691,  239,   92,   93,
           94,   95,   96,   97, -251,  238,  507,  127,  310, -479,
          692,  693,  694,  695,  696,  697,  698,   98,  786,  699,
         -173,  579,  626,  869,  125,  629,  700,  701,  702,  703,
          704,  705,  706,  707,  708,  709,  710,  711,  712,  713,
          714,  715,  716,  717,  718,  719,  720,  721,  722,  723,
          724,  725,  726,  727,  728,  729,  730,  731,  732,  733,
          734,  735,  736,  737,  738,  739,  740,  741,  742,  743,
          452,  744,  745,  746,  747,  748,  749,  750,  751,  752,
          214,  676,  663,   25,  221,  753,  754,  755,   72,   73,
           74,  121,  225,  681,  682,  683,  684,  685,  263,  686,
          687,  688,  689,  690,  127,  310,  264,  788,   26,    7,
           75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
           85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
           95,   96,   97,  257,  238,   21,  818,  819,  820,  821,
          822,  823,  824,  238,  234,  691,   98, -400,  130, -251,
           95,   96,   97,  331,  238,   98,   20,  877,  676,  692,
          693,  694,  695,  696,  697,  698,   98,  464,  529,  501,
           18,  124, -443,  118,  850,  700,  701,  702,  703,  704,
          705,  706,  707,  708,  709,  710,  711,  712,  713,  714,
          715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
          725,  726,  727,  728,  729,  730,  731,  732,  733,  734,
          735,  736,  737,  738,  739,  740,  741,  742,  743, -227,
          744,  745,  746,  747,  748,  749,  750,  751,  752,  604,
          270,  632,  249, -443,  530,  754,  755,  346,   72,   73,
           74,  895,  681,  682,  683,  684,  685, -443,  686,  687,
          688,  689,  690,  117, -443,  614, -446,  131,   26,  111,
           75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
           85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
           95,   96,   97,  241,  238,  514,  515,  382,    6,  494,
          495,  862,  574,  558,  691,  563,   98,  615,  338,  918,
          564,   98,  524,   39,  676,  831,  776,  448,  692,  693,
          694,  695,  696,  697,  698,  127,  310,  699,  794,  502,
          298,  353,  604,  438,  700,  701,  702,  703,  704,  705,
          706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
          716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
          726,  727,  728,  729,  730,  731,  732,  733,  734,  735,
          736,  737,  738,  739,  740,  741,  742,  743,  857,  744,
          745,  746,  747,  748,  749,  750,  751,  752,  633,  434,
           72,   73,   74,  753,  754,  755,  357,   40,  914,  681,
          682,  683,  684,  685,  355,  686,  687,  688,  689,  690,
           26,  450,   75,   76,   77,   78,   79,   80,   81,   82,
           83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,  257,  238,  891,  818,  819,
          820,  821,  822,  823,  824,  510,  498,  437,   98,  539,
          525,  691,  492,  662,  506,  258,   10,  -80,  247,  455,
          624,  625,  261,    3,  304,  692,  693,  694,  695,  696,
          697,  698,  305,  255,  699,  256,  868,    9,  323,  115,
          840,  700,  701,  702,  703,  704,  705,  706,  707,  708,
          709,  710,  711,  712,  713,  714,  715,  716,  717,  718,
          719,  720,  721,  722,  723,  724,  725,  726,  727,  728,
          729,  730,  731,  732,  733,  734,  735,  736,  737,  738,
          739,  740,  741,  742,  743,  322,  744,  745,  746,  747,
          748,  749,  750,  751,  752,  315,  500,   73,   74,  326,
          753,  754,  755,  681,  682,  683,  684,  685,  445,  686,
          687,  688,  689,  690,  356,  874,   26,   30,   75,   76,
           77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
           87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
           97,  257,  238,   31,  818,  819,  820,  821,  822,  823,
          824,  573,  853,  864,   98,  691,  872,  873,  572,  884,
          900,  901,  910,  911,  758,  912,  913,  917,  889,  692,
          693,  694,  695,  696,  697,  698,  561,  547,  541,  554,
          245,  860,  825,  556,  557,  700,  701,  702,  703,  704,
          705,  706,  707,  708,  709,  710,  711,  712,  713,  714,
          715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
          725,  726,  727,  818,  819,  820,  821,  822,  823,  734,
          735,  736,  737,  738,  739,  740,  741,  742,  743,  604,
          744,  745,  746,  747,  748,  749,  750,  751,  752,  565,
          759,  562,  579,  567,  753,  754,  755,  576,   42,   43,
          389,   44,   45,  569,  570,  630,  673,   46,   47,  566,
           48,-32767,-32767,-32767,-32767,   90,   91,   92,   93,   94,
           95,   96,   97,  790,  238,  559,  795,  833,  626,  844,
          858,  629,  769,  770,  916,  867,   98,  881,  894,  903,
          905,  908,  920,   49,   50,  416,   66,   64,  346,   51,
           37,   52,  218,  219,   53,   54,   55,   56,   57,   58,
           59,   60,  122,   22,  231,   61,  344,  390,   33,  263,
           29,  577,  578,  391, -445,  579,   23,  580, -444,  581,
           32,   17,  392,  579,  393,   68,  394, -446,  395,   25,
          221,  396, -467, -469,   67,   34,   35,  397,  348,   20,
           36,  398,   69,  235,   62,   70,  335,  285,  287,  576,
           42,   43,  389,   44,   45,  401,  402,  403,  333,   46,
           47,  374,   48,  237,  236,  406,  407,  272,  584,  585,
          586,  587,  588,  589,  242,  234, -441,  553,  217,  416,
          590,  591,  346,  626,  592,  546,  443,   63,  216,  254,
          132,  259,  263,   71,  129,   49,   50,  123,  674, -230,
          263,   51, -228,   52,  218,  219,   53,   54,   55,   56,
           57,   58,   59,   60, -227,   22,  231,   61,  344,  390,
           12,   13,   14,  577,  578,  391,   16,  579,  308,  580,
          535,  581,   32,   17,  392,  377,  393, -441,  394,  380,
          395,  387,  767,  396,   25,  221,  782,   34,   35,  397,
          348, -441,   36,  398,  787,  835,   62,  892, -441,  285,
          287,  576,   42,   43,  389,   44,   45,  401,  402,  403,
         -412,   46,   47,  640,   48,  832,  803,  406,  407,  802,
          584,  585,  586,  587,  588,  589,  242,  799,    0,  552,
            0,  416,  590,  591,  346,    0,  592,  546,    0,   63,
            0,  254,    0,  259,  263,    0,    0,   49,   50,    0,
            0,    0,    0,   51,    0,   52,  218,  219,   53,   54,
           55,   56,   57,   58,   59,   60,    0,   22,  231,   61,
          344,  390,    0,    0,    0,  577,  578,  391,    0,  579,
            0,  580,    0,  581,   32,   17,  392,    0,  393,    0,
          394,    0,  395,    0,    0,  396,    0,    0,    0,   34,
           35,  397,  348,    0,   36,  398,    0,    0,   62,    0,
            0,  285,  287,  576,   42,   43,  389,   44,   45,  401,
          402,  403,    0,   46,   47,    0,   48,    0,    0,  406,
          407,    0,  584,  585,  586,  587,  588,  589,  242,    0,
            0,  551,    0,  416,  590,  591,  346,    0,  808,  546,
            0,   63,    0,  254,    0,  259,  263,    0,    0,   49,
           50,    0,    0,    0,    0,   51,    0,   52,  218,  219,
           53,   54,   55,   56,   57,   58,   59,   60,    0,   22,
          231,   61,  344,  390,    0,    0,    0,  577,  578,  391,
            0,  579,    0,  580,    0,  581,   32,   17,  392,    0,
          393,    0,  394,    0,  395,    0,    0,  396,    0,    0,
            0,   34,   35,  397,  348,    0,   36,  398,    0,    0,
           62,    0,    0,  285,  287,  576,   42,   43,  389,   44,
           45,  401,  402,  403,    0,   46,   47,    0,   48,    0,
            0,  406,  407,    0,  584,  585,  586,  587,  588,  589,
          242,    0,    0,  550,    0,  416,  590,  591,  346,    0,
          592,  546,    0,   63,    0,  254,    0,  259,  263,    0,
            0,   49,   50,    0,    0,    0,    0,   51,    0,   52,
          218,  219,   53,   54,   55,   56,   57,   58,   59,   60,
            0,   22,  231,   61,  344,  390,    0,    0,    0,  577,
          578,  391,    0,  579,    0,  580,    0,  581,   32,   17,
          392,    0,  393,    0,  394,    0,  395,    0,    0,  396,
            0,    0,    0,   34,   35,  397,  348,    0,   36,  398,
            0,    0,   62,    0,    0,  285,  287,  576,   42,   43,
          389,   44,   45,  401,  402,  403,    0,   46,   47,    0,
           48,    0,    0,  406,  407,    0,  584,  585,  586,  587,
          588,  589,  242,    0,    0,    0,    0,  416,  590,  591,
          346,    0,  592,  546,    0,   63,    0,  254,    0,  259,
          263,    0,    0,   49,   50,    0,    0,    0,    0,   51,
            0,   52,  218,  219,   53,   54,   55,   56,   57,   58,
           59,   60,    0,   22,  231,   61,  344,  390,    0,    0,
            0,  577,  578,  391,    0,  579,    0,  580,    0,  581,
           32,   17,  392,    0,  393,    0,  394,    0,  395,    0,
            0,  396,    0,    0,    0,   34,   35,  397,  348,    0,
           36,  398,    0,    0,   62,    0,    0,  285,  287,    0,
           42,   43,  389,   44,   45,  401,  402,  403,  626,   46,
           47,  629,   48,    0,    0,  406,  407,    0,  584,  585,
          586,  587,  588,  589,  242,    0,    0,    0,    0,  416,
          590,  591,  346,  223,  592,  546,    0,   63,    0,  254,
            0,  259,  263,    0,  226,   49,   50,    0,    0,    0,
            0,   51,    0,   52,  218,  219,   53,   54,   55,   56,
           57,   58,   59,   60,    0,   22,  231,   61,  344,   25,
          221,    0,    0,  577,  578,  604,   22,  579,    0,    0,
          245,  581,    0,    0,  675,    0,  604,    0,  579,    0,
            0,    0,  581,    0,    0,    0,    0,    0,    0,    0,
          348,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          415,    0,    0,   42,   43,  389,   44,   45,  402,  403,
            0,  605,   46,   47,    0,   48,    0,  406,  407,  604,
          584,  585,  586,  587,  588,  589,  242,    0,  406,  407,
            0,  416,  590,  591,  346,  120,  223,    0,    0,   63,
          678,  254,  416,  259,  263,  346,    0,    0,   49,   50,
           65,    0,    0,    0,   51,  263,   52,  218,  219,   53,
           54,   55,   56,   57,   58,   59,   60,    0,   22,  231,
           61,  344,  769,  770,    0,    0,  577,  578,  604,   22,
          579,    0,    0,  245,  581,  416,    0,    0,  346,  604,
            0,  579,    0,    0,  -88,  581,    0,    0,    0,    0,
            0,    0,    0,  348,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  415,    0,    0,   42,   43,  389,   44,
           45,  402,  403,    0,  605,   46,   47, -442,   48,    0,
          406,  407,  604,  584,  585,  586,  587,  588,  589,  242,
            0,  406,  407,    0,  416,  590,  591,  346,  120,  222,
            0,    0,   63,    0,  254,  416,  259,  263,  346,    0,
            0,   49,   50,   65,    0,    0,    0,   51,  263,   52,
          218,  219,   53,   54,   55,   56,   57,   58,   59,   60,
            0,   22,  231,   61,  344,  769,  770,    0, -442,  577,
          578,  604,    0,  579,    0,    0,    0,  581,  416,    0,
            0,  346, -442,    0,    0,    0,    0, -232,    0, -442,
            0, -445,    0,    0,    0,    0,  348,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  415,    0,   42,   43,
          389,   44,   45,    0,  402,  403,    0,   46,   47,    0,
           48,    0,    0,  406,  407,    0,  584,  585,  586,  587,
          588,  589,  242,    0,    0,    0,    0,  416,  590,  591,
          346,  224,    0,    0,    0,   63,    0,  254,    0,  259,
          263,    0,    0,   49,   50,    0,    0,    0,    0,   51,
            0,   52,  218,  219,   53,   54,   55,   56,   57,   58,
           59,   60,    0,   22,  231,   61,  344,    0,    0,    0,
            0,  577,  578,  604,    0,  579,    0,    0,    0,  581,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  348,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  415,    0,
           42,   43,  389,   44,   45,    0,  402,  403,    0,   46,
           47,    0,   48,    0,    0,  406,  407,    0,  584,  585,
          586,  587,  588,  589,  242,    0,    0,    0,    0,  416,
          590,  591,  346,  220,    0,    0,    0,   63,    0,  254,
            0,  259,  263,    0,    0,   49,   50,    0,  608,    0,
            0,   51,    0,   52,  218,  219,   53,   54,   55,   56,
           57,   58,   59,   60,    0,   22,  231,   61,  344,    0,
            0,    0,  608,  577,  578,  604,    0,  579,    0,    0,
            0,  581,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          348,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          415,   42,   43,  389,   44,   45,    0,    0,  402,  403,
           46,   47,    0,   48,  604,    0,  579,  406,  407,    0,
          584,  585,  586,  587,  588,  589,  242,    0,  119,    0,
            0,  416,  590,  591,  346,    0,    0,    0,  604,   63,
          579,  254,    0,  259,  263,    0,   49,   50,    0,  605,
            0,    0,   51,    0,   52,  218,  219,   53,   54,   55,
           56,   57,   58,   59,   60,    0,   22,  231,   61,  344,
            0,    0,    0,  605,  577,  578,  604,    0,  579,    0,
          416,    0,  581,  346,  342,    0,    0,    0,    0,    0,
            0,    0,    0,  263,    0,    0,    0,    0,    0,    0,
            0,  348,    0,    0,  416,    0,    0,  346,    0,    0,
            0,  415,   42,   43,  389,   44,   45,  263,    0,  402,
          403,   46,   47,    0,   48,    0,    0,    0,  406,  407,
            0,  584,  585,  586,  587,  588,  589,  242,    0,    0,
            0,    0,  416,  590,  591,  346,    0,    0,    0,    0,
           63,    0,  254,    0,  259,  263,    0,   49,   50,    0,
            0,    0,    0,   51,    0,   52,  218,  219,   53,   54,
           55,   56,   57,   58,   59,   60,    0,   22,  231,   61,
          344,    0,    0,    0,    0,  577,  578,  604,  318,  579,
            0,    0,    0,  581,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  348,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  415,   42,   43,  389,   44,   45,    0,    0,
          402,  403,   46,   47,    0,   48,    0,    0,    0,  406,
          407,    0,  584,  585,  586,  587,  588,  589,  242,    0,
            0,    0,    0,  416,  590,  591,  346,    0,    0,    0,
            0,   63,    0,  254,    0,  259,  263,    0,   49,   50,
            0,    0,    0,    0,   51,    0,   52,  218,  219,   53,
           54,   55,   56,   57,   58,   59,   60,    0,   22,  231,
           61,  344,    0,    0,    0,    0,  577,  578,  604,    0,
          579,    0,    0,    0,  581,   80,   81,   82,   83,   84,
           85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
           95,   96,   97,  348,  238,    0,    0,    0,    0,    0,
            0,    0,    0,  415,    0,    0,   98,    0,    0,    0,
            0,  402,  403,    0,    0,    0,    0,    0,    0,    0,
          406,  407,    0,  584,  585,  586,  587,  588,  589,  242,
           72,   73,   74,    0,  416,  590,  591,  346,    0,    0,
            0,    0,   63,    0,  254,    0,  259,  263,    0,    0,
           26,  875,   75,   76,   77,   78,   79,   80,   81,   82,
           83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,    0,  238,   72,   73,   74,
            0,    0,    0,    0,    0,    0,    0,    0,   98,    0,
            0,    0,    0,    0,    0,    0,    0,   26,    0,   75,
           76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
           86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
           96,   97,    0,  238,    0,   72,   73,   74,    0,    0,
            0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
            0,    0,    0,    0,    0,   26,    0,   75,   76,   77,
           78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
          876,  238,   72,   73,   74,    0,    0,    0,    0,    0,
            0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
            0,    0,   26,    0,   75,   76,   77,   78,   79,   80,
           81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,    0,  238,    0,
            0,  307,   72,   73,   74,    0,    0,    0,    0,    0,
           98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   26,    0,   75,   76,   77,   78,   79,   80,
           81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,    0,  238,  472,
            0,   72,   73,   74,    0,    0,    0,    0,    0,    0,
           98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   26,    0,   75,   76,   77,   78,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,  488,  238,   72,   73,
           74,    0,    0,    0,    0,    0,    0,    0,    0,   98,
            0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
           75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
           85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
           95,   96,   97,    0,  238,    0,  538,   72,   73,   74,
            0,    0,    0,    0,    0,    0,   98,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,   26,    0,   75,
           76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
           86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
           96,   97,    0,  238,    0,  761,    0,   72,   73,   74,
            0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,   26,    0,   75,
           76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
           86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
           96,   97,   19,  238,   72,   73,   74,    0,    0,    0,
            0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
            0,    0,    0,    0,   26,    0,   75,   76,   77,   78,
           79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,    0,
          238,   15,   72,   73,   74,    0,    0,    0,    0,    0,
            0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   26,    0,   75,   76,   77,   78,   79,   80,
           81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,    0,  238,    0,
            0,   11,    0,   72,   73,   74,    0,    0,    0,    0,
           98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   26,    0,   75,   76,   77,   78,   79,
           80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,  783,  238,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   72,   73,   74,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   26,  789,   75,   76,   77,   78,   79,
           80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,    0,  238,
            0,    0,    0,    0,   72,   73,   74,    0,    0,    0,
            0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   26,  796,   75,   76,   77,   78,
           79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,    0,
          238,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   72,   73,   74,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   26,  838,   75,   76,   77,   78,
           79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,    0,
          238,    0,    0,    0,    0,   72,   73,   74,    0,    0,
            0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,   26,  837,   75,   76,   77,
           78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
            0,  238,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,   72,   73,   74,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,   26,  804,   75,   76,   77,
           78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
            0,  238,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
           72,   73,   74,    0,    0,  215,    0,  801,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
           26,  213,   75,   76,   77,   78,   79,   80,   81,   82,
           83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,    0,  238,   72,   73,   74,
            0,    0,    0,    0,    0,    0,    0,    0,   98,    0,
            0,    0,    0,    0,    0,    0,    0,   26,  126,   75,
           76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
           86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
           96,   97,    0,  238,   72,   73,   74,    0,    0,   28,
            0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
            0,    0,    0,    0,   26,    0,   75,   76,   77,   78,
           79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,    0,
          238,   72,   73,   74,    0,    0,    0,    0,    0,    0,
            0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
            0,   26,    0,   75,   76,   77,   78,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,    0,  238,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
           75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
           85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
           95,   96,   97,    0,  238,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   98,   77,   78,   79,
           80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,    0,  238,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   98,   78,   79,   80,   81,   82,   83,   84,   85,
           86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
           96,   97,    0,  238,    0,    0,    0,    0, -477,    0,
            0,    0,    0,    0,    0,   98,   27,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,   79,
           80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,    0,  238,
            0,    0,    0,    0,    0,    0,    0,  636,  637,    0,
            0,   98,    0,    0,    0,    0,    0,    0, -441,   27,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,-32767,-32767,-32767,-32767,-32767,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,    0,
          238,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          636,  637,   98,    0,    0,    0,    0,    0,    0,    0,
            0, -441,    0,    0,    0,    0,   22,    0,    0, -441,
            0,    0,    0,    0,    0,    0,  604,    0,  579,    0,
            0,    0,  581, -441,    0,    0,    0,    0,    0,    0,
         -441,    0,    0, -477,   81,   82,   83,   84,   85,   86,
           87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
           97,  605,  238,    0,    0,    0,    0,    0,    0,    0,
            0,    0, -441,    0,   98,    0,    0,    0,    0,  407,
            0,    0,    0,    0,    0,    0, -441,    0,    0,    0,
            0,    0,  416, -441,    0,  346,    0,    0,    0,    0,
           65,    0,    0,    0,    0,  263
    );

    protected $actionCheck = array(
            1,    2,    3,    4,    5,    6,   79,   96,   97,   98,
           11,   12,   28,   14,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,    0,   54,  112,
          113,  114,  115,  116,  117,   77,   47,   48,   79,    1,
           66,    7,   53,    7,   55,   56,   57,   58,   59,   60,
           61,   62,   63,   64,   65,   79,   67,   68,   69,   70,
           71,   72,   73,   74,   75,   76,   77,   48,   79,    7,
           81,    7,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,    7,   95,   96,   97,   98,   99,  100,
          101,  102,    7,  104,  105,    7,   77,  108,   79,   80,
          111,  112,  113,  114,  146,    1,   29,  149,  119,  120,
          121,  122,  123,  124,  125,  156,  140,  141,  129,  130,
           77,  132,  133,  134,  135,  136,  137,  138,   79,   77,
           67,   82,  143,  144,  145,  146,   35,  148,  149,  150,
          151,   10,  153,   29,  155,  156,    0,    1,    2,    3,
            4,    5,    6,   15,  102,  103,    7,   11,   12,   28,
           14,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
           49,   50,   51,   52,   77,   54,  148,  149,  139,  140,
          141,  128,  149,   47,   48,   77,    7,   66,  146,   53,
            7,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,  149,   67,   68,   69,   70,   71,   77,   77,
            7,   75,   76,   77,    7,   79,  149,   81,  152,   83,
           84,   85,   86,    7,   88,    7,   90,  152,   92,  154,
          152,   95,  154,  102,  103,   99,  100,  101,  102,  103,
          104,  105,  148,  152,  108,  109,  149,  111,  112,  113,
          114,  143,  148,    7,  146,  119,  120,  121,  122,  123,
          124,  125,  130,  131,   77,  129,  130,   15,  132,  133,
          134,  135,  136,  137,  138,  143,   77,    7,  146,  143,
          144,  145,  146,   79,  148,  149,  150,  151,   33,  153,
           13,  155,  156,    1,    2,    3,    4,    5,    6,  112,
            8,    9,   10,   11,   12,   28,  102,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
          143,   54,  109,  146,   79,  112,  113,  114,  115,  116,
          117,  118,    7,   66,    7,  146,   54,    7,   47,   48,
           49,   50,   51,   52,    7,   54,   96,   97,   98,  152,
           68,   69,   70,   71,   72,   73,   74,   66,  152,   77,
          152,   79,   79,  150,   67,   82,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
           98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
          108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
          118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
           77,  129,  130,  131,  132,  133,  134,  135,  136,  137,
           13,   77,  139,  140,  141,  143,  144,  145,    8,    9,
           10,  149,    7,    2,    3,    4,    5,    6,  156,    8,
            9,   10,   11,   12,   97,   98,   67,  150,   28,    7,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,  109,   54,    7,  112,  113,  114,  115,
          116,  117,  118,   54,  151,   54,   66,  142,   15,  152,
           50,   51,   52,  149,   54,   66,  151,  150,   77,   68,
           69,   70,   71,   72,   73,   74,   66,  128,   77,   72,
           73,   15,   67,   15,  150,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,  124,  125,  126,  127,  152,
          129,  130,  131,  132,  133,  134,  135,  136,  137,   77,
          149,    1,  152,  128,  143,  144,  145,  146,    8,    9,
           10,  150,    2,    3,    4,    5,    6,  142,    8,    9,
           10,   11,   12,   15,  149,   29,  151,   15,   28,   15,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,   29,   54,   72,   73,  102,  103,  106,
          107,  148,  149,   29,   54,   29,   66,   35,  146,  148,
          149,   66,   74,   67,   77,   80,   77,   86,   68,   69,
           70,   71,   72,   73,   74,   97,   98,   77,   77,   87,
           77,  102,   77,   77,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
          100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
          110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
          120,  121,  122,  123,  124,  125,  126,  127,  150,  129,
          130,  131,  132,  133,  134,  135,  136,  137,  148,   77,
            8,    9,   10,  143,  144,  145,   77,   67,  148,    2,
            3,    4,    5,    6,   77,    8,    9,   10,   11,   12,
           28,   77,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,  109,   54,   79,  112,  113,
          114,  115,  116,  117,  118,   79,   79,   79,   66,   89,
           91,   54,  109,  139,   93,  110,   94,   94,  128,   94,
          123,  123,  126,  142,  142,   68,   69,   70,   71,   72,
           73,   74,  142,  126,   77,  127,  150,  142,  146,  149,
          147,   84,   85,   86,   87,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
          103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
          113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
          123,  124,  125,  126,  127,  146,  129,  130,  131,  132,
          133,  134,  135,  136,  137,  146,  154,    9,   10,  146,
          143,  144,  145,    2,    3,    4,    5,    6,  146,    8,
            9,   10,   11,   12,  146,  148,   28,  148,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,  109,   54,  148,  112,  113,  114,  115,  116,  117,
          118,  148,  148,  148,   66,   54,  148,  148,  148,  148,
          148,  148,  148,  148,    1,  148,  148,  148,  148,   68,
           69,   70,   71,   72,   73,   74,  149,  149,   77,  149,
           28,  150,  150,  149,  149,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,  124,  125,  126,  127,   77,
          129,  130,  131,  132,  133,  134,  135,  136,  137,  149,
           77,  149,   79,  149,  143,  144,  145,    1,    2,    3,
            4,    5,    6,  149,  149,    1,  150,   11,   12,  150,
           14,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,  150,   54,   29,  150,  150,   79,  150,
          150,   82,  130,  131,  150,  150,   66,  150,  150,  150,
          150,  150,  150,   47,   48,  143,  151,  151,  146,   53,
          151,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,  149,   67,   68,   69,   70,   71,  151,  156,
          151,   75,   76,   77,  151,   79,  151,   81,  151,   83,
           84,   85,   86,   79,   88,  151,   90,  151,   92,  140,
          141,   95,  151,  151,  151,   99,  100,  101,  102,  151,
          104,  105,  151,  151,  108,  151,  151,  111,  112,    1,
            2,    3,    4,    5,    6,  119,  120,  121,  151,   11,
           12,  152,   14,  151,  151,  129,  130,  151,  132,  133,
          134,  135,  136,  137,  138,  151,   67,   29,  151,  143,
          144,  145,  146,   79,  148,  149,   82,  151,  151,  153,
          151,  155,  156,  149,  151,   47,   48,  151,  153,  152,
          156,   53,  152,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,  152,   67,   68,   69,   70,   71,
          152,  152,  152,   75,   76,   77,  152,   79,  152,   81,
          152,   83,   84,   85,   86,  152,   88,  128,   90,  152,
           92,  152,  152,   95,  140,  141,  152,   99,  100,  101,
          102,  142,  104,  105,  152,  152,  108,  152,  149,  111,
          112,    1,    2,    3,    4,    5,    6,  119,  120,  121,
          153,   11,   12,  154,   14,  154,  154,  129,  130,  154,
          132,  133,  134,  135,  136,  137,  138,  154,   -1,   29,
           -1,  143,  144,  145,  146,   -1,  148,  149,   -1,  151,
           -1,  153,   -1,  155,  156,   -1,   -1,   47,   48,   -1,
           -1,   -1,   -1,   53,   -1,   55,   56,   57,   58,   59,
           60,   61,   62,   63,   64,   65,   -1,   67,   68,   69,
           70,   71,   -1,   -1,   -1,   75,   76,   77,   -1,   79,
           -1,   81,   -1,   83,   84,   85,   86,   -1,   88,   -1,
           90,   -1,   92,   -1,   -1,   95,   -1,   -1,   -1,   99,
          100,  101,  102,   -1,  104,  105,   -1,   -1,  108,   -1,
           -1,  111,  112,    1,    2,    3,    4,    5,    6,  119,
          120,  121,   -1,   11,   12,   -1,   14,   -1,   -1,  129,
          130,   -1,  132,  133,  134,  135,  136,  137,  138,   -1,
           -1,   29,   -1,  143,  144,  145,  146,   -1,  148,  149,
           -1,  151,   -1,  153,   -1,  155,  156,   -1,   -1,   47,
           48,   -1,   -1,   -1,   -1,   53,   -1,   55,   56,   57,
           58,   59,   60,   61,   62,   63,   64,   65,   -1,   67,
           68,   69,   70,   71,   -1,   -1,   -1,   75,   76,   77,
           -1,   79,   -1,   81,   -1,   83,   84,   85,   86,   -1,
           88,   -1,   90,   -1,   92,   -1,   -1,   95,   -1,   -1,
           -1,   99,  100,  101,  102,   -1,  104,  105,   -1,   -1,
          108,   -1,   -1,  111,  112,    1,    2,    3,    4,    5,
            6,  119,  120,  121,   -1,   11,   12,   -1,   14,   -1,
           -1,  129,  130,   -1,  132,  133,  134,  135,  136,  137,
          138,   -1,   -1,   29,   -1,  143,  144,  145,  146,   -1,
          148,  149,   -1,  151,   -1,  153,   -1,  155,  156,   -1,
           -1,   47,   48,   -1,   -1,   -1,   -1,   53,   -1,   55,
           56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
           -1,   67,   68,   69,   70,   71,   -1,   -1,   -1,   75,
           76,   77,   -1,   79,   -1,   81,   -1,   83,   84,   85,
           86,   -1,   88,   -1,   90,   -1,   92,   -1,   -1,   95,
           -1,   -1,   -1,   99,  100,  101,  102,   -1,  104,  105,
           -1,   -1,  108,   -1,   -1,  111,  112,    1,    2,    3,
            4,    5,    6,  119,  120,  121,   -1,   11,   12,   -1,
           14,   -1,   -1,  129,  130,   -1,  132,  133,  134,  135,
          136,  137,  138,   -1,   -1,   -1,   -1,  143,  144,  145,
          146,   -1,  148,  149,   -1,  151,   -1,  153,   -1,  155,
          156,   -1,   -1,   47,   48,   -1,   -1,   -1,   -1,   53,
           -1,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,   -1,   67,   68,   69,   70,   71,   -1,   -1,
           -1,   75,   76,   77,   -1,   79,   -1,   81,   -1,   83,
           84,   85,   86,   -1,   88,   -1,   90,   -1,   92,   -1,
           -1,   95,   -1,   -1,   -1,   99,  100,  101,  102,   -1,
          104,  105,   -1,   -1,  108,   -1,   -1,  111,  112,   -1,
            2,    3,    4,    5,    6,  119,  120,  121,   79,   11,
           12,   82,   14,   -1,   -1,  129,  130,   -1,  132,  133,
          134,  135,  136,  137,  138,   -1,   -1,   -1,   -1,  143,
          144,  145,  146,   35,  148,  149,   -1,  151,   -1,  153,
           -1,  155,  156,   -1,   35,   47,   48,   -1,   -1,   -1,
           -1,   53,   -1,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,   -1,   67,   68,   69,   70,  140,
          141,   -1,   -1,   75,   76,   77,   67,   79,   -1,   -1,
           28,   83,   -1,   -1,  155,   -1,   77,   -1,   79,   -1,
           -1,   -1,   83,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          102,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          112,   -1,   -1,    2,    3,    4,    5,    6,  120,  121,
           -1,  112,   11,   12,   -1,   14,   -1,  129,  130,   77,
          132,  133,  134,  135,  136,  137,  138,   -1,  129,  130,
           -1,  143,  144,  145,  146,  147,   35,   -1,   -1,  151,
          152,  153,  143,  155,  156,  146,   -1,   -1,   47,   48,
          151,   -1,   -1,   -1,   53,  156,   55,   56,   57,   58,
           59,   60,   61,   62,   63,   64,   65,   -1,   67,   68,
           69,   70,  130,  131,   -1,   -1,   75,   76,   77,   67,
           79,   -1,   -1,   28,   83,  143,   -1,   -1,  146,   77,
           -1,   79,   -1,   -1,  152,   83,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  102,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  112,   -1,   -1,    2,    3,    4,    5,
            6,  120,  121,   -1,  112,   11,   12,   67,   14,   -1,
          129,  130,   77,  132,  133,  134,  135,  136,  137,  138,
           -1,  129,  130,   -1,  143,  144,  145,  146,  147,   35,
           -1,   -1,  151,   -1,  153,  143,  155,  156,  146,   -1,
           -1,   47,   48,  151,   -1,   -1,   -1,   53,  156,   55,
           56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
           -1,   67,   68,   69,   70,  130,  131,   -1,  128,   75,
           76,   77,   -1,   79,   -1,   -1,   -1,   83,  143,   -1,
           -1,  146,  142,   -1,   -1,   -1,   -1,  152,   -1,  149,
           -1,  151,   -1,   -1,   -1,   -1,  102,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,  112,   -1,    2,    3,
            4,    5,    6,   -1,  120,  121,   -1,   11,   12,   -1,
           14,   -1,   -1,  129,  130,   -1,  132,  133,  134,  135,
          136,  137,  138,   -1,   -1,   -1,   -1,  143,  144,  145,
          146,   35,   -1,   -1,   -1,  151,   -1,  153,   -1,  155,
          156,   -1,   -1,   47,   48,   -1,   -1,   -1,   -1,   53,
           -1,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,   -1,   67,   68,   69,   70,   -1,   -1,   -1,
           -1,   75,   76,   77,   -1,   79,   -1,   -1,   -1,   83,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  102,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  112,   -1,
            2,    3,    4,    5,    6,   -1,  120,  121,   -1,   11,
           12,   -1,   14,   -1,   -1,  129,  130,   -1,  132,  133,
          134,  135,  136,  137,  138,   -1,   -1,   -1,   -1,  143,
          144,  145,  146,   35,   -1,   -1,   -1,  151,   -1,  153,
           -1,  155,  156,   -1,   -1,   47,   48,   -1,    1,   -1,
           -1,   53,   -1,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,   -1,   67,   68,   69,   70,   -1,
           -1,   -1,    1,   75,   76,   77,   -1,   79,   -1,   -1,
           -1,   83,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          102,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          112,    2,    3,    4,    5,    6,   -1,   -1,  120,  121,
           11,   12,   -1,   14,   77,   -1,   79,  129,  130,   -1,
          132,  133,  134,  135,  136,  137,  138,   -1,   29,   -1,
           -1,  143,  144,  145,  146,   -1,   -1,   -1,   77,  151,
           79,  153,   -1,  155,  156,   -1,   47,   48,   -1,  112,
           -1,   -1,   53,   -1,   55,   56,   57,   58,   59,   60,
           61,   62,   63,   64,   65,   -1,   67,   68,   69,   70,
           -1,   -1,   -1,  112,   75,   76,   77,   -1,   79,   -1,
          143,   -1,   83,  146,  123,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  156,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,  102,   -1,   -1,  143,   -1,   -1,  146,   -1,   -1,
           -1,  112,    2,    3,    4,    5,    6,  156,   -1,  120,
          121,   11,   12,   -1,   14,   -1,   -1,   -1,  129,  130,
           -1,  132,  133,  134,  135,  136,  137,  138,   -1,   -1,
           -1,   -1,  143,  144,  145,  146,   -1,   -1,   -1,   -1,
          151,   -1,  153,   -1,  155,  156,   -1,   47,   48,   -1,
           -1,   -1,   -1,   53,   -1,   55,   56,   57,   58,   59,
           60,   61,   62,   63,   64,   65,   -1,   67,   68,   69,
           70,   -1,   -1,   -1,   -1,   75,   76,   77,   78,   79,
           -1,   -1,   -1,   83,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,  102,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,  112,    2,    3,    4,    5,    6,   -1,   -1,
          120,  121,   11,   12,   -1,   14,   -1,   -1,   -1,  129,
          130,   -1,  132,  133,  134,  135,  136,  137,  138,   -1,
           -1,   -1,   -1,  143,  144,  145,  146,   -1,   -1,   -1,
           -1,  151,   -1,  153,   -1,  155,  156,   -1,   47,   48,
           -1,   -1,   -1,   -1,   53,   -1,   55,   56,   57,   58,
           59,   60,   61,   62,   63,   64,   65,   -1,   67,   68,
           69,   70,   -1,   -1,   -1,   -1,   75,   76,   77,   -1,
           79,   -1,   -1,   -1,   83,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,  102,   54,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  112,   -1,   -1,   66,   -1,   -1,   -1,
           -1,  120,  121,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          129,  130,   -1,  132,  133,  134,  135,  136,  137,  138,
            8,    9,   10,   -1,  143,  144,  145,  146,   -1,   -1,
           -1,   -1,  151,   -1,  153,   -1,  155,  156,   -1,   -1,
           28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,   -1,   54,    8,    9,   10,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,   -1,   54,   -1,    8,    9,   10,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   28,   -1,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
          148,   54,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   28,   -1,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,   -1,   54,   -1,
           -1,  152,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,
           66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   28,   -1,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,   -1,   54,  152,
           -1,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,   -1,
           66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   28,   -1,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   52,  152,   54,    8,    9,
           10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,   -1,   54,   -1,  152,    8,    9,   10,
           -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,   -1,   54,   -1,  152,   -1,    8,    9,   10,
           -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,  152,   54,    8,    9,   10,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,   -1,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,  152,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   28,   -1,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,   -1,   54,   -1,
           -1,  152,   -1,    8,    9,   10,   -1,   -1,   -1,   -1,
           66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   28,   -1,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,  152,   54,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   28,  150,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
           -1,   -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,  150,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,  150,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,   -1,   -1,   -1,   -1,    8,    9,   10,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   28,  150,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
           -1,   54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,    8,    9,   10,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   28,  150,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
           -1,   54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,
            8,    9,   10,   -1,   -1,   13,   -1,  150,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           28,   94,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,   -1,   54,    8,    9,   10,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   29,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,   -1,   54,    8,    9,   10,   -1,   -1,   13,
           -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,   -1,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   28,   -1,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   52,   -1,   54,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,   -1,   54,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   66,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   66,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,   -1,   54,   -1,   -1,   -1,   -1,    7,   -1,
           -1,   -1,   -1,   -1,   -1,   66,   15,   16,   17,   18,
           19,   20,   21,   22,   23,   24,   25,   26,   27,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   56,   57,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   67,   15,
           16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
           26,   27,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           56,   57,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   67,   -1,   -1,   -1,   -1,   67,   -1,   -1,  128,
           -1,   -1,   -1,   -1,   -1,   -1,   77,   -1,   79,   -1,
           -1,   -1,   83,  142,   -1,   -1,   -1,   -1,   -1,   -1,
          149,   -1,   -1,  152,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,  112,   54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,  128,   -1,   66,   -1,   -1,   -1,   -1,  130,
           -1,   -1,   -1,   -1,   -1,   -1,  142,   -1,   -1,   -1,
           -1,   -1,  143,  149,   -1,  146,   -1,   -1,   -1,   -1,
          151,   -1,   -1,   -1,   -1,  156
    );

    protected $actionBase = array(
            0,   -1,  156,  312,  461,  610,  757,  757,  757,  757,
          901, 1382, 1158, 1046, 1158, 1494, 1270, 1606, 1606, 1606,
         1718, 1831, 2168, 2168, 2168, 2390, 2279, 1944, 2056, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
         2501, 2501, 2501,  600,  600, 2632, 3636,  450, 2873, 2727,
         2969, 3019, 3477, 2679, 3066, 3542, 3114, 3165, 3589, 3407,
         3356, 3286, 3235, 2774,  742, 2920, 2824, 3683, 3683, 3683,
         3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683,
         3683, 3683, 3683,  888,  297,  141,  -16,  -16,  -16,  -16,
          -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
          -16,  -16,  -16,  -16, 3720, 3720, 3720, 3755, 3789, 3841,
         3835, 2550, 3894, 3958, 3886, 3886, 3886, 3886, 3886, 1020,
         1020, 1020, 1020, 1729, 1729, 1842, 3899, 3899, 3899, 3899,
         3899, 3899, 3899, 3899, 3899, 3899, 3899,  832,  394,  686,
          243, 2241,  321,  321, 1885, 1885, 1885, 1885, 2217, 1772,
          -73,  952,   59,  313, 1649,  152,  963,  963,  475, 1890,
          470,  470,  470,   62, 1114,  207,  207,  207,  207,  999,
          999,  207,  207, 1054,   29, 1119, 1119,  690, 1119,  151,
          151,  151,  128,  -32,  -14,  128,   48,  280,  588,  -89,
          377,   73,   95,   98,  219,  -31,  522,  224,  -31,  553,
          467,  583,  111,  114,  375,  114,  114,  114,  114,  114,
          114,  114,  114,  114,  -31,  -31,  114,   87,  114,  513,
          124,  521,  459,  363,  409,   53,   86,  236,  327,  459,
          459,  459,  451,  374,  367,  437,  117,  238,  555,  227,
          275,  615,  615,  632,  672,  694,  615,  615,  615,  615,
          727,  615,  998,  998,  949,  632,  615,  998,  632,   44,
          199,  290,  266,  632,  159,  707,  615,  696,  696,   74,
          672,  728,  455,  498,  708,  998,  998,  708,  694,  360,
          632,  357,  810,  803,  703,  693,  355,  624,  624,  203,
          703,   72,  632,  624,  727,  472,  223,  624,   37,  946,
          945,  596,  993,  969,  984, 1005, 1001,  613,  828,  697,
          698, 1047, 1037, 1004,  616,  687,  967,  975,  762,  679,
          614,  272,  681,  606,  977,  589,  768,  605,  605,  605,
          606,  986,  605,  605,  605,  605,  605,  605,  605,  605,
         1129,   46,  682,  591,  608,  749,  725,  528,  890,  674,
          762,  762,  906, 1127, 1055,  597, 1034, 1100, 1056,  769,
          526, 1084, 1002,  909,  739,  599,  692, 1023, 1086, 1104,
          894,  614, 1112,  923,  611,  762,  926,  605,  991,  992,
         1143, 1135,  973, 1132, 1019,  753,  595, 1131,  927, 1113,
          904,  905,  795, 1078, 1057, 1093,  929, 1097,  804,  602,
         1060,  721, 1017,  726, 1026,  830,  930,  831,  148,  805,
          935, 1053,  808, 1079, 1080, 1072,  809,  767,  834,  835,
          503,  937,  612,  811, 1049,  634,  598,  719,  820,  718,
         1115,  938,  827, 1022,  812,  813,  939,  940, 1088,  723,
          768,  695,  705,  722,  720,  892,  941, 1099,  636,  814,
          815,  817,  818,  934,  819,  942,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,   88,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,   88,  489,  489,  489,32767,32767,32767,32767,  302,
          302,  302,32767,  481,  439,  439,  439,  439,  439,  439,
          439,  481,32767,32767,32767,32767,32767,  381,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,   88,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  486,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  364,  365,  367,
          368,  301,  440,  250,  485,  300,  126,  261,  252,  204,
          298,  236,  130,  329,  382,  331,  380,  384,  330,  307,
          311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
          321,  322,  305,  306,  361,  360,  359,  327,  328,  304,
          332,  334,  304,  333,  350,  351,  348,  349,  352,  353,
          354,  355,  356,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,   88,32767,  284,  284,  284,
          284,32767,  341,  342,  242,  242,  242,  242,32767,  242,
          285,32767,32767,32767,32767,32767,32767,32767,  433,  358,
          336,  337,  335,32767,  411,32767,32767,32767,32767,32767,
          413,32767,   88,32767,32767,  324,  326,  405,  308,32767,
        32767,   90,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  408,  441,  441,32767,32767,   88,  399,   88,  169,
          223,  225,  174,32767,  416,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  346,32767,  496,32767,  441,32767,32767,  338,
          339,  340,32767,32767,  441,  441,32767,  441,32767,  441,
        32767,32767,32767,  174,32767,32767,32767,32767,32767,32767,
        32767,   90,  414,  414,  409,  174,32767,32767,  174,   87,
           87,   87,   87,  174,   87,  187,32767,  185,  185,   87,
           88,   88,   87,   87,  189,32767,  455,  189,   88,   87,
          174,   87,  209,  209,  390,  176,   89,  244,  244,   89,
          390,   87,  174,  244,   88,   87,   87,  244,32767,32767,
        32767,   82,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  401,32767,
        32767,  421,32767,  434,  453,  399,32767,  344,  345,  347,
        32767,  443,  369,  370,  371,  372,  373,  374,  375,  377,
        32767,  482,  404,32767,32767,   84,  117,  260,32767,  494,
           84,  402,32767,  494,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,   84,32767,   84,32767,32767,32767,
        32767,  478,32767,  441,32767,  403,32767,  343,  417,  460,
        32767,32767,  442,32767,32767,   84,32767,32767,32767,32767,
        32767,32767,32767,32767,  421,32767,32767,32767,32767,32767,
          441,32767,32767,32767,32767,32767,32767,32767,  297,32767,
        32767,32767,32767,32767,32767,  441,32767,32767,32767,32767,
          235,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,   82,
           60,32767,  278,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  132,  132,    3,    3,
          132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
          132,  132,  132,  132,  132,  263,  164,  263,  217,  263,
          263,  220,  209,  209,  270,    1,  161,  423,  424,  456,
          151,  422,   94,  182,  428,  429,  430,  431,  425,  426,
          432,  427,  163,    2,   91,   92,   93,  162,  407,  447,
          309,  378,  451,  454,   82,  399,  421,  484,  406,  400,
          461,  389,  310,  376,  160,  175,  125,  102,  103,  119,
          113,  255,  256,  259,  183,  184,  495,  436,  492,  494,
          459,  458,   86,   85,  100,  152,  323,  325,  396,  397,
          419,  415,  388,  150,  299,  303,  202,  145,  146,  159,
          101,  123,  147,  158,  120,   98,  111,  148,  253,  149,
          257,  476,  435,  438,  490,  491,  493,   95,  137,  134,
          135,  136,  131,  138,  379,  437,   83,  357,  246,  248,
          418,    5,    6,    7,    8,    9,   10,   11,   12,   48,
           49,   13,   14,   15,   16,   17,   18,   19,   20,   80,
           21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
           31,   51,   52,   53,   54,   55,   43,   44,   45,   46,
           47,   32,   33,   34,   35,   36,   37,   38,   74,   75,
           76,   77,   78,   79,   39,   40,   41,   42,   72,   63,
           61,   62,   58,   59,   50,   56,   57,   64,   65,   67,
           66,   68,   69,   60,   71,   70,   73,   81,  473,  470,
          472,  366,  383,  483,  465,  464,  466,  410,  201,  240,
          241,  239,  233,  243,  237,  124,  118,   99,  112,  254,
          258,  171,  362,  363,  192,  188,  474,  420,  500,  499,
          502,  503,  506,  504,  498,   97,  457,  186,  398,  448,
          452,  450,  449,  462,  463,  215,  141,  229,  199,  198,
          156,  203,  144,  238,  231,  121,  116,  153,  291,  292,
          293,  290,  289,  288,  283,  181,  262,  286,  191,  480,
          475,  505,  497,   96,  249,  247,  190,  468,  471,  234,
          177,  157,  165,  122,  106,  114,  110,  295,  287,  193,
          180,  139,  218,  142,  196,  154,  210,  205,  107,  115,
          104,  108,  268,  267,  264,  294,  129,  501,  179,  387,
          221,  224,  216,  200,  207,  213,  214,  206,  245,  393,
          166,  105,  109,  296,  265,  127,  194,  143,  155,  208,
          212,  395,  391,  392,  170,  269,  279,  271,  128,  226,
          140,  197,  211,  178,  394,  385,  167,  219,  386,  277,
          195,  272,  275,  276,  274,  222,  168,  273,  280,  266,
          281
    );

    protected $goto = array(
          163,  163,  136,  136,  136,  146,  148,  179,  164,  161,
          161,  161,  161,  145,  162,  162,  162,  162,  162,  162,
          162,  145,  157,  158,  159,  160,  176,  174,  177,  417,
          418,  312,  419,  422,  423,  424,  425,  426,  427,  428,
          429,  612,  134,  137,  138,  139,  140,  141,  142,  143,
          144,  147,  173,  175,  178,  194,  197,  198,  200,  201,
          203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
          232,  233,  250,  251,  252,  319,  320,  321,  467,  180,
          181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
          191,  192,  193,  149,  762,  150,  165,  166,  167,  195,
          168,  151,  152,  153,  169,  154,  196,  135,  170,  155,
          171,  172,  156,  531,  199,  435,  653,  898,  468,  896,
          544,    5,  199,  523,  909,  469,  669,  594,  595,  461,
          278,  440,  440,  440,  260,  440,  805,  461,  886,  244,
          568,  596,  433,  871,  907,  542,  456,  453,  440,  809,
          571,  489,  491,  517,  521,  890,  526,  527,  899,  534,
          902,  536,  543,  915,  545,  484,  484,  606,  606,  606,
          606,  606,  606,  606,  606,  606,  606,  606,  606,  421,
          421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
          421,  421,  421,  440,  440,  485,  487,  537,  454,  475,
          440,  440,  638,  440,  228,  888,  229,  230,  441,  297,
          300,  447,  470,  471,  473,  836,  309,  540,  465,  420,
          420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
          420,  420,  420,  651,  656,  658,  432,  660,  462,  619,
          664,  664,  768,  432,  509,  781,  479,  482,  503,  522,
          466,  478,  814,  311,  828,  639,  834,  664,  667,  295,
          784,  784,  784,  784,  865,  763,  797,  849,  885,  893,
          619,  666,  619,  798,  800,  634,  504,  643,  647,  648,
          649,  650,  652,  655,  657,  659,  830,  459,  777,  677,
          817,  665,  665,  839,  325,  505,  329,  316,  316,  265,
          266,  282,  463,  268,  324,  283,  327,  490,  665,  807,
          807,  829,  313,  878,  813,  446,  284,  846,  846,  496,
          457,  765,  654,  654,  654,  843,  859,  882,  306,  279,
          280,  276,  778,  779,  555,  511,  642,  375,  775,  367,
          609,  879,  481,  771,  771,  771,  771,  609,  771,    8,
          771,  848,  780,  610,  771,  811,  861,  883,    0,  383,
          610,    0,    0,    0,  609,  609,  609,  609,  760,  760,
          609,  609,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  880,    0,    0,  906,  631,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  622,    0,    0,
          622,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  764,  766
    );

    protected $gotoCheck = array(
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   60,   53,    8,   10,   33,    7,    7,
            7,  106,   53,    7,    7,   93,   13,   13,   14,   81,
           76,    8,    8,    8,  128,    8,   13,   81,   13,  128,
           13,   15,   13,   13,   13,    5,    8,   36,    8,   37,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   82,   82,   82,   82,   82,
           82,   82,   82,   82,   82,   82,   82,   82,   82,  131,
          131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
          131,  131,  131,    8,    8,   64,   64,   64,    8,    8,
            8,    8,   88,    8,   69,   52,   69,   69,    8,   46,
           46,   46,   46,   46,   46,   72,   72,   72,    8,  129,
          129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
          129,  129,  129,   11,   11,   11,   71,   11,  130,   23,
          139,  139,   11,   71,   65,   11,   11,   43,   43,   65,
            2,    2,   11,   65,   11,   88,   90,  139,   10,   49,
           71,   71,   71,   71,   11,  138,   71,   71,   11,   11,
           23,  139,   23,   88,   88,   10,   51,   10,   10,   10,
           10,   10,   10,   10,   10,   10,  136,   50,   10,  112,
           10,  140,  140,   84,   53,   53,   53,   53,   53,   53,
           53,   53,   53,   53,   53,   53,   53,   53,  140,   81,
           81,   81,   62,   86,   87,   62,   17,   23,   23,   21,
           62,  133,   23,   23,   23,   23,   27,   23,   16,   76,
           76,    9,   25,   92,   78,   20,  118,   62,   29,   67,
           60,  121,   68,   60,   60,   60,   60,   60,   60,   62,
           60,  106,   95,   93,   60,   75,   12,  109,   -1,  116,
           93,   -1,   -1,   -1,   60,   60,   60,   60,   93,   93,
           60,   60,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   60,   -1,   -1,   60,   93,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
           93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   93,   93
    );

    protected $gotoBase = array(
            0,    0, -298,    0,    0,  135,    0,  115, -138,   58,
          -18, -117,  -23,  125,  126,  139,   44,   63,    0,    0,
            3,   49,    0,  -14,    0,   46,    0,   55,    0,  -22,
          -20,    0,    0,  110,    0,    0, -400,  133,    0,    0,
            0,    0,    0,  217,    0,    0,  174,    0,    0,  227,
           70,   62,  191,   81,    0,    0,    0,    0,    0,    0,
          109,    0,  -33,    0,  -40, -134,    0,  -19,  -25, -363,
            0,    5,  -41,    0,    0,  -13, -243,    0,   24,    0,
            0,   96,  -48,    0,   54,    0,   72,   69,  -92,    0,
          235,    0,   45,  122,    0,   -9,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  111,    0,    0,  -27,
            0,    0,   51,    0,    0,    0,  -21,    0,   -7,    0,
            0,    8,    0,    0,    0,    0,    0,    0, -120,    6,
          215,  -34,    0,   74,    0,    0,  245,    0,  241,   -3,
           48,    0,    0,    0
    );

    protected $gotoDefault = array(
        -32768,  388,  575,    2,  593,  756,  757,  512,  408,  436,
          635,  644,  845,  854,  670,  671,  301,  339,  293,  299,
          497,  486,  379,  815,  351,  620,  376,  816,  350,  616,
          133,  513,  385,  866,    1,  672,  442,  597,  290,  851,
          291,  516,  806,  449,  887,  812,  296,  302,  303,  645,
          458,  483,  855,  202,  451,  810,  289,  841,  842,  330,
          294,  362,  519,  493,  474,  508,  409,  364,  480,  227,
          460,  598,  785,  371,  359,  646,  277,  856,  560,  852,
          870,  410,  411,  369,  772,  370,  773,  774,  641,  363,
          679,  352,  621,  599,  354,  623,  826,  340,  499,  328,
          919,  863,    4,  897,  532,  533,  827,  240,  381,  847,
          349,  600,  343,  613,  601,  444,  378,  611,  358,  520,
          386,  904,  602,  347,  412,  365,  267,  281,  243,  413,
          430,  248,  414,  366,  603,  317,  661,  431,  607,  628,
          274,  314,  477,-32768
    );

    protected $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
            7,    7,    8,    8,    9,   10,   10,   11,   11,   12,
           12,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,   17,   17,   18,   18,   18,   18,   20,   22,
           22,   16,   24,   24,   21,   26,   26,   23,   23,   25,
           25,   27,   27,   19,   28,   28,   29,   31,   32,   32,
           33,   34,   34,   36,   35,   35,   35,   35,   37,   37,
           37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
           37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
           37,   37,   13,   13,   56,   56,   59,   59,   58,   57,
           57,   50,   61,   61,   62,   62,   63,   63,   14,   15,
           15,   15,   66,   66,   66,   67,   67,   70,   70,   68,
           68,   72,   73,   73,   44,   44,   52,   52,   55,   55,
           55,   54,   74,   74,   75,   45,   45,   45,   45,   76,
           76,   77,   77,   78,   78,   42,   42,   38,   38,   79,
           40,   40,   80,   39,   39,   41,   41,   51,   51,   51,
           51,   64,   64,   83,   83,   84,   84,   86,   86,   87,
           87,   87,   85,   85,   65,   65,   88,   88,   89,   89,
           90,   90,   90,   47,   91,   91,   92,   48,   94,   94,
           95,   95,   69,   69,   96,   96,   96,   96,  101,  101,
          102,  102,  103,  103,  103,  103,  103,  104,  105,  105,
          100,  100,   97,   97,   99,   99,  107,  107,  106,  106,
          106,  106,  106,  106,   98,  108,  108,  109,  109,   49,
          110,  110,   43,   43,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,  117,  111,  111,
          116,  116,  119,  120,  120,  121,  122,  122,  122,   71,
           71,   60,   60,   60,  112,  112,  112,  124,  124,  113,
          113,  115,  115,  115,  118,  118,  129,  129,  129,   82,
          131,  131,  131,  114,  114,  114,  114,  114,  114,  114,
          114,  114,  114,  114,  114,  114,  114,  114,  114,   46,
           46,  127,  127,  127,  123,  123,  123,  132,  132,  132,
          132,  132,  132,   53,   53,   53,   93,   93,   93,   93,
          134,  126,  126,  126,  126,  126,  126,  125,  125,  125,
          133,  133,  133,  133,   81,  135,  135,  136,  136,  136,
          136,  136,  130,  137,  137,  138,  138,  138,  138,  138,
          128,  128,  128,  128,  140,  141,  139,  139,  139,  139,
          139,  139,  139,  142,  142,  142,  142
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    1,    1,    0,    1,    0,
            1,    1,    1,    1,    1,    3,    5,    4,    3,    4,
            2,    3,    1,    1,    7,    8,    6,    7,    2,    3,
            1,    2,    3,    1,    2,    3,    1,    1,    3,    1,
            2,    1,    2,    2,    3,    1,    3,    2,    3,    1,
            3,    2,    0,    1,    1,    1,    1,    1,    3,    7,
           10,    5,    7,    9,    5,    3,    3,    3,    3,    3,
            3,    1,    2,    5,    7,    9,    5,    6,    3,    3,
            2,    1,    1,    1,    0,    2,    1,    3,    8,    0,
            4,    2,    1,    3,    0,    1,    0,    1,   10,    7,
            6,    5,    1,    2,    2,    0,    2,    0,    2,    0,
            2,    2,    1,    3,    1,    4,    1,    4,    1,    1,
            4,    2,    1,    3,    3,    3,    4,    4,    5,    0,
            2,    4,    3,    1,    1,    1,    4,    0,    2,    5,
            0,    2,    6,    0,    2,    0,    3,    1,    2,    1,
            1,    2,    0,    1,    3,    4,    6,    1,    2,    1,
            1,    1,    0,    1,    0,    2,    2,    4,    1,    3,
            1,    2,    2,    2,    3,    1,    1,    2,    3,    1,
            1,    3,    2,    0,    3,    4,    9,    3,    1,    3,
            0,    2,    4,    5,    4,    4,    4,    3,    1,    1,
            1,    3,    1,    1,    0,    1,    1,    2,    1,    1,
            1,    1,    1,    1,    2,    1,    3,    1,    3,    2,
            3,    1,    0,    1,    1,    3,    3,    3,    4,    1,
            2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
            4,    3,    4,    4,    2,    2,    4,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    1,    3,
            2,    1,    2,    4,    2,   10,   11,    7,    3,    2,
            0,    4,    2,    1,    3,    2,    2,    2,    4,    1,
            1,    1,    2,    3,    1,    1,    1,    1,    1,    0,
            3,    0,    1,    1,    0,    1,    1,    3,    3,    3,
            4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    3,    2,    3,    3,    0,
            1,    1,    3,    1,    1,    3,    1,    1,    4,    4,
            4,    1,    4,    1,    1,    3,    1,    4,    2,    2,
            3,    1,    4,    4,    3,    3,    3,    1,    3,    1,
            1,    3,    1,    1,    4,    3,    1,    1,    1,    3,
            3,    0,    1,    3,    1,    3,    1,    4,    2,    0,
            2,    2,    1,    2,    1,    1,    1,    4,    3,    3,
            3,    6,    3,    1,    1,    2,    1
    );

    protected $productions = array(
        "\$start : start",
        "start : top_statement_list",
        "top_statement_list_ex : top_statement_list_ex top_statement",
        "top_statement_list_ex : /* empty */",
        "top_statement_list : top_statement_list_ex",
        "reserved_non_modifiers : T_INCLUDE",
        "reserved_non_modifiers : T_INCLUDE_ONCE",
        "reserved_non_modifiers : T_EVAL",
        "reserved_non_modifiers : T_REQUIRE",
        "reserved_non_modifiers : T_REQUIRE_ONCE",
        "reserved_non_modifiers : T_LOGICAL_OR",
        "reserved_non_modifiers : T_LOGICAL_XOR",
        "reserved_non_modifiers : T_LOGICAL_AND",
        "reserved_non_modifiers : T_INSTANCEOF",
        "reserved_non_modifiers : T_NEW",
        "reserved_non_modifiers : T_CLONE",
        "reserved_non_modifiers : T_EXIT",
        "reserved_non_modifiers : T_IF",
        "reserved_non_modifiers : T_ELSEIF",
        "reserved_non_modifiers : T_ELSE",
        "reserved_non_modifiers : T_ENDIF",
        "reserved_non_modifiers : T_ECHO",
        "reserved_non_modifiers : T_DO",
        "reserved_non_modifiers : T_WHILE",
        "reserved_non_modifiers : T_ENDWHILE",
        "reserved_non_modifiers : T_FOR",
        "reserved_non_modifiers : T_ENDFOR",
        "reserved_non_modifiers : T_FOREACH",
        "reserved_non_modifiers : T_ENDFOREACH",
        "reserved_non_modifiers : T_DECLARE",
        "reserved_non_modifiers : T_ENDDECLARE",
        "reserved_non_modifiers : T_AS",
        "reserved_non_modifiers : T_TRY",
        "reserved_non_modifiers : T_CATCH",
        "reserved_non_modifiers : T_FINALLY",
        "reserved_non_modifiers : T_THROW",
        "reserved_non_modifiers : T_USE",
        "reserved_non_modifiers : T_INSTEADOF",
        "reserved_non_modifiers : T_GLOBAL",
        "reserved_non_modifiers : T_VAR",
        "reserved_non_modifiers : T_UNSET",
        "reserved_non_modifiers : T_ISSET",
        "reserved_non_modifiers : T_EMPTY",
        "reserved_non_modifiers : T_CONTINUE",
        "reserved_non_modifiers : T_GOTO",
        "reserved_non_modifiers : T_FUNCTION",
        "reserved_non_modifiers : T_CONST",
        "reserved_non_modifiers : T_RETURN",
        "reserved_non_modifiers : T_PRINT",
        "reserved_non_modifiers : T_YIELD",
        "reserved_non_modifiers : T_LIST",
        "reserved_non_modifiers : T_SWITCH",
        "reserved_non_modifiers : T_ENDSWITCH",
        "reserved_non_modifiers : T_CASE",
        "reserved_non_modifiers : T_DEFAULT",
        "reserved_non_modifiers : T_BREAK",
        "reserved_non_modifiers : T_ARRAY",
        "reserved_non_modifiers : T_CALLABLE",
        "reserved_non_modifiers : T_EXTENDS",
        "reserved_non_modifiers : T_IMPLEMENTS",
        "reserved_non_modifiers : T_NAMESPACE",
        "reserved_non_modifiers : T_TRAIT",
        "reserved_non_modifiers : T_INTERFACE",
        "reserved_non_modifiers : T_CLASS",
        "reserved_non_modifiers : T_CLASS_C",
        "reserved_non_modifiers : T_TRAIT_C",
        "reserved_non_modifiers : T_FUNC_C",
        "reserved_non_modifiers : T_METHOD_C",
        "reserved_non_modifiers : T_LINE",
        "reserved_non_modifiers : T_FILE",
        "reserved_non_modifiers : T_DIR",
        "reserved_non_modifiers : T_NS_C",
        "reserved_non_modifiers : T_HALT_COMPILER",
        "semi_reserved : reserved_non_modifiers",
        "semi_reserved : T_STATIC",
        "semi_reserved : T_ABSTRACT",
        "semi_reserved : T_FINAL",
        "semi_reserved : T_PRIVATE",
        "semi_reserved : T_PROTECTED",
        "semi_reserved : T_PUBLIC",
        "identifier : T_STRING",
        "identifier : semi_reserved",
        "namespace_name_parts : T_STRING",
        "namespace_name_parts : namespace_name_parts T_NS_SEPARATOR T_STRING",
        "namespace_name : namespace_name_parts",
        "semi : ';'",
        "semi : error",
        "no_comma : /* empty */",
        "no_comma : ','",
        "optional_comma : /* empty */",
        "optional_comma : ','",
        "top_statement : statement",
        "top_statement : function_declaration_statement",
        "top_statement : class_declaration_statement",
        "top_statement : T_HALT_COMPILER",
        "top_statement : T_NAMESPACE namespace_name semi",
        "top_statement : T_NAMESPACE namespace_name '{' top_statement_list '}'",
        "top_statement : T_NAMESPACE '{' top_statement_list '}'",
        "top_statement : T_USE use_declarations semi",
        "top_statement : T_USE use_type use_declarations semi",
        "top_statement : group_use_declaration semi",
        "top_statement : T_CONST constant_declaration_list semi",
        "use_type : T_FUNCTION",
        "use_type : T_CONST",
        "group_use_declaration : T_USE use_type namespace_name_parts T_NS_SEPARATOR '{' unprefixed_use_declarations '}'",
        "group_use_declaration : T_USE use_type T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR '{' unprefixed_use_declarations '}'",
        "group_use_declaration : T_USE namespace_name_parts T_NS_SEPARATOR '{' inline_use_declarations '}'",
        "group_use_declaration : T_USE T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR '{' inline_use_declarations '}'",
        "unprefixed_use_declarations : non_empty_unprefixed_use_declarations optional_comma",
        "non_empty_unprefixed_use_declarations : non_empty_unprefixed_use_declarations ',' unprefixed_use_declaration",
        "non_empty_unprefixed_use_declarations : unprefixed_use_declaration",
        "use_declarations : non_empty_use_declarations no_comma",
        "non_empty_use_declarations : non_empty_use_declarations ',' use_declaration",
        "non_empty_use_declarations : use_declaration",
        "inline_use_declarations : non_empty_inline_use_declarations optional_comma",
        "non_empty_inline_use_declarations : non_empty_inline_use_declarations ',' inline_use_declaration",
        "non_empty_inline_use_declarations : inline_use_declaration",
        "unprefixed_use_declaration : namespace_name",
        "unprefixed_use_declaration : namespace_name T_AS T_STRING",
        "use_declaration : unprefixed_use_declaration",
        "use_declaration : T_NS_SEPARATOR unprefixed_use_declaration",
        "inline_use_declaration : unprefixed_use_declaration",
        "inline_use_declaration : use_type unprefixed_use_declaration",
        "constant_declaration_list : non_empty_constant_declaration_list no_comma",
        "non_empty_constant_declaration_list : non_empty_constant_declaration_list ',' constant_declaration",
        "non_empty_constant_declaration_list : constant_declaration",
        "constant_declaration : T_STRING '=' expr",
        "class_const_list : non_empty_class_const_list no_comma",
        "non_empty_class_const_list : non_empty_class_const_list ',' class_const",
        "non_empty_class_const_list : class_const",
        "class_const : identifier '=' expr",
        "inner_statement_list_ex : inner_statement_list_ex inner_statement",
        "inner_statement_list_ex : /* empty */",
        "inner_statement_list : inner_statement_list_ex",
        "inner_statement : statement",
        "inner_statement : function_declaration_statement",
        "inner_statement : class_declaration_statement",
        "inner_statement : T_HALT_COMPILER",
        "non_empty_statement : '{' inner_statement_list '}'",
        "non_empty_statement : T_IF '(' expr ')' statement elseif_list else_single",
        "non_empty_statement : T_IF '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single T_ENDIF ';'",
        "non_empty_statement : T_WHILE '(' expr ')' while_statement",
        "non_empty_statement : T_DO statement T_WHILE '(' expr ')' ';'",
        "non_empty_statement : T_FOR '(' for_expr ';' for_expr ';' for_expr ')' for_statement",
        "non_empty_statement : T_SWITCH '(' expr ')' switch_case_list",
        "non_empty_statement : T_BREAK optional_expr semi",
        "non_empty_statement : T_CONTINUE optional_expr semi",
        "non_empty_statement : T_RETURN optional_expr semi",
        "non_empty_statement : T_GLOBAL global_var_list semi",
        "non_empty_statement : T_STATIC static_var_list semi",
        "non_empty_statement : T_ECHO expr_list semi",
        "non_empty_statement : T_INLINE_HTML",
        "non_empty_statement : expr semi",
        "non_empty_statement : T_UNSET '(' variables_list ')' semi",
        "non_empty_statement : T_FOREACH '(' expr T_AS foreach_variable ')' foreach_statement",
        "non_empty_statement : T_FOREACH '(' expr T_AS variable T_DOUBLE_ARROW foreach_variable ')' foreach_statement",
        "non_empty_statement : T_DECLARE '(' declare_list ')' declare_statement",
        "non_empty_statement : T_TRY '{' inner_statement_list '}' catches optional_finally",
        "non_empty_statement : T_THROW expr semi",
        "non_empty_statement : T_GOTO T_STRING semi",
        "non_empty_statement : T_STRING ':'",
        "non_empty_statement : error",
        "statement : non_empty_statement",
        "statement : ';'",
        "catches : /* empty */",
        "catches : catches catch",
        "name_union : name",
        "name_union : name_union '|' name",
        "catch : T_CATCH '(' name_union T_VARIABLE ')' '{' inner_statement_list '}'",
        "optional_finally : /* empty */",
        "optional_finally : T_FINALLY '{' inner_statement_list '}'",
        "variables_list : non_empty_variables_list no_comma",
        "non_empty_variables_list : variable",
        "non_empty_variables_list : non_empty_variables_list ',' variable",
        "optional_ref : /* empty */",
        "optional_ref : '&'",
        "optional_ellipsis : /* empty */",
        "optional_ellipsis : T_ELLIPSIS",
        "function_declaration_statement : T_FUNCTION optional_ref T_STRING '(' parameter_list ')' optional_return_type '{' inner_statement_list '}'",
        "class_declaration_statement : class_entry_type T_STRING extends_from implements_list '{' class_statement_list '}'",
        "class_declaration_statement : T_INTERFACE T_STRING interface_extends_list '{' class_statement_list '}'",
        "class_declaration_statement : T_TRAIT T_STRING '{' class_statement_list '}'",
        "class_entry_type : T_CLASS",
        "class_entry_type : T_ABSTRACT T_CLASS",
        "class_entry_type : T_FINAL T_CLASS",
        "extends_from : /* empty */",
        "extends_from : T_EXTENDS class_name",
        "interface_extends_list : /* empty */",
        "interface_extends_list : T_EXTENDS class_name_list",
        "implements_list : /* empty */",
        "implements_list : T_IMPLEMENTS class_name_list",
        "class_name_list : non_empty_class_name_list no_comma",
        "non_empty_class_name_list : class_name",
        "non_empty_class_name_list : non_empty_class_name_list ',' class_name",
        "for_statement : statement",
        "for_statement : ':' inner_statement_list T_ENDFOR ';'",
        "foreach_statement : statement",
        "foreach_statement : ':' inner_statement_list T_ENDFOREACH ';'",
        "declare_statement : non_empty_statement",
        "declare_statement : ';'",
        "declare_statement : ':' inner_statement_list T_ENDDECLARE ';'",
        "declare_list : non_empty_declare_list no_comma",
        "non_empty_declare_list : declare_list_element",
        "non_empty_declare_list : non_empty_declare_list ',' declare_list_element",
        "declare_list_element : T_STRING '=' expr",
        "switch_case_list : '{' case_list '}'",
        "switch_case_list : '{' ';' case_list '}'",
        "switch_case_list : ':' case_list T_ENDSWITCH ';'",
        "switch_case_list : ':' ';' case_list T_ENDSWITCH ';'",
        "case_list : /* empty */",
        "case_list : case_list case",
        "case : T_CASE expr case_separator inner_statement_list",
        "case : T_DEFAULT case_separator inner_statement_list",
        "case_separator : ':'",
        "case_separator : ';'",
        "while_statement : statement",
        "while_statement : ':' inner_statement_list T_ENDWHILE ';'",
        "elseif_list : /* empty */",
        "elseif_list : elseif_list elseif",
        "elseif : T_ELSEIF '(' expr ')' statement",
        "new_elseif_list : /* empty */",
        "new_elseif_list : new_elseif_list new_elseif",
        "new_elseif : T_ELSEIF '(' expr ')' ':' inner_statement_list",
        "else_single : /* empty */",
        "else_single : T_ELSE statement",
        "new_else_single : /* empty */",
        "new_else_single : T_ELSE ':' inner_statement_list",
        "foreach_variable : variable",
        "foreach_variable : '&' variable",
        "foreach_variable : list_expr",
        "foreach_variable : array_short_syntax",
        "parameter_list : non_empty_parameter_list no_comma",
        "parameter_list : /* empty */",
        "non_empty_parameter_list : parameter",
        "non_empty_parameter_list : non_empty_parameter_list ',' parameter",
        "parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE",
        "parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE '=' expr",
        "type_expr : type",
        "type_expr : '?' type",
        "type : name",
        "type : T_ARRAY",
        "type : T_CALLABLE",
        "optional_param_type : /* empty */",
        "optional_param_type : type_expr",
        "optional_return_type : /* empty */",
        "optional_return_type : ':' type_expr",
        "argument_list : '(' ')'",
        "argument_list : '(' non_empty_argument_list no_comma ')'",
        "non_empty_argument_list : argument",
        "non_empty_argument_list : non_empty_argument_list ',' argument",
        "argument : expr",
        "argument : '&' variable",
        "argument : T_ELLIPSIS expr",
        "global_var_list : non_empty_global_var_list no_comma",
        "non_empty_global_var_list : non_empty_global_var_list ',' global_var",
        "non_empty_global_var_list : global_var",
        "global_var : simple_variable",
        "static_var_list : non_empty_static_var_list no_comma",
        "non_empty_static_var_list : non_empty_static_var_list ',' static_var",
        "non_empty_static_var_list : static_var",
        "static_var : T_VARIABLE",
        "static_var : T_VARIABLE '=' expr",
        "class_statement_list : class_statement_list class_statement",
        "class_statement_list : /* empty */",
        "class_statement : variable_modifiers property_declaration_list ';'",
        "class_statement : method_modifiers T_CONST class_const_list ';'",
        "class_statement : method_modifiers T_FUNCTION optional_ref identifier '(' parameter_list ')' optional_return_type method_body",
        "class_statement : T_USE class_name_list trait_adaptations",
        "trait_adaptations : ';'",
        "trait_adaptations : '{' trait_adaptation_list '}'",
        "trait_adaptation_list : /* empty */",
        "trait_adaptation_list : trait_adaptation_list trait_adaptation",
        "trait_adaptation : trait_method_reference_fully_qualified T_INSTEADOF class_name_list ';'",
        "trait_adaptation : trait_method_reference T_AS member_modifier identifier ';'",
        "trait_adaptation : trait_method_reference T_AS member_modifier ';'",
        "trait_adaptation : trait_method_reference T_AS T_STRING ';'",
        "trait_adaptation : trait_method_reference T_AS reserved_non_modifiers ';'",
        "trait_method_reference_fully_qualified : name T_PAAMAYIM_NEKUDOTAYIM identifier",
        "trait_method_reference : trait_method_reference_fully_qualified",
        "trait_method_reference : identifier",
        "method_body : ';'",
        "method_body : '{' inner_statement_list '}'",
        "variable_modifiers : non_empty_member_modifiers",
        "variable_modifiers : T_VAR",
        "method_modifiers : /* empty */",
        "method_modifiers : non_empty_member_modifiers",
        "non_empty_member_modifiers : member_modifier",
        "non_empty_member_modifiers : non_empty_member_modifiers member_modifier",
        "member_modifier : T_PUBLIC",
        "member_modifier : T_PROTECTED",
        "member_modifier : T_PRIVATE",
        "member_modifier : T_STATIC",
        "member_modifier : T_ABSTRACT",
        "member_modifier : T_FINAL",
        "property_declaration_list : non_empty_property_declaration_list no_comma",
        "non_empty_property_declaration_list : property_declaration",
        "non_empty_property_declaration_list : non_empty_property_declaration_list ',' property_declaration",
        "property_declaration : T_VARIABLE",
        "property_declaration : T_VARIABLE '=' expr",
        "expr_list : non_empty_expr_list no_comma",
        "non_empty_expr_list : non_empty_expr_list ',' expr",
        "non_empty_expr_list : expr",
        "for_expr : /* empty */",
        "for_expr : expr_list",
        "expr : variable",
        "expr : list_expr '=' expr",
        "expr : array_short_syntax '=' expr",
        "expr : variable '=' expr",
        "expr : variable '=' '&' variable",
        "expr : new_expr",
        "expr : T_CLONE expr",
        "expr : variable T_PLUS_EQUAL expr",
        "expr : variable T_MINUS_EQUAL expr",
        "expr : variable T_MUL_EQUAL expr",
        "expr : variable T_DIV_EQUAL expr",
        "expr : variable T_CONCAT_EQUAL expr",
        "expr : variable T_MOD_EQUAL expr",
        "expr : variable T_AND_EQUAL expr",
        "expr : variable T_OR_EQUAL expr",
        "expr : variable T_XOR_EQUAL expr",
        "expr : variable T_SL_EQUAL expr",
        "expr : variable T_SR_EQUAL expr",
        "expr : variable T_POW_EQUAL expr",
        "expr : variable T_INC",
        "expr : T_INC variable",
        "expr : variable T_DEC",
        "expr : T_DEC variable",
        "expr : expr T_BOOLEAN_OR expr",
        "expr : expr T_BOOLEAN_AND expr",
        "expr : expr T_LOGICAL_OR expr",
        "expr : expr T_LOGICAL_AND expr",
        "expr : expr T_LOGICAL_XOR expr",
        "expr : expr '|' expr",
        "expr : expr '&' expr",
        "expr : expr '^' expr",
        "expr : expr '.' expr",
        "expr : expr '+' expr",
        "expr : expr '-' expr",
        "expr : expr '*' expr",
        "expr : expr '/' expr",
        "expr : expr '%' expr",
        "expr : expr T_SL expr",
        "expr : expr T_SR expr",
        "expr : expr T_POW expr",
        "expr : '+' expr",
        "expr : '-' expr",
        "expr : '!' expr",
        "expr : '~' expr",
        "expr : expr T_IS_IDENTICAL expr",
        "expr : expr T_IS_NOT_IDENTICAL expr",
        "expr : expr T_IS_EQUAL expr",
        "expr : expr T_IS_NOT_EQUAL expr",
        "expr : expr T_SPACESHIP expr",
        "expr : expr '<' expr",
        "expr : expr T_IS_SMALLER_OR_EQUAL expr",
        "expr : expr '>' expr",
        "expr : expr T_IS_GREATER_OR_EQUAL expr",
        "expr : expr T_INSTANCEOF class_name_reference",
        "expr : '(' expr ')'",
        "expr : expr '?' expr ':' expr",
        "expr : expr '?' ':' expr",
        "expr : expr T_COALESCE expr",
        "expr : T_ISSET '(' variables_list ')'",
        "expr : T_EMPTY '(' expr ')'",
        "expr : T_INCLUDE expr",
        "expr : T_INCLUDE_ONCE expr",
        "expr : T_EVAL '(' expr ')'",
        "expr : T_REQUIRE expr",
        "expr : T_REQUIRE_ONCE expr",
        "expr : T_INT_CAST expr",
        "expr : T_DOUBLE_CAST expr",
        "expr : T_STRING_CAST expr",
        "expr : T_ARRAY_CAST expr",
        "expr : T_OBJECT_CAST expr",
        "expr : T_BOOL_CAST expr",
        "expr : T_UNSET_CAST expr",
        "expr : T_EXIT exit_expr",
        "expr : '@' expr",
        "expr : scalar",
        "expr : '`' backticks_expr '`'",
        "expr : T_PRINT expr",
        "expr : T_YIELD",
        "expr : T_YIELD expr",
        "expr : T_YIELD expr T_DOUBLE_ARROW expr",
        "expr : T_YIELD_FROM expr",
        "expr : T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type '{' inner_statement_list '}'",
        "expr : T_STATIC T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type '{' inner_statement_list '}'",
        "anonymous_class : T_CLASS ctor_arguments extends_from implements_list '{' class_statement_list '}'",
        "new_expr : T_NEW class_name_reference ctor_arguments",
        "new_expr : T_NEW anonymous_class",
        "lexical_vars : /* empty */",
        "lexical_vars : T_USE '(' lexical_var_list ')'",
        "lexical_var_list : non_empty_lexical_var_list no_comma",
        "non_empty_lexical_var_list : lexical_var",
        "non_empty_lexical_var_list : non_empty_lexical_var_list ',' lexical_var",
        "lexical_var : optional_ref T_VARIABLE",
        "function_call : name argument_list",
        "function_call : callable_expr argument_list",
        "function_call : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM member_name argument_list",
        "class_name : T_STATIC",
        "class_name : name",
        "name : namespace_name_parts",
        "name : T_NS_SEPARATOR namespace_name_parts",
        "name : T_NAMESPACE T_NS_SEPARATOR namespace_name_parts",
        "class_name_reference : class_name",
        "class_name_reference : new_variable",
        "class_name_reference : error",
        "class_name_or_var : class_name",
        "class_name_or_var : dereferencable",
        "exit_expr : /* empty */",
        "exit_expr : '(' optional_expr ')'",
        "backticks_expr : /* empty */",
        "backticks_expr : T_ENCAPSED_AND_WHITESPACE",
        "backticks_expr : encaps_list",
        "ctor_arguments : /* empty */",
        "ctor_arguments : argument_list",
        "constant : name",
        "constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM identifier",
        "constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM error",
        "array_short_syntax : '[' array_pair_list ']'",
        "dereferencable_scalar : T_ARRAY '(' array_pair_list ')'",
        "dereferencable_scalar : array_short_syntax",
        "dereferencable_scalar : T_CONSTANT_ENCAPSED_STRING",
        "scalar : T_LNUMBER",
        "scalar : T_DNUMBER",
        "scalar : T_LINE",
        "scalar : T_FILE",
        "scalar : T_DIR",
        "scalar : T_CLASS_C",
        "scalar : T_TRAIT_C",
        "scalar : T_METHOD_C",
        "scalar : T_FUNC_C",
        "scalar : T_NS_C",
        "scalar : dereferencable_scalar",
        "scalar : constant",
        "scalar : T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC",
        "scalar : T_START_HEREDOC T_END_HEREDOC",
        "scalar : '"' encaps_list '"'",
        "scalar : T_START_HEREDOC encaps_list T_END_HEREDOC",
        "optional_expr : /* empty */",
        "optional_expr : expr",
        "dereferencable : variable",
        "dereferencable : '(' expr ')'",
        "dereferencable : dereferencable_scalar",
        "callable_expr : callable_variable",
        "callable_expr : '(' expr ')'",
        "callable_expr : dereferencable_scalar",
        "callable_variable : simple_variable",
        "callable_variable : dereferencable '[' optional_expr ']'",
        "callable_variable : constant '[' optional_expr ']'",
        "callable_variable : dereferencable '{' expr '}'",
        "callable_variable : function_call",
        "callable_variable : dereferencable T_OBJECT_OPERATOR property_name argument_list",
        "variable : callable_variable",
        "variable : static_member",
        "variable : dereferencable T_OBJECT_OPERATOR property_name",
        "simple_variable : T_VARIABLE",
        "simple_variable : '$' '{' expr '}'",
        "simple_variable : '$' simple_variable",
        "simple_variable : '$' error",
        "static_member : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM simple_variable",
        "new_variable : simple_variable",
        "new_variable : new_variable '[' optional_expr ']'",
        "new_variable : new_variable '{' expr '}'",
        "new_variable : new_variable T_OBJECT_OPERATOR property_name",
        "new_variable : class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable",
        "new_variable : new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable",
        "member_name : identifier",
        "member_name : '{' expr '}'",
        "member_name : simple_variable",
        "property_name : T_STRING",
        "property_name : '{' expr '}'",
        "property_name : simple_variable",
        "property_name : error",
        "list_expr : T_LIST '(' list_expr_elements ')'",
        "list_expr_elements : list_expr_elements ',' list_expr_element",
        "list_expr_elements : list_expr_element",
        "list_expr_element : variable",
        "list_expr_element : list_expr",
        "list_expr_element : expr T_DOUBLE_ARROW variable",
        "list_expr_element : expr T_DOUBLE_ARROW list_expr",
        "list_expr_element : /* empty */",
        "array_pair_list : inner_array_pair_list",
        "inner_array_pair_list : inner_array_pair_list ',' array_pair",
        "inner_array_pair_list : array_pair",
        "array_pair : expr T_DOUBLE_ARROW expr",
        "array_pair : expr",
        "array_pair : expr T_DOUBLE_ARROW '&' variable",
        "array_pair : '&' variable",
        "array_pair : /* empty */",
        "encaps_list : encaps_list encaps_var",
        "encaps_list : encaps_list encaps_string_part",
        "encaps_list : encaps_var",
        "encaps_list : encaps_string_part encaps_var",
        "encaps_string_part : T_ENCAPSED_AND_WHITESPACE",
        "encaps_base_var : T_VARIABLE",
        "encaps_var : encaps_base_var",
        "encaps_var : encaps_base_var '[' encaps_var_offset ']'",
        "encaps_var : encaps_base_var T_OBJECT_OPERATOR T_STRING",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES expr '}'",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'",
        "encaps_var : T_CURLY_OPEN variable '}'",
        "encaps_var_offset : T_STRING",
        "encaps_var_offset : T_NUM_STRING",
        "encaps_var_offset : '-' T_NUM_STRING",
        "encaps_var_offset : T_VARIABLE"
    );

    protected function initReduceCallbacks() {
        $this->reduceCallbacks = [
            0 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            1 => function ($stackPos) {
                 $this->semValue = $this->handleNamespaces($stackPos-(1-1)); 
            },
            2 => function ($stackPos) {
                 pushNormalizing($stackPos-(2-1), $stackPos-(2-2)); 
            },
            3 => function ($stackPos) {
                 init(); 
            },
            4 => function ($stackPos) {
                 makeNop($nop, $this->lookaheadStartAttributes);
            if ($nop !== null) { $stackPos-(1-1)[] = $nop; } $this->semValue = $stackPos-(1-1); 
            },
            5 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            6 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            7 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            8 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            9 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            10 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            11 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            12 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            13 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            14 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            15 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            16 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            17 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            18 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            19 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            20 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            21 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            22 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            23 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            24 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            25 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            26 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            27 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            28 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            29 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            30 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            31 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            32 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            33 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            34 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            35 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            36 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            37 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            38 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            39 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            40 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            41 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            42 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            43 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            44 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            45 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            46 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            47 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            48 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            49 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            50 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            51 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            52 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            53 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            54 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            55 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            56 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            57 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            58 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            59 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            60 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            61 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            62 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            63 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            64 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            65 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            66 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            67 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            68 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            69 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            70 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            71 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            72 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            73 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            74 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            75 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            76 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            77 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            78 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            79 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            80 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            81 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            82 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            83 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            84 => function ($stackPos) {
                 $this->semValue = Name[$stackPos-(1-1)]; 
            },
            85 => function ($stackPos) {
                 /* nothing */ 
            },
            86 => function ($stackPos) {
                 /* nothing */ 
            },
            87 => function ($stackPos) {
                 /* nothing */ 
            },
            88 => function ($stackPos) {
                 $this->emitError(new Error('A trailing comma is not allowed here', attributes())); 
            },
            89 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            90 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            91 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            92 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            93 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            94 => function ($stackPos) {
                 $this->semValue = Stmt\HaltCompiler[$this->lexer->handleHaltCompiler()]; 
            },
            95 => function ($stackPos) {
                 $this->semValue = Stmt\Namespace_[$stackPos-(3-2), null]; $this->checkNamespace($this->semValue); 
            },
            96 => function ($stackPos) {
                 $this->semValue = Stmt\Namespace_[$stackPos-(5-2), $stackPos-(5-4)]; $this->checkNamespace($this->semValue); 
            },
            97 => function ($stackPos) {
                 $this->semValue = Stmt\Namespace_[null, $stackPos-(4-3)]; $this->checkNamespace($this->semValue); 
            },
            98 => function ($stackPos) {
                 $this->semValue = Stmt\Use_[$stackPos-(3-2), Stmt\Use_::TYPE_NORMAL]; 
            },
            99 => function ($stackPos) {
                 $this->semValue = Stmt\Use_[$stackPos-(4-3), $stackPos-(4-2)]; 
            },
            100 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            101 => function ($stackPos) {
                 $this->semValue = Stmt\Const_[$stackPos-(3-2)]; 
            },
            102 => function ($stackPos) {
                 $this->semValue = Stmt\Use_::TYPE_FUNCTION; 
            },
            103 => function ($stackPos) {
                 $this->semValue = Stmt\Use_::TYPE_CONSTANT; 
            },
            104 => function ($stackPos) {
                 $this->semValue = Stmt\GroupUse[new Name($stackPos-(7-3), stackAttributes(#3)), $stackPos-(7-6), $stackPos-(7-2)]; 
            },
            105 => function ($stackPos) {
                 $this->semValue = Stmt\GroupUse[new Name($stackPos-(8-4), stackAttributes(#4)), $stackPos-(8-7), $stackPos-(8-2)]; 
            },
            106 => function ($stackPos) {
                 $this->semValue = Stmt\GroupUse[new Name($stackPos-(6-2), stackAttributes(#2)), $stackPos-(6-5), Stmt\Use_::TYPE_UNKNOWN]; 
            },
            107 => function ($stackPos) {
                 $this->semValue = Stmt\GroupUse[new Name($stackPos-(7-3), stackAttributes(#3)), $stackPos-(7-6), Stmt\Use_::TYPE_UNKNOWN]; 
            },
            108 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            109 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            110 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            111 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            112 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            113 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            114 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            115 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            116 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            117 => function ($stackPos) {
                 $this->semValue = Stmt\UseUse[$stackPos-(1-1), null, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($this->semValue, #1); 
            },
            118 => function ($stackPos) {
                 $this->semValue = Stmt\UseUse[$stackPos-(3-1), $stackPos-(3-3), Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($this->semValue, #3); 
            },
            119 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            120 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-2); 
            },
            121 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); $this->semValue->type = Stmt\Use_::TYPE_NORMAL; 
            },
            122 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-2); $this->semValue->type = $stackPos-(2-1); 
            },
            123 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            124 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            125 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            126 => function ($stackPos) {
                 $this->semValue = Node\Const_[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            127 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            128 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            129 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            130 => function ($stackPos) {
                 $this->semValue = Node\Const_[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            131 => function ($stackPos) {
                 pushNormalizing($stackPos-(2-1), $stackPos-(2-2)); 
            },
            132 => function ($stackPos) {
                 init(); 
            },
            133 => function ($stackPos) {
                 makeNop($nop, $this->lookaheadStartAttributes);
            if ($nop !== null) { $stackPos-(1-1)[] = $nop; } $this->semValue = $stackPos-(1-1); 
            },
            134 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            135 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            136 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            137 => function ($stackPos) {
                 throw new Error('__HALT_COMPILER() can only be used from the outermost scope', attributes()); 
            },
            138 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); prependLeadingComments($this->semValue); 
            },
            139 => function ($stackPos) {
                 $this->semValue = Stmt\If_[$stackPos-(7-3), ['stmts' => toArray($stackPos-(7-5)), 'elseifs' => $stackPos-(7-6), 'else' => $stackPos-(7-7)]]; 
            },
            140 => function ($stackPos) {
                 $this->semValue = Stmt\If_[$stackPos-(10-3), ['stmts' => $stackPos-(10-6), 'elseifs' => $stackPos-(10-7), 'else' => $stackPos-(10-8)]]; 
            },
            141 => function ($stackPos) {
                 $this->semValue = Stmt\While_[$stackPos-(5-3), $stackPos-(5-5)]; 
            },
            142 => function ($stackPos) {
                 $this->semValue = Stmt\Do_   [$stackPos-(7-5), toArray($stackPos-(7-2))]; 
            },
            143 => function ($stackPos) {
                 $this->semValue = Stmt\For_[['init' => $stackPos-(9-3), 'cond' => $stackPos-(9-5), 'loop' => $stackPos-(9-7), 'stmts' => $stackPos-(9-9)]]; 
            },
            144 => function ($stackPos) {
                 $this->semValue = Stmt\Switch_[$stackPos-(5-3), $stackPos-(5-5)]; 
            },
            145 => function ($stackPos) {
                 $this->semValue = Stmt\Break_[$stackPos-(3-2)]; 
            },
            146 => function ($stackPos) {
                 $this->semValue = Stmt\Continue_[$stackPos-(3-2)]; 
            },
            147 => function ($stackPos) {
                 $this->semValue = Stmt\Return_[$stackPos-(3-2)]; 
            },
            148 => function ($stackPos) {
                 $this->semValue = Stmt\Global_[$stackPos-(3-2)]; 
            },
            149 => function ($stackPos) {
                 $this->semValue = Stmt\Static_[$stackPos-(3-2)]; 
            },
            150 => function ($stackPos) {
                 $this->semValue = Stmt\Echo_[$stackPos-(3-2)]; 
            },
            151 => function ($stackPos) {
                 $this->semValue = Stmt\InlineHTML[$stackPos-(1-1)]; 
            },
            152 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            153 => function ($stackPos) {
                 $this->semValue = Stmt\Unset_[$stackPos-(5-3)]; 
            },
            154 => function ($stackPos) {
                 $this->semValue = Stmt\Foreach_[$stackPos-(7-3), $stackPos-(7-5)[0], ['keyVar' => null, 'byRef' => $stackPos-(7-5)[1], 'stmts' => $stackPos-(7-7)]]; 
            },
            155 => function ($stackPos) {
                 $this->semValue = Stmt\Foreach_[$stackPos-(9-3), $stackPos-(9-7)[0], ['keyVar' => $stackPos-(9-5), 'byRef' => $stackPos-(9-7)[1], 'stmts' => $stackPos-(9-9)]]; 
            },
            156 => function ($stackPos) {
                 $this->semValue = Stmt\Declare_[$stackPos-(5-3), $stackPos-(5-5)]; 
            },
            157 => function ($stackPos) {
                 $this->semValue = Stmt\TryCatch[$stackPos-(6-3), $stackPos-(6-5), $stackPos-(6-6)]; $this->checkTryCatch($this->semValue); 
            },
            158 => function ($stackPos) {
                 $this->semValue = Stmt\Throw_[$stackPos-(3-2)]; 
            },
            159 => function ($stackPos) {
                 $this->semValue = Stmt\Goto_[$stackPos-(3-2)]; 
            },
            160 => function ($stackPos) {
                 $this->semValue = Stmt\Label[$stackPos-(2-1)]; 
            },
            161 => function ($stackPos) {
                 $this->semValue = array(); /* means: no statement */ 
            },
            162 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            163 => function ($stackPos) {
                 makeNop($this->semValue, $this->startAttributeStack[#1]);
            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */ 
            },
            164 => function ($stackPos) {
                 init(); 
            },
            165 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            166 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            167 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            168 => function ($stackPos) {
                 $this->semValue = Stmt\Catch_[$stackPos-(8-3), parseVar($stackPos-(8-4)), $stackPos-(8-7)]; 
            },
            169 => function ($stackPos) {
                 $this->semValue = null; 
            },
            170 => function ($stackPos) {
                 $this->semValue = Stmt\Finally_[$stackPos-(4-3)]; 
            },
            171 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            172 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            173 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            174 => function ($stackPos) {
                 $this->semValue = false; 
            },
            175 => function ($stackPos) {
                 $this->semValue = true; 
            },
            176 => function ($stackPos) {
                 $this->semValue = false; 
            },
            177 => function ($stackPos) {
                 $this->semValue = true; 
            },
            178 => function ($stackPos) {
                 $this->semValue = Stmt\Function_[$stackPos-(10-3), ['byRef' => $stackPos-(10-2), 'params' => $stackPos-(10-5), 'returnType' => $stackPos-(10-7), 'stmts' => $stackPos-(10-9)]]; 
            },
            179 => function ($stackPos) {
                 $this->semValue = Stmt\Class_[$stackPos-(7-2), ['type' => $stackPos-(7-1), 'extends' => $stackPos-(7-3), 'implements' => $stackPos-(7-4), 'stmts' => $stackPos-(7-6)]];
            $this->checkClass($this->semValue, #2); 
            },
            180 => function ($stackPos) {
                 $this->semValue = Stmt\Interface_[$stackPos-(6-2), ['extends' => $stackPos-(6-3), 'stmts' => $stackPos-(6-5)]];
            $this->checkInterface($this->semValue, #2); 
            },
            181 => function ($stackPos) {
                 $this->semValue = Stmt\Trait_[$stackPos-(5-2), ['stmts' => $stackPos-(5-4)]]; 
            },
            182 => function ($stackPos) {
                 $this->semValue = 0; 
            },
            183 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT; 
            },
            184 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_FINAL; 
            },
            185 => function ($stackPos) {
                 $this->semValue = null; 
            },
            186 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-2); 
            },
            187 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            188 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-2); 
            },
            189 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            190 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-2); 
            },
            191 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            192 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            193 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            194 => function ($stackPos) {
                 $this->semValue = toArray($stackPos-(1-1)); 
            },
            195 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-2); 
            },
            196 => function ($stackPos) {
                 $this->semValue = toArray($stackPos-(1-1)); 
            },
            197 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-2); 
            },
            198 => function ($stackPos) {
                 $this->semValue = toArray($stackPos-(1-1)); 
            },
            199 => function ($stackPos) {
                 $this->semValue = null; 
            },
            200 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-2); 
            },
            201 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            202 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            203 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            204 => function ($stackPos) {
                 $this->semValue = Stmt\DeclareDeclare[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            205 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            206 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-3); 
            },
            207 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-2); 
            },
            208 => function ($stackPos) {
                 $this->semValue = $stackPos-(5-3); 
            },
            209 => function ($stackPos) {
                 init(); 
            },
            210 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            211 => function ($stackPos) {
                 $this->semValue = Stmt\Case_[$stackPos-(4-2), $stackPos-(4-4)]; 
            },
            212 => function ($stackPos) {
                 $this->semValue = Stmt\Case_[null, $stackPos-(3-3)]; 
            },
            213 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            214 => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            215 => function ($stackPos) {
                 $this->semValue = toArray($stackPos-(1-1)); 
            },
            216 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-2); 
            },
            217 => function ($stackPos) {
                 init(); 
            },
            218 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            219 => function ($stackPos) {
                 $this->semValue = Stmt\ElseIf_[$stackPos-(5-3), toArray($stackPos-(5-5))]; 
            },
            220 => function ($stackPos) {
                 init(); 
            },
            221 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            222 => function ($stackPos) {
                 $this->semValue = Stmt\ElseIf_[$stackPos-(6-3), $stackPos-(6-6)]; 
            },
            223 => function ($stackPos) {
                 $this->semValue = null; 
            },
            224 => function ($stackPos) {
                 $this->semValue = Stmt\Else_[toArray($stackPos-(2-2))]; 
            },
            225 => function ($stackPos) {
                 $this->semValue = null; 
            },
            226 => function ($stackPos) {
                 $this->semValue = Stmt\Else_[$stackPos-(3-3)]; 
            },
            227 => function ($stackPos) {
                 $this->semValue = array($stackPos-(1-1), false); 
            },
            228 => function ($stackPos) {
                 $this->semValue = array($stackPos-(2-2), true); 
            },
            229 => function ($stackPos) {
                 $this->semValue = array($stackPos-(1-1), false); 
            },
            230 => function ($stackPos) {
                 $this->semValue = array($stackPos-(1-1), false); 
            },
            231 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            232 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            233 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            234 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            235 => function ($stackPos) {
                 $this->semValue = Node\Param[parseVar($stackPos-(4-4)), null, $stackPos-(4-1), $stackPos-(4-2), $stackPos-(4-3)]; $this->checkParam($this->semValue); 
            },
            236 => function ($stackPos) {
                 $this->semValue = Node\Param[parseVar($stackPos-(6-4)), $stackPos-(6-6), $stackPos-(6-1), $stackPos-(6-2), $stackPos-(6-3)]; $this->checkParam($this->semValue); 
            },
            237 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            238 => function ($stackPos) {
                 $this->semValue = Node\NullableType[$stackPos-(2-2)]; 
            },
            239 => function ($stackPos) {
                 $this->semValue = $this->handleBuiltinTypes($stackPos-(1-1)); 
            },
            240 => function ($stackPos) {
                 $this->semValue = 'array'; 
            },
            241 => function ($stackPos) {
                 $this->semValue = 'callable'; 
            },
            242 => function ($stackPos) {
                 $this->semValue = null; 
            },
            243 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            244 => function ($stackPos) {
                 $this->semValue = null; 
            },
            245 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-2); 
            },
            246 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            247 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-2); 
            },
            248 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            249 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            250 => function ($stackPos) {
                 $this->semValue = Node\Arg[$stackPos-(1-1), false, false]; 
            },
            251 => function ($stackPos) {
                 $this->semValue = Node\Arg[$stackPos-(2-2), true, false]; 
            },
            252 => function ($stackPos) {
                 $this->semValue = Node\Arg[$stackPos-(2-2), false, true]; 
            },
            253 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            254 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            255 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            256 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(1-1)]; 
            },
            257 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            258 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            259 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            260 => function ($stackPos) {
                 $this->semValue = Stmt\StaticVar[parseVar($stackPos-(1-1)), null]; 
            },
            261 => function ($stackPos) {
                 $this->semValue = Stmt\StaticVar[parseVar($stackPos-(3-1)), $stackPos-(3-3)]; 
            },
            262 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            263 => function ($stackPos) {
                 init(); 
            },
            264 => function ($stackPos) {
                 $this->semValue = Stmt\Property[$stackPos-(3-1), $stackPos-(3-2)]; $this->checkProperty($this->semValue, #1); 
            },
            265 => function ($stackPos) {
                 $this->semValue = Stmt\ClassConst[$stackPos-(4-3), $stackPos-(4-1)]; $this->checkClassConst($this->semValue, #1); 
            },
            266 => function ($stackPos) {
                 $this->semValue = Stmt\ClassMethod[$stackPos-(9-4), ['type' => $stackPos-(9-1), 'byRef' => $stackPos-(9-3), 'params' => $stackPos-(9-6), 'returnType' => $stackPos-(9-8), 'stmts' => $stackPos-(9-9)]];
            $this->checkClassMethod($this->semValue, #1); 
            },
            267 => function ($stackPos) {
                 $this->semValue = Stmt\TraitUse[$stackPos-(3-2), $stackPos-(3-3)]; 
            },
            268 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            269 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            270 => function ($stackPos) {
                 init(); 
            },
            271 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            272 => function ($stackPos) {
                 $this->semValue = Stmt\TraitUseAdaptation\Precedence[$stackPos-(4-1)[0], $stackPos-(4-1)[1], $stackPos-(4-3)]; 
            },
            273 => function ($stackPos) {
                 $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(5-1)[0], $stackPos-(5-1)[1], $stackPos-(5-3), $stackPos-(5-4)]; 
            },
            274 => function ($stackPos) {
                 $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(4-1)[0], $stackPos-(4-1)[1], $stackPos-(4-3), null]; 
            },
            275 => function ($stackPos) {
                 $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(4-1)[0], $stackPos-(4-1)[1], null, $stackPos-(4-3)]; 
            },
            276 => function ($stackPos) {
                 $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(4-1)[0], $stackPos-(4-1)[1], null, $stackPos-(4-3)]; 
            },
            277 => function ($stackPos) {
                 $this->semValue = array($stackPos-(3-1), $stackPos-(3-3)); 
            },
            278 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            279 => function ($stackPos) {
                 $this->semValue = array(null, $stackPos-(1-1)); 
            },
            280 => function ($stackPos) {
                 $this->semValue = null; 
            },
            281 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            282 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            283 => function ($stackPos) {
                 $this->semValue = 0; 
            },
            284 => function ($stackPos) {
                 $this->semValue = 0; 
            },
            285 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            286 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            287 => function ($stackPos) {
                 $this->checkModifier($stackPos-(2-1), $stackPos-(2-2), #2); $this->semValue = $stackPos-(2-1) | $stackPos-(2-2); 
            },
            288 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PUBLIC; 
            },
            289 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PROTECTED; 
            },
            290 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_PRIVATE; 
            },
            291 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_STATIC; 
            },
            292 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT; 
            },
            293 => function ($stackPos) {
                 $this->semValue = Stmt\Class_::MODIFIER_FINAL; 
            },
            294 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            295 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            296 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            297 => function ($stackPos) {
                 $this->semValue = Stmt\PropertyProperty[parseVar($stackPos-(1-1)), null]; 
            },
            298 => function ($stackPos) {
                 $this->semValue = Stmt\PropertyProperty[parseVar($stackPos-(3-1)), $stackPos-(3-3)]; 
            },
            299 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            300 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            301 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            302 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            303 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            304 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            305 => function ($stackPos) {
                 $this->semValue = Expr\Assign[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            306 => function ($stackPos) {
                 $this->semValue = Expr\Assign[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            307 => function ($stackPos) {
                 $this->semValue = Expr\Assign[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            308 => function ($stackPos) {
                 $this->semValue = Expr\AssignRef[$stackPos-(4-1), $stackPos-(4-4)]; 
            },
            309 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            310 => function ($stackPos) {
                 $this->semValue = Expr\Clone_[$stackPos-(2-2)]; 
            },
            311 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Plus      [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            312 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Minus     [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            313 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Mul       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            314 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Div       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            315 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Concat    [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            316 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Mod       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            317 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\BitwiseAnd[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            318 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\BitwiseOr [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            319 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\BitwiseXor[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            320 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\ShiftLeft [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            321 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\ShiftRight[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            322 => function ($stackPos) {
                 $this->semValue = Expr\AssignOp\Pow       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            323 => function ($stackPos) {
                 $this->semValue = Expr\PostInc[$stackPos-(2-1)]; 
            },
            324 => function ($stackPos) {
                 $this->semValue = Expr\PreInc [$stackPos-(2-2)]; 
            },
            325 => function ($stackPos) {
                 $this->semValue = Expr\PostDec[$stackPos-(2-1)]; 
            },
            326 => function ($stackPos) {
                 $this->semValue = Expr\PreDec [$stackPos-(2-2)]; 
            },
            327 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\BooleanOr [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            328 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\BooleanAnd[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            329 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\LogicalOr [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            330 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\LogicalAnd[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            331 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\LogicalXor[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            332 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\BitwiseOr [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            333 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\BitwiseAnd[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            334 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\BitwiseXor[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            335 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Concat    [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            336 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Plus      [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            337 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Minus     [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            338 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Mul       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            339 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Div       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            340 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Mod       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            341 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\ShiftLeft [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            342 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\ShiftRight[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            343 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Pow       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            344 => function ($stackPos) {
                 $this->semValue = Expr\UnaryPlus [$stackPos-(2-2)]; 
            },
            345 => function ($stackPos) {
                 $this->semValue = Expr\UnaryMinus[$stackPos-(2-2)]; 
            },
            346 => function ($stackPos) {
                 $this->semValue = Expr\BooleanNot[$stackPos-(2-2)]; 
            },
            347 => function ($stackPos) {
                 $this->semValue = Expr\BitwiseNot[$stackPos-(2-2)]; 
            },
            348 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Identical     [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            349 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\NotIdentical  [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            350 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Equal         [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            351 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\NotEqual      [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            352 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Spaceship     [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            353 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Smaller       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            354 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\SmallerOrEqual[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            355 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Greater       [$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            356 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\GreaterOrEqual[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            357 => function ($stackPos) {
                 $this->semValue = Expr\Instanceof_[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            358 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            359 => function ($stackPos) {
                 $this->semValue = Expr\Ternary[$stackPos-(5-1), $stackPos-(5-3),   $stackPos-(5-5)]; 
            },
            360 => function ($stackPos) {
                 $this->semValue = Expr\Ternary[$stackPos-(4-1), null, $stackPos-(4-4)]; 
            },
            361 => function ($stackPos) {
                 $this->semValue = Expr\BinaryOp\Coalesce[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            362 => function ($stackPos) {
                 $this->semValue = Expr\Isset_[$stackPos-(4-3)]; 
            },
            363 => function ($stackPos) {
                 $this->semValue = Expr\Empty_[$stackPos-(4-3)]; 
            },
            364 => function ($stackPos) {
                 $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_INCLUDE]; 
            },
            365 => function ($stackPos) {
                 $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_INCLUDE_ONCE]; 
            },
            366 => function ($stackPos) {
                 $this->semValue = Expr\Eval_[$stackPos-(4-3)]; 
            },
            367 => function ($stackPos) {
                 $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_REQUIRE]; 
            },
            368 => function ($stackPos) {
                 $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_REQUIRE_ONCE]; 
            },
            369 => function ($stackPos) {
                 $this->semValue = Expr\Cast\Int_    [$stackPos-(2-2)]; 
            },
            370 => function ($stackPos) {
                 $this->semValue = Expr\Cast\Double  [$stackPos-(2-2)]; 
            },
            371 => function ($stackPos) {
                 $this->semValue = Expr\Cast\String_ [$stackPos-(2-2)]; 
            },
            372 => function ($stackPos) {
                 $this->semValue = Expr\Cast\Array_  [$stackPos-(2-2)]; 
            },
            373 => function ($stackPos) {
                 $this->semValue = Expr\Cast\Object_ [$stackPos-(2-2)]; 
            },
            374 => function ($stackPos) {
                 $this->semValue = Expr\Cast\Bool_   [$stackPos-(2-2)]; 
            },
            375 => function ($stackPos) {
                 $this->semValue = Expr\Cast\Unset_  [$stackPos-(2-2)]; 
            },
            376 => function ($stackPos) {
                 $attrs = attributes();
            $attrs['kind'] = strtolower($stackPos-(2-1)) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
            $this->semValue = new Expr\Exit_($stackPos-(2-2), $attrs); 
            },
            377 => function ($stackPos) {
                 $this->semValue = Expr\ErrorSuppress[$stackPos-(2-2)]; 
            },
            378 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            379 => function ($stackPos) {
                 $this->semValue = Expr\ShellExec[$stackPos-(3-2)]; 
            },
            380 => function ($stackPos) {
                 $this->semValue = Expr\Print_[$stackPos-(2-2)]; 
            },
            381 => function ($stackPos) {
                 $this->semValue = Expr\Yield_[null, null]; 
            },
            382 => function ($stackPos) {
                 $this->semValue = Expr\Yield_[$stackPos-(2-2), null]; 
            },
            383 => function ($stackPos) {
                 $this->semValue = Expr\Yield_[$stackPos-(4-4), $stackPos-(4-2)]; 
            },
            384 => function ($stackPos) {
                 $this->semValue = Expr\YieldFrom[$stackPos-(2-2)]; 
            },
            385 => function ($stackPos) {
                 $this->semValue = Expr\Closure[['static' => false, 'byRef' => $stackPos-(10-2), 'params' => $stackPos-(10-4), 'uses' => $stackPos-(10-6), 'returnType' => $stackPos-(10-7), 'stmts' => $stackPos-(10-9)]]; 
            },
            386 => function ($stackPos) {
                 $this->semValue = Expr\Closure[['static' => true, 'byRef' => $stackPos-(11-3), 'params' => $stackPos-(11-5), 'uses' => $stackPos-(11-7), 'returnType' => $stackPos-(11-8), 'stmts' => $stackPos-(11-10)]]; 
            },
            387 => function ($stackPos) {
                 $this->semValue = array(Stmt\Class_[null, ['type' => 0, 'extends' => $stackPos-(7-3), 'implements' => $stackPos-(7-4), 'stmts' => $stackPos-(7-6)]], $stackPos-(7-2));
            $this->checkClass($this->semValue[0], -1); 
            },
            388 => function ($stackPos) {
                 $this->semValue = Expr\New_[$stackPos-(3-2), $stackPos-(3-3)]; 
            },
            389 => function ($stackPos) {
                 list($class, $ctorArgs) = $stackPos-(2-2); $this->semValue = Expr\New_[$class, $ctorArgs]; 
            },
            390 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            391 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-3); 
            },
            392 => function ($stackPos) {
                 $this->semValue = $stackPos-(2-1); 
            },
            393 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            394 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            395 => function ($stackPos) {
                 $this->semValue = Expr\ClosureUse[parseVar($stackPos-(2-2)), $stackPos-(2-1)]; 
            },
            396 => function ($stackPos) {
                 $this->semValue = Expr\FuncCall[$stackPos-(2-1), $stackPos-(2-2)]; 
            },
            397 => function ($stackPos) {
                 $this->semValue = Expr\FuncCall[$stackPos-(2-1), $stackPos-(2-2)]; 
            },
            398 => function ($stackPos) {
                 $this->semValue = Expr\StaticCall[$stackPos-(4-1), $stackPos-(4-3), $stackPos-(4-4)]; 
            },
            399 => function ($stackPos) {
                 $this->semValue = Name[$stackPos-(1-1)]; 
            },
            400 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            401 => function ($stackPos) {
                 $this->semValue = Name[$stackPos-(1-1)]; 
            },
            402 => function ($stackPos) {
                 $this->semValue = Name\FullyQualified[$stackPos-(2-2)]; 
            },
            403 => function ($stackPos) {
                 $this->semValue = Name\Relative[$stackPos-(3-3)]; 
            },
            404 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            405 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            406 => function ($stackPos) {
                 $this->semValue = Expr\Error[]; $this->errorState = 2; 
            },
            407 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            408 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            409 => function ($stackPos) {
                 $this->semValue = null; 
            },
            410 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            411 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            412 => function ($stackPos) {
                 $this->semValue = array(Scalar\EncapsedStringPart[Scalar\String_::parseEscapeSequences($stackPos-(1-1), '`')]); 
            },
            413 => function ($stackPos) {
                 parseEncapsed($stackPos-(1-1), '`', true); $this->semValue = $stackPos-(1-1); 
            },
            414 => function ($stackPos) {
                 $this->semValue = array(); 
            },
            415 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            416 => function ($stackPos) {
                 $this->semValue = Expr\ConstFetch[$stackPos-(1-1)]; 
            },
            417 => function ($stackPos) {
                 $this->semValue = Expr\ClassConstFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            418 => function ($stackPos) {
                 $this->semValue = Expr\ClassConstFetch[$stackPos-(3-1), new Expr\Error(stackAttributes(#3))]; $this->errorState = 2; 
            },
            419 => function ($stackPos) {
                 $attrs = attributes(); $attrs['kind'] = Expr\Array_::KIND_SHORT;
            $this->semValue = new Expr\Array_($stackPos-(3-2), $attrs); 
            },
            420 => function ($stackPos) {
                 $attrs = attributes(); $attrs['kind'] = Expr\Array_::KIND_LONG;
            $this->semValue = new Expr\Array_($stackPos-(4-3), $attrs); 
            },
            421 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            422 => function ($stackPos) {
                 $attrs = attributes(); $attrs['kind'] = strKind($stackPos-(1-1));
            $this->semValue = new Scalar\String_(Scalar\String_::parse($stackPos-(1-1)), $attrs); 
            },
            423 => function ($stackPos) {
                 $this->semValue = $this->parseLNumber($stackPos-(1-1), attributes()); 
            },
            424 => function ($stackPos) {
                 $this->semValue = Scalar\DNumber[Scalar\DNumber::parse($stackPos-(1-1))]; 
            },
            425 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Line[]; 
            },
            426 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\File[]; 
            },
            427 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Dir[]; 
            },
            428 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Class_[]; 
            },
            429 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Trait_[]; 
            },
            430 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Method[]; 
            },
            431 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Function_[]; 
            },
            432 => function ($stackPos) {
                 $this->semValue = Scalar\MagicConst\Namespace_[]; 
            },
            433 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            434 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            435 => function ($stackPos) {
                 $attrs = attributes(); setDocStringAttrs($attrs, $stackPos-(3-1));
            $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($stackPos-(3-1), $stackPos-(3-2)), $attrs); 
            },
            436 => function ($stackPos) {
                 $attrs = attributes(); setDocStringAttrs($attrs, $stackPos-(2-1));
            $this->semValue = new Scalar\String_('', $attrs); 
            },
            437 => function ($stackPos) {
                 $attrs = attributes(); $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
            parseEncapsed($stackPos-(3-2), '"', true); $this->semValue = new Scalar\Encapsed($stackPos-(3-2), $attrs); 
            },
            438 => function ($stackPos) {
                 $attrs = attributes(); setDocStringAttrs($attrs, $stackPos-(3-1));
            parseEncapsedDoc($stackPos-(3-2), true); $this->semValue = new Scalar\Encapsed($stackPos-(3-2), $attrs); 
            },
            439 => function ($stackPos) {
                 $this->semValue = null; 
            },
            440 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            441 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            442 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            443 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            444 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            445 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            446 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            447 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(1-1)]; 
            },
            448 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)]; 
            },
            449 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)]; 
            },
            450 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)]; 
            },
            451 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            452 => function ($stackPos) {
                 $this->semValue = Expr\MethodCall[$stackPos-(4-1), $stackPos-(4-3), $stackPos-(4-4)]; 
            },
            453 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            454 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            455 => function ($stackPos) {
                 $this->semValue = Expr\PropertyFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            456 => function ($stackPos) {
                 $this->semValue = parseVar($stackPos-(1-1)); 
            },
            457 => function ($stackPos) {
                 $this->semValue = $stackPos-(4-3); 
            },
            458 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(2-2)]; 
            },
            459 => function ($stackPos) {
                 $this->semValue = Expr\Error[]; $this->errorState = 2; 
            },
            460 => function ($stackPos) {
                 $this->semValue = Expr\StaticPropertyFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            461 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(1-1)]; 
            },
            462 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)]; 
            },
            463 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)]; 
            },
            464 => function ($stackPos) {
                 $this->semValue = Expr\PropertyFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            465 => function ($stackPos) {
                 $this->semValue = Expr\StaticPropertyFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            466 => function ($stackPos) {
                 $this->semValue = Expr\StaticPropertyFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            467 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            468 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            469 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(1-1)]; 
            },
            470 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            471 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            472 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(1-1)]; 
            },
            473 => function ($stackPos) {
                 $this->semValue = Expr\Error[]; $this->errorState = 2; 
            },
            474 => function ($stackPos) {
                 $this->semValue = Expr\List_[$stackPos-(4-3)]; 
            },
            475 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            476 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            477 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(1-1), null, false]; 
            },
            478 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(1-1), null, false]; 
            },
            479 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(3-3), $stackPos-(3-1), false]; 
            },
            480 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(3-3), $stackPos-(3-1), false]; 
            },
            481 => function ($stackPos) {
                 $this->semValue = null; 
            },
            482 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); $end = count($this->semValue)-1; if ($this->semValue[$end] === null) unset($this->semValue[$end]); 
            },
            483 => function ($stackPos) {
                 push($stackPos-(3-1), $stackPos-(3-3)); 
            },
            484 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            485 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(3-3), $stackPos-(3-1),   false]; 
            },
            486 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(1-1), null, false]; 
            },
            487 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(4-4), $stackPos-(4-1),   true]; 
            },
            488 => function ($stackPos) {
                 $this->semValue = Expr\ArrayItem[$stackPos-(2-2), null, true]; 
            },
            489 => function ($stackPos) {
                 $this->semValue = null; 
            },
            490 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            491 => function ($stackPos) {
                 push($stackPos-(2-1), $stackPos-(2-2)); 
            },
            492 => function ($stackPos) {
                 init($stackPos-(1-1)); 
            },
            493 => function ($stackPos) {
                 init($stackPos-(2-1), $stackPos-(2-2)); 
            },
            494 => function ($stackPos) {
                 $this->semValue = Scalar\EncapsedStringPart[$stackPos-(1-1)]; 
            },
            495 => function ($stackPos) {
                 $this->semValue = Expr\Variable[parseVar($stackPos-(1-1))]; 
            },
            496 => function ($stackPos) {
                 $this->semValue = $stackPos-(1-1); 
            },
            497 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)]; 
            },
            498 => function ($stackPos) {
                 $this->semValue = Expr\PropertyFetch[$stackPos-(3-1), $stackPos-(3-3)]; 
            },
            499 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(3-2)]; 
            },
            500 => function ($stackPos) {
                 $this->semValue = Expr\Variable[$stackPos-(3-2)]; 
            },
            501 => function ($stackPos) {
                 $this->semValue = Expr\ArrayDimFetch[Expr\Variable[$stackPos-(6-2)], $stackPos-(6-4)]; 
            },
            502 => function ($stackPos) {
                 $this->semValue = $stackPos-(3-2); 
            },
            503 => function ($stackPos) {
                 $this->semValue = Scalar\String_[$stackPos-(1-1)]; 
            },
            504 => function ($stackPos) {
                 $this->semValue = $this->parseNumString($stackPos-(1-1), attributes()); 
            },
            505 => function ($stackPos) {
                 $this->semValue = $this->parseNumString('-' . $stackPos-(2-2), attributes()); 
            },
            506 => function ($stackPos) {
                 $this->semValue = Expr\Variable[parseVar($stackPos-(1-1))]; 
            },
        ];
    }
}
