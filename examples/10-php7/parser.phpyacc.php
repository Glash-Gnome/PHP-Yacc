<?php
declare(strict_types=1);
use PhpYacc\Lexer;
class Parser
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize      = 4064;
    protected $gotoTableSize        = 580;

    protected $invalidSymbol       = 165;
    protected $errorSymbol         = 1;
    protected $defaultAction       = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE = 0;
    protected $YYNLSTATES  = 840;
    protected $symbolToName = [
        '$EOF',
        'error',
        'T_INCLUDE',
        'T_INCLUDE_ONCE',
        'T_EVAL',
        'T_REQUIRE',
        'T_REQUIRE_ONCE',
        '\',\'',
        'T_LOGICAL_OR',
        'T_LOGICAL_XOR',
        'T_LOGICAL_AND',
        'T_PRINT',
        'T_YIELD',
        'T_DOUBLE_ARROW',
        'T_YIELD_FROM',
        '\'=\'',
        'T_PLUS_EQUAL',
        'T_MINUS_EQUAL',
        'T_MUL_EQUAL',
        'T_DIV_EQUAL',
        'T_CONCAT_EQUAL',
        'T_MOD_EQUAL',
        'T_AND_EQUAL',
        'T_OR_EQUAL',
        'T_XOR_EQUAL',
        'T_SL_EQUAL',
        'T_SR_EQUAL',
        'T_POW_EQUAL',
        '\'?\'',
        '\':\'',
        'T_COALESCE',
        'T_BOOLEAN_OR',
        'T_BOOLEAN_AND',
        '\'|\'',
        '\'^\'',
        '\'&\'',
        'T_IS_EQUAL',
        'T_IS_NOT_EQUAL',
        'T_IS_IDENTICAL',
        'T_IS_NOT_IDENTICAL',
        'T_SPACESHIP',
        '\'<\'',
        'T_IS_SMALLER_OR_EQUAL',
        '\'>\'',
        'T_IS_GREATER_OR_EQUAL',
        'T_SL',
        'T_SR',
        '\'+\'',
        '\'-\'',
        '\'.\'',
        '\'*\'',
        '\'/\'',
        '\'%\'',
        '\'!\'',
        'T_INSTANCEOF',
        '\'~\'',
        'T_INC',
        'T_DEC',
        'T_INT_CAST',
        'T_DOUBLE_CAST',
        'T_STRING_CAST',
        'T_ARRAY_CAST',
        'T_OBJECT_CAST',
        'T_BOOL_CAST',
        'T_UNSET_CAST',
        '\'@\'',
        'T_POW',
        '\'[\'',
        'T_NEW',
        'T_CLONE',
        'T_EXIT',
        'T_IF',
        'T_ELSEIF',
        'T_ELSE',
        'T_ENDIF',
        'T_LNUMBER',
        'T_DNUMBER',
        'T_STRING',
        'T_STRING_VARNAME',
        'T_VARIABLE',
        'T_NUM_STRING',
        'T_INLINE_HTML',
        'T_CHARACTER',
        'T_BAD_CHARACTER',
        'T_ENCAPSED_AND_WHITESPACE',
        'T_CONSTANT_ENCAPSED_STRING',
        'T_ECHO',
        'T_DO',
        'T_WHILE',
        'T_ENDWHILE',
        'T_FOR',
        'T_ENDFOR',
        'T_FOREACH',
        'T_ENDFOREACH',
        'T_DECLARE',
        'T_ENDDECLARE',
        'T_AS',
        'T_SWITCH',
        'T_ENDSWITCH',
        'T_CASE',
        'T_DEFAULT',
        'T_BREAK',
        'T_CONTINUE',
        'T_GOTO',
        'T_FUNCTION',
        'T_CONST',
        'T_RETURN',
        'T_TRY',
        'T_CATCH',
        'T_FINALLY',
        'T_THROW',
        'T_USE',
        'T_INSTEADOF',
        'T_GLOBAL',
        'T_STATIC',
        'T_ABSTRACT',
        'T_FINAL',
        'T_PRIVATE',
        'T_PROTECTED',
        'T_PUBLIC',
        'T_VAR',
        'T_UNSET',
        'T_ISSET',
        'T_EMPTY',
        'T_HALT_COMPILER',
        'T_CLASS',
        'T_TRAIT',
        'T_INTERFACE',
        'T_EXTENDS',
        'T_IMPLEMENTS',
        'T_OBJECT_OPERATOR',
        'T_LIST',
        'T_ARRAY',
        'T_CALLABLE',
        'T_CLASS_C',
        'T_TRAIT_C',
        'T_METHOD_C',
        'T_FUNC_C',
        'T_LINE',
        'T_FILE',
        'T_COMMENT',
        'T_DOC_COMMENT',
        'T_OPEN_TAG',
        'T_OPEN_TAG_WITH_ECHO',
        'T_CLOSE_TAG',
        'T_WHITESPACE',
        'T_START_HEREDOC',
        'T_END_HEREDOC',
        'T_DOLLAR_OPEN_CURLY_BRACES',
        'T_CURLY_OPEN',
        'T_PAAMAYIM_NEKUDOTAYIM',
        'T_NAMESPACE',
        'T_NS_C',
        'T_DIR',
        'T_NS_SEPARATOR',
        'T_ELLIPSIS',
        '\';\'',
        '\'{\'',
        '\'}\'',
        '\'(\'',
        '\')\'',
        '\'`\'',
        '\']\'',
        '\'"\'',
        '\'$\'',
    ];
    protected $tokenToSymbol = [
            0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,   53,  155,  157,  156,   52,   35,  157,
          151,  152,   50,   47,    7,   48,   49,   51,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,   29,  148,
           41,   15,   43,   28,   65,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,   67,  157,  154,   34,  157,  153,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  149,   33,  150,   55,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
          157,  157,  157,  157,  157,  157,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   14,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   30,   31,   32,   36,   37,   38,   39,   40,   42,
           44,   45,   46,   54,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   66,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,  157,  157,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  157,  157,  157,  157,
          157,  157,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147,
    ];

    protected $action = [
          760,  108,  107,  429,  106,  105, -282,  475,   56,  319,
          104,  103,   23,  102,   71,   72,   73,   50,   64,   49,
           33,   34,   29,   37,   38,   39,   36,   41,   77,   42,
           43,   45,   46,   47,  126,  125,  124,    0,  240,  567,
          576,  572,  569,  573,  575,  747,  101,  100,  757,  765,
          123,   25,   99,   21,   98,  218,  217,   96,   95,   93,
           79,   92,   91,   90,   89,  772,   28,  233,   87,  426,
          420, -133, -133, -133,  759,  758,  418,  460,  757,  538,
          756,  532,  755,  110,   18,  415, -133,  413, -133,  412,
         -133,  411, -133,  112,  410, -133, -133, -133,   80,  109,
          409,  408, -487,  132,  405, -488, 1343,  131, 1346, 1344,
          305,  306,  419,  434,  505,  765,  421,  769,  451,  465,
          464,  726,  753,  462,  459,  266,   22,  226,  458,  457,
          718,  752,  751,  750,  749,  748,  746,  246,  772,  747,
           85,  768,  343,  732,  745,  450,  784,  744,  743, -133,
           48,   65,  265,  636,  264,  266,   -4,  760,  108,  107,
          429,  106,  105,   84,  781,  780,  530,  104,  103,   23,
          102,   71,   72,   73,   50,   64,   49,   33,   34,   29,
           37,   38,   39,   36,   41,   77,   42,   43,   45,   46,
           47,  126,  125,  124,  718,  240,  763,  728,  697,   22,
          226,  249,  275,  101,  100,  747,  466,  123,  487,   99,
          401,   98,  218,  217,   96,   95,   93,   79,   92,   91,
           90,   89,   86,   28,  233,   87,  426,  420,  747,  747,
          296,  759,  758,  418, -172,  757,  422,  756,  797,  755,
          110,   18,  415, -173,  413, -251,  412, -487,  411, -487,
         -488,  410, -488,  781,  780,   80,  109,  409,  408,  406,
          132,  405,  763,  -88,  131,  257,  368,  305,  306,  419,
          434,  343,  637,  295,  450,  451,  465,  464,  754,  753,
          462,  459,  816,  815,  747,  458,  457,   44,  752,  751,
          750,  749,  748,  746,  246,  343,  747,  289,  450,  274,
          732,  745,  450,  479,  744,  743,   -4,   48,  280,  265,
           97,  264,  266,  700,  713,  712,  711,  710,  709,  762,
          708,  707,  706,  705,  704,   23,  469,   71,   72,   73,
           50,   64,   49,   33,   34,   29,   37,   38,   39,   36,
           41,   77,   42,   43,   45,   46,   47,  126,  125,  124,
          343,  240,  268,  450,  508,  567,  576,  572,  569,  573,
          575,  580,  279,  123,  262,  436,  703,  236,   45,   46,
           47,  126,  125,  124, -479,  240,  380,   56,  319, -172,
          702,  701,  667,  731,  794,  859,  860,  123, -173,  920,
         -251,  757,  772,  585,  118,  480,  861,  862,  863,  864,
          865,  866,  867,  868,  869,  870,  871,  891,  892,  893,
          894,  895,  883,  884,  885,  886,  887,  872,  873,  874,
          875,  876,  877,  878,  914,  915,  916,  917,  918,  919,
          879,  880,  881,  882,  912,  903,  901,  902,  898,  899,
          529,  890,  896,  897,  904,  905,  907,  906,  908,  909,
          213,  718,  771,   22,  226,  900,  911,  910,   52,   63,
           65,   62,  220,  713,  712,  711,  710,  709,  266,  708,
          707,  706,  705,  704,   56,  319,  260,  810,   23,   30,
           71,   72,   73,   50,   64,   49,   33,   34,   29,   37,
           38,   39,   36,   41,   77,   42,   43,   45,   46,   47,
          126,  125,  124,  268,  240,    9,  567,  576,  572,  569,
          573,  575,  580,  240,  235,  703,  123, -400,  111, -479,
          126,  125,  124,  427,  240,  123,   20,  622,  718,  702,
          701,  667,  731,  794,  859,  860,  123,  501,  340,  522,
          521,   83, -442,   53,  609,  861,  862,  863,  864,  865,
          866,  867,  868,  869,  870,  871,  891,  892,  893,  894,
          895,  883,  884,  885,  886,  887,  872,  873,  874,  875,
          876,  877,  878,  914,  915,  916,  917,  918,  919,  879,
          880,  881,  882,  912,  903,  901,  902,  898,  899, -227,
          890,  896,  897,  904,  905,  907,  906,  908,  909,  747,
          273,  765,  801, -442,  492,  911,  910,  450,   52,   63,
           65,  656,  713,  712,  711,  710,  709, -442,  708,  707,
          706,  705,  704,  122, -442,  640, -445,   40,   23,   35,
           71,   72,   73,   50,   64,   49,   33,   34,   29,   37,
           38,   39,   36,   41,   77,   42,   43,   45,   46,   47,
          126,  125,  124,  241,  240,  389,   17,  395,    7,  359,
          354,  612,  658,  586,  703,  785,  123,  784,  534,  588,
          571,  123,  540,   88,  808,  549, 1338,  511,  702,  701,
          667,  731,  794,  859,  860,   56,  319,  920,  323,  385,
          747,  469,  516,  494,  861,  862,  863,  864,  865,  866,
          867,  868,  869,  870,  871,  891,  892,  893,  894,  895,
          883,  884,  885,  886,  887,  872,  873,  874,  875,  876,
          877,  878,  914,  915,  916,  917,  918,  919,  879,  880,
          881,  882,  912,  903,  901,  902,  898,  899,  642,  890,
          896,  897,  904,  905,  907,  906,  908,  909,  763,  477,
           52,   63,   65,  900,  911,  910,  471, -441,  589,  713,
          712,  711,  710,  709,  470,  708,  707,  706,  705,  704,
           23,  718,   71,   72,   73,   50,   64,   49,   33,   34,
           29,   37,   38,   39,   36,   41,   77,   42,   43,   45,
           46,   47,  126,  125,  124,  268,  240,  665,  567,  576,
          572,  569,  573,  575,  580,  479,  398,  373,  123,  367,
          506,  703,  437,  670,  382,  258,   10,  -80, -441,  387,
          773,  774,  267,    3,  297,  702,  701,  667,  731,  794,
          859,  860, -441,  256,  920,  259,  602,    8,  311, -441,
          649,  885,  884,  883,  882,  881,  880,  879,  878,  877,
          876,  875,  873,  859,  872,  871,  870,  869,  868,  867,
          866,  865,  864,  863,  862,  861,  860,  888,  874,  889,
          906,  919,  918,  917,  916,  915,  914,  913,  912,  911,
          910,  909,  908,  907,  905,  299,  891,  904,  903,  902,
          901,  900,  899,  898,  897,  310,  393,   63,   65,  316,
          896,  895,  894,  713,  712,  711,  710,  709,  507,  708,
          707,  706,  705,  704,  505,  606,   23,   32,   71,   72,
           73,   50,   64,   49,   33,   34,   29,   37,   38,   39,
           36,   41,   77,   42,   43,   45,   46,   47,  126,  125,
          124,  268,  240,   78,  567,  576,  572,  569,  573,  575,
          580,  554,  591,  595,  123,  703,  598,  601,  553,  614,
          632,  634,  635,  638,  890,  641,  644,  645,  627,  702,
          701,  667,  731,  794,  858,  887,  629,  558,  445,  563,
          244,  626,  619,  566,  611,  885,  884,  883,  882,  881,
          880,  879,  878,  877,  876,  875,  873,  859,  872,  871,
          870,  869,  868,  867,  866,  865,  864,  863,  862,  861,
          860,  888,  874,  567,  576,  572,  569,  573,  575,  915,
          914,  913,  912,  911,  910,  909,  908,  907,  905,  747,
          891,  904,  903,  902,  901,  900,  899,  898,  897,  662,
          857,  657,  757,  672,  896,  895,  894,  760,  108,  107,
          429,  106,  105,  782,  798,  767,  551,  104,  103,  559,
          102,-32767,-32767,-32767,-32767,   42,   43,   45,   46,   47,
          126,  125,  124,  582,  240,  835,  592,  615,  772,  617,
          618,  768,  816,  815,  920,  646,  123,  650,  660,  721,
          796,  842,  851,  101,  100,  343,   57,   55,  450,   99,
           54,   98,  218,  217,   96,   95,   93,   79,   92,   91,
           90,   89,   70,   28,  233,   87,  426,  420,   51,  266,
           31,  759,  758,  418, -445,  757,   27,  756, -444,  755,
          110,   18,  415,  757,  413,   61,  412, -446,  411,   22,
          226,  410, -467, -469,   60,   80,  109,  409,  361,   20,
          132,  405,   67,  235,  131,   68,  493,  305,  306,  760,
          108,  107,  429,  106,  105,  451,  465,  464,  375,  104,
          103,  378,  102,  239,  237,  458,  457,  277,  752,  751,
          750,  749,  748,  746,  246,  234,   75,  593,  225,  343,
          732,  745,  450,  772,  834,  743,  339,   48,  222,  265,
          116,  264,  266,   59,   76,  101,  100,   74,  720, -230,
          266,   99, -228,   98,  218,  217,   96,   95,   93,   79,
           92,   91,   90,   89, -227,   28,  233,   87,  426,  420,
           11,   13,   15,  759,  758,  418,   16,  757,  309,  756,
          449,  755,  110,   18,  415,  400,  413,  248,  412,  425,
          411,  438,  564,  410,   22,  226,  664,   80,  109,  409,
          361,  294,  132,  405,  802,  818,  131,  824,   58,  305,
          306,  760,  108,  107,  429,  106,  105,  451,  465,  464,
         -412,  104,  103,  550,  102,  847,  844,  458,  457,  843,
          752,  751,  750,  749,  748,  746,  246,  693,    0,  827,
            0,  343,  732,  745,  450,    0,  744,  743,    0,   48,
            0,  265,    0,  264,  266,    0,    0,  101,  100,    0,
            0,    0,    0,   99,    0,   98,  218,  217,   96,   95,
           93,   79,   92,   91,   90,   89,    0,   28,  233,   87,
          426,  420,    0,    0,    0,  759,  758,  418,    0,  757,
            0,  756,    0,  755,  110,   18,  415,    0,  413,    0,
          412,    0,  411,    0,    0,  410,    0,    0,    0,   80,
          109,  409,  361,    0,  132,  405,    0,    0,  131,    0,
            0,  305,  306,  760,  108,  107,  429,  106,  105,  451,
          465,  464,    0,  104,  103,    0,  102,    0,    0,  458,
          457,    0,  752,  751,  750,  749,  748,  746,  246,    0,
            0,  561,    0,  343,  732,  745,  450,    0,  744,  743,
            0,   48,    0,  265,    0,  264,  266,    0,    0,  101,
          100,    0,    0,    0,    0,   99,    0,   98,  218,  217,
           96,   95,   93,   79,   92,   91,   90,   89,    0,   28,
          233,   87,  426,  420,    0,    0,    0,  759,  758,  418,
            0,  757,    0,  756,    0,  755,  110,   18,  415,    0,
          413,    0,  412,    0,  411,    0,    0,  410,    0,    0,
            0,   80,  109,  409,  361,    0,  132,  405,    0,    0,
          131,    0,    0,  305,  306,  760,  108,  107,  429,  106,
          105,  451,  465,  464,    0,  104,  103,    0,  102,    0,
            0,  458,  457,    0,  752,  751,  750,  749,  748,  746,
          246,    0,    0,  839,    0,  343,  732,  745,  450,    0,
          744,  743,    0,   48,    0,  265,    0,  264,  266,    0,
            0,  101,  100,    0,    0,    0,    0,   99,    0,   98,
          218,  217,   96,   95,   93,   79,   92,   91,   90,   89,
            0,   28,  233,   87,  426,  420,    0,    0,    0,  759,
          758,  418,    0,  757,    0,  756,    0,  755,  110,   18,
          415,    0,  413,    0,  412,    0,  411,    0,    0,  410,
            0,    0,    0,   80,  109,  409,  361,    0,  132,  405,
            0,    0,  131,    0,    0,  305,  306,  760,  108,  107,
          429,  106,  105,  451,  465,  464,    0,  104,  103,    0,
          102,    0,    0,  458,  457,    0,  752,  751,  750,  749,
          748,  746,  246,    0,    0,    0,    0,  343,  732,  745,
          450,    0,  744,  743,    0,   48,    0,  265,    0,  264,
          266,    0,    0,  101,  100,    0,    0,    0,    0,   99,
            0,   98,  218,  217,   96,   95,   93,   79,   92,   91,
           90,   89,    0,   28,  233,   87,  426,  420,    0,    0,
            0,  759,  758,  418,    0,  757,    0,  756,    0,  755,
          110,   18,  415,    0,  413,    0,  412,    0,  411,    0,
            0,  410,    0,    0,    0,   80,  109,  409,  361,    0,
          132,  405,    0,    0,  131,    0,    0,  305,  306,    0,
          108,  107,  429,  106,  105,  451,  465,  464,  772,  104,
          103,  768,  102,    0,    0,  458,  457,    0,  752,  751,
          750,  749,  748,  746,  246,    0,    0,    0,    0,  343,
          732,  745,  450,  221,  744,  743,    0,   48,    0,  265,
            0,  264,  266,    0,  216,  101,  100,    0,    0,    0,
            0,   99,    0,   98,  218,  217,   96,   95,   93,   79,
           92,   91,   90,   89,    0,   28,  233,   87,  426,   22,
          226,    0,    0,  759,  758,  747,   28,  757,    0,    0,
          244,  755,    0,    0,  719,    0,  747,    0,  757,    0,
            0,    0,  755,    0,    0,    0,    0,    0,    0,    0,
          361,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          355,    0,    0,  108,  107,  429,  106,  105,  465,  464,
            0,  762,  104,  103, -443,  102,    0,  458,  457,  747,
          752,  751,  750,  749,  748,  746,  246,    0,  458,  457,
            0,  343,  732,  745,  450,   69,  221,    0,    0,   48,
          716,  265,  343,  264,  266,  450,    0,    0,  101,  100,
           66,  791,    0,    0,   99,  266,   98,  218,  217,   96,
           95,   93,   79,   92,   91,   90,   89,    0,   28,  233,
           87,  426,  816,  815,    0, -443,  759,  758,  747,    0,
          757,    0,    0,  244,  755,  343,    0,    0,  450, -443,
            0,    0,    0,    0,  -88,    0, -443,    0, -446,    0,
            0,    0,    0,  361,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  355,  108,  107,  429,  106,  105,    0,
            0,  465,  464,  104,  103,    0,  102,  747,    0,  757,
          458,  457,  747,  752,  751,  750,  749,  748,  746,  246,
            0,   82,    0,    0,  343,  732,  745,  450,   69,    0,
            0,    0,   48,    0,  265,    0,  264,  266,    0,  101,
          100,    0,  762,    0,    0,   99,    0,   98,  218,  217,
           96,   95,   93,   79,   92,   91,   90,   89,    0,   28,
          233,   87,  426,    0,    0,  816,  815,  759,  758,  747,
            0,  757,    0,  343,    0,  755,  450,    0,  343,    0,
            0,  450,    0,    0,    0,    0,  266, -232,    0,    0,
            0,    0,    0,    0,  361,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  355,    0,  108,  107,  429,  106,
          105,    0,  465,  464,    0,  104,  103,    0,  102,    0,
            0,  458,  457,    0,  752,  751,  750,  749,  748,  746,
          246,    0,    0,    0,    0,  343,  732,  745,  450,  223,
            0,    0,    0,   48,    0,  265,    0,  264,  266,    0,
            0,  101,  100,    0,    0,    0,    0,   99,    0,   98,
          218,  217,   96,   95,   93,   79,   92,   91,   90,   89,
            0,   28,  233,   87,  426,    0,    0,    0,    0,  759,
          758,  747,    0,  757,    0,    0,    0,  755,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  361,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  355,    0,  108,  107,
          429,  106,  105,    0,  465,  464,    0,  104,  103,    0,
          102,    0,    0,  458,  457,    0,  752,  751,  750,  749,
          748,  746,  246,    0,    0,    0,    0,  343,  732,  745,
          450,  224,    0,    0,    0,   48,    0,  265,    0,  264,
          266,    0,    0,  101,  100,    0,    0,    0,    0,   99,
            0,   98,  218,  217,   96,   95,   93,   79,   92,   91,
           90,   89,    0,   28,  233,   87,  426,    0,    0,    0,
            0,  759,  758,  747,    0,  757,    0,    0,    0,  755,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  361,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  355,    0,
          108,  107,  429,  106,  105,    0,  465,  464,    0,  104,
          103,    0,  102,    0,    0,  458,  457,    0,  752,  751,
          750,  749,  748,  746,  246,    0,    0,    0,    0,  343,
          732,  745,  450,  219,    0,    0,    0,   48,    0,  265,
            0,  264,  266,    0,    0,  101,  100,    0,    0,    0,
            0,   99,    0,   98,  218,  217,   96,   95,   93,   79,
           92,   91,   90,   89,    0,   28,  233,   87,  426,    0,
            0,    0,  791,  759,  758,  747,    0,  757,    0,    0,
            0,  755,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          361,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          355,  108,  107,  429,  106,  105,    0,    0,  465,  464,
          104,  103,    0,  102,    0,    0,    0,  458,  457,    0,
          752,  751,  750,  749,  748,  746,  246,    0,    0,    0,
            0,  343,  732,  745,  450,    0,    0,    0,  747,   48,
          757,  265,    0,  264,  266,    0,  101,  100,    0,    0,
            0,    0,   99,    0,   98,  218,  217,   96,   95,   93,
           79,   92,   91,   90,   89,    0,   28,  233,   87,  426,
            0,    0,    0,  762,  759,  758,  747,  298,  757,    0,
            0,    0,  755,    0,  377,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  361,    0,    0,  343,    0,    0,  450,    0,    0,
            0,  355,  108,  107,  429,  106,  105,  266,    0,  465,
          464,  104,  103,    0,  102,    0,    0,    0,  458,  457,
            0,  752,  751,  750,  749,  748,  746,  246,    0,    0,
            0,    0,  343,  732,  745,  450,    0,    0,    0,    0,
           48,    0,  265,    0,  264,  266,    0,  101,  100,    0,
            0,    0,    0,   99,    0,   98,  218,  217,   96,   95,
           93,   79,   92,   91,   90,   89,    0,   28,  233,   87,
          426,    0,    0,    0,    0,  759,  758,  747,    0,  757,
            0,    0,    0,  755,   49,   33,   34,   29,   37,   38,
           39,   36,   41,   77,   42,   43,   45,   46,   47,  126,
          125,  124,  361,  240,    0,    0,    0,    0,    0,    0,
            0,    0,  355,    0,    0,  123,    0,    0,    0,    0,
          465,  464,    0,    0,    0,    0,    0,    0,    0,  458,
          457,    0,  752,  751,  750,  749,  748,  746,  246,   52,
           63,   65,    0,  343,  732,  745,  450,    0,    0,    0,
            0,   48,    0,  265,    0,  264,  266,    0,    0,   23,
          636,   71,   72,   73,   50,   64,   49,   33,   34,   29,
           37,   38,   39,   36,   41,   77,   42,   43,   45,   46,
           47,  126,  125,  124,    0,  240,   52,   63,   65,    0,
            0,    0,    0,    0,    0,    0,    0,  123,    0,    0,
            0,    0,    0,    0,    0,    0,   23,    0,   71,   72,
           73,   50,   64,   49,   33,   34,   29,   37,   38,   39,
           36,   41,   77,   42,   43,   45,   46,   47,  126,  125,
          124,    0,  240,    0,   52,   63,   65,    0,    0,    0,
            0,    0,    0,    0,  123,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   23,    0,   71,   72,   73,   50,
           64,   49,   33,   34,   29,   37,   38,   39,   36,   41,
           77,   42,   43,   45,   46,   47,  126,  125,  124,  637,
          240,   52,   63,   65,    0,    0,    0,    0,    0,    0,
            0,    0,  123,    0,    0,    0,    0,    0,    0,    0,
            0,   23,    0,   71,   72,   73,   50,   64,   49,   33,
           34,   29,   37,   38,   39,   36,   41,   77,   42,   43,
           45,   46,   47,  126,  125,  124,    0,  240,    0,    0,
          454,   52,   63,   65,    0,    0,    0,    0,    0,  123,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   23,    0,   71,   72,   73,   50,   64,   49,   33,
           34,   29,   37,   38,   39,   36,   41,   77,   42,   43,
           45,   46,   47,  126,  125,  124,    0,  240,  366,    0,
           52,   63,   65,    0,    0,    0,    0,    0,    0,  123,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
           23,    0,   71,   72,   73,   50,   64,   49,   33,   34,
           29,   37,   38,   39,   36,   41,   77,   42,   43,   45,
           46,   47,  126,  125,  124,  334,  240,   52,   63,   65,
            0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
            0,    0,    0,    0,    0,    0,    0,   23,    0,   71,
           72,   73,   50,   64,   49,   33,   34,   29,   37,   38,
           39,   36,   41,   77,   42,   43,   45,   46,   47,  126,
          125,  124,    0,  240,    0,  856,   52,   63,   65,    0,
            0,    0,    0,    0,    0,  123,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   23,    0,   71,   72,
           73,   50,   64,   49,   33,   34,   29,   37,   38,   39,
           36,   41,   77,   42,   43,   45,   46,   47,  126,  125,
          124,    0,  240,    0,  313,    0,   52,   63,   65,    0,
            0,    0,    0,    0,  123,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,   23,    0,   71,   72,
           73,   50,   64,   49,   33,   34,   29,   37,   38,   39,
           36,   41,   77,   42,   43,   45,   46,   47,  126,  125,
          124,  243,  240,   52,   63,   65,    0,    0,    0,    0,
            0,    0,    0,    0,  123,    0,    0,    0,    0,    0,
            0,    0,    0,   23,    0,   71,   72,   73,   50,   64,
           49,   33,   34,   29,   37,   38,   39,   36,   41,   77,
           42,   43,   45,   46,   47,  126,  125,  124,    0,  240,
           19,   52,   63,   65,    0,    0,    0,    0,    0,    0,
            0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   23,    0,   71,   72,   73,   50,   64,   49,   33,
           34,   29,   37,   38,   39,   36,   41,   77,   42,   43,
           45,   46,   47,  126,  125,  124,    0,  240,    0,    0,
           14,    0,   52,   63,   65,    0,    0,    0,    0,  123,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   23,    0,   71,   72,   73,   50,   64,   49,
           33,   34,   29,   37,   38,   39,   36,   41,   77,   42,
           43,   45,   46,   47,  126,  125,  124,   12,  240,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   52,   63,   65,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   23,  560,   71,   72,   73,   50,   64,   49,
           33,   34,   29,   37,   38,   39,   36,   41,   77,   42,
           43,   45,   46,   47,  126,  125,  124,    0,  240,    0,
            0,    0,    0,   52,   63,   65,    0,    0,    0,    0,
          123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   23,  562,   71,   72,   73,   50,   64,
           49,   33,   34,   29,   37,   38,   39,   36,   41,   77,
           42,   43,   45,   46,   47,  126,  125,  124,    0,  240,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   52,   63,   65,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,   23,  825,   71,   72,   73,   50,   64,
           49,   33,   34,   29,   37,   38,   39,   36,   41,   77,
           42,   43,   45,   46,   47,  126,  125,  124,    0,  240,
            0,    0,    0,    0,   52,   63,   65,    0,    0,    0,
            0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   23,  841,   71,   72,   73,   50,
           64,   49,   33,   34,   29,   37,   38,   39,   36,   41,
           77,   42,   43,   45,   46,   47,  126,  125,  124,    0,
          240,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  123,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   52,   63,   65,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,   23,  845,   71,   72,   73,   50,
           64,   49,   33,   34,   29,   37,   38,   39,   36,   41,
           77,   42,   43,   45,   46,   47,  126,  125,  124,    0,
          240,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  123,    0,    0,    0,    0,    0,    0,   52,
           63,   65,    0,    0,   26,    0,  850,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,   23,
          214,   71,   72,   73,   50,   64,   49,   33,   34,   29,
           37,   38,   39,   36,   41,   77,   42,   43,   45,   46,
           47,  126,  125,  124,    0,  240,   52,   63,   65,    0,
            0,    0,    0,    0,    0,    0,    0,  123,    0,    0,
            0,    0,    0,    0,    0,    0,   23,  128,   71,   72,
           73,   50,   64,   49,   33,   34,   29,   37,   38,   39,
           36,   41,   77,   42,   43,   45,   46,   47,  126,  125,
          124,    0,  240,   52,   63,   65,    0,    0,  215,    0,
            0,    0,    0,    0,  123,    0,    0,    0,    0,    0,
            0,    0,    0,   23,    0,   71,   72,   73,   50,   64,
           49,   33,   34,   29,   37,   38,   39,   36,   41,   77,
           42,   43,   45,   46,   47,  126,  125,  124,    0,  240,
           52,   63,   65,    0,    0,    0,    0,    0,    0,    0,
            0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
           23,    0,   71,   72,   73,   50,   64,   49,   33,   34,
           29,   37,   38,   39,   36,   41,   77,   42,   43,   45,
           46,   47,  126,  125,  124,    0,  240,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  123,   71,
           72,   73,   50,   64,   49,   33,   34,   29,   37,   38,
           39,   36,   41,   77,   42,   43,   45,   46,   47,  126,
          125,  124,    0,  240,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  123,   73,   50,   64,   49,
           33,   34,   29,   37,   38,   39,   36,   41,   77,   42,
           43,   45,   46,   47,  126,  125,  124,    0,  240,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          123,   50,   64,   49,   33,   34,   29,   37,   38,   39,
           36,   41,   77,   42,   43,   45,   46,   47,  126,  125,
          124,    0,  240,    0,    0,    0,    0, -477,    0,    0,
            0,    0,    0,    0,  123,   24,  121,  119,  117,  115,
          114,  113,  127,  120,  129,  130,   94,   81,   64,   49,
           33,   34,   29,   37,   38,   39,   36,   41,   77,   42,
           43,   45,   46,   47,  126,  125,  124,    0,  240,    0,
            0,    0,    0,    0,    0,    0,  729,  696,    0,    0,
          123,    0,    0,    0,    0,    0,    0, -441,   24,  121,
          119,  117,  115,  114,  113,  127,  120,  129,  130,   94,
           81,   33,   34,   29,   37,   38,   39,   36,   41,   77,
           42,   43,   45,   46,   47,  126,  125,  124,    0,  240,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  729,
          696,  123,    0,    0,    0,    0,    0,    0,    0,    0,
         -441,    0,    0,    0,    0,   28,    0,    0, -441,    0,
            0,    0,    0,    0,   28,  747,    0,  757,    0,    0,
            0,  755, -441,    0,  747,    0,  757,    0,    0, -441,
          755,    0, -477,-32767,-32767,-32767,-32767,-32767,   39,   36,
           41,   77,   42,   43,   45,   46,   47,  126,  125,  124,
          762,  240,    0,    0,    0,    0,    0,    0,    0,  762,
            0, -441,    0,  123,    0,    0,    0,  458,  457,    0,
            0,    0,    0,    0,    0, -441,    0,  457,    0,    0,
            0,  343, -441,    0,  450,    0,    0,    0,    0,   66,
          343,    0,    0,  450,  266,    0,    0,    0,   66,    0,
            0,    0,    0,  266,
    ];

    protected $actionCheck = [
            1,    2,    3,    4,    5,    6,   79,   96,   97,   98,
           11,   12,   28,   14,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,    0,   54,  112,
          113,  114,  115,  116,  117,   77,   47,   48,   79,    1,
           66,    7,   53,    7,   55,   56,   57,   58,   59,   60,
           61,   62,   63,   64,   65,   79,   67,   68,   69,   70,
           71,   72,   73,   74,   75,   76,   77,   48,   79,    7,
           81,    7,   83,   84,   85,   86,   87,   88,   89,   90,
           91,   92,   93,    7,   95,   96,   97,   98,   99,  100,
          101,  102,    7,  104,  105,    7,   77,  108,   79,   80,
          111,  112,  113,  114,  146,    1,   29,  149,  119,  120,
          121,  122,  123,  124,  125,  156,  140,  141,  129,  130,
           77,  132,  133,  134,  135,  136,  137,  138,   79,   77,
           67,   82,  143,  144,  145,  146,   35,  148,  149,  150,
          151,   10,  153,   29,  155,  156,    0,    1,    2,    3,
            4,    5,    6,   15,  102,  103,    7,   11,   12,   28,
           14,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
           49,   50,   51,   52,   77,   54,  148,  149,  139,  140,
          141,  128,  149,   47,   48,   77,    7,   66,  146,   53,
            7,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,  149,   67,   68,   69,   70,   71,   77,   77,
            7,   75,   76,   77,    7,   79,  149,   81,  152,   83,
           84,   85,   86,    7,   88,    7,   90,  152,   92,  154,
          152,   95,  154,  102,  103,   99,  100,  101,  102,  103,
          104,  105,  148,  152,  108,  109,  149,  111,  112,  113,
          114,  143,  148,    7,  146,  119,  120,  121,  122,  123,
          124,  125,  130,  131,   77,  129,  130,   15,  132,  133,
          134,  135,  136,  137,  138,  143,   77,    7,  146,  143,
          144,  145,  146,   79,  148,  149,  150,  151,   33,  153,
           13,  155,  156,    1,    2,    3,    4,    5,    6,  112,
            8,    9,   10,   11,   12,   28,  102,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
          143,   54,  109,  146,   79,  112,  113,  114,  115,  116,
          117,  118,    7,   66,    7,  146,   54,    7,   47,   48,
           49,   50,   51,   52,    7,   54,   96,   97,   98,  152,
           68,   69,   70,   71,   72,   73,   74,   66,  152,   77,
          152,   79,   79,  150,   67,   82,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
           98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
          108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
          118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
           77,  129,  130,  131,  132,  133,  134,  135,  136,  137,
           13,   77,  139,  140,  141,  143,  144,  145,    8,    9,
           10,  149,    7,    2,    3,    4,    5,    6,  156,    8,
            9,   10,   11,   12,   97,   98,   67,  150,   28,    7,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,  109,   54,    7,  112,  113,  114,  115,
          116,  117,  118,   54,  151,   54,   66,  142,   15,  152,
           50,   51,   52,  149,   54,   66,  151,  150,   77,   68,
           69,   70,   71,   72,   73,   74,   66,  128,   77,   72,
           73,   15,   67,   15,  150,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,  124,  125,  126,  127,  152,
          129,  130,  131,  132,  133,  134,  135,  136,  137,   77,
          149,    1,  152,  128,  143,  144,  145,  146,    8,    9,
           10,  150,    2,    3,    4,    5,    6,  142,    8,    9,
           10,   11,   12,   15,  149,   29,  151,   15,   28,   15,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,   29,   54,   72,   73,  102,  103,  106,
          107,  148,  149,   29,   54,   29,   66,   35,  146,  148,
          149,   66,   74,   67,   77,   80,   77,   86,   68,   69,
           70,   71,   72,   73,   74,   97,   98,   77,   77,   87,
           77,  102,   77,   77,   84,   85,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
          100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
          110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
          120,  121,  122,  123,  124,  125,  126,  127,  150,  129,
          130,  131,  132,  133,  134,  135,  136,  137,  148,   77,
            8,    9,   10,  143,  144,  145,   77,   67,  148,    2,
            3,    4,    5,    6,   77,    8,    9,   10,   11,   12,
           28,   77,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,  109,   54,   79,  112,  113,
          114,  115,  116,  117,  118,   79,   79,   79,   66,   89,
           91,   54,  109,  139,   93,  110,   94,   94,  128,   94,
          123,  123,  126,  142,  142,   68,   69,   70,   71,   72,
           73,   74,  142,  126,   77,  127,  150,  142,  146,  149,
          147,   84,   85,   86,   87,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
          103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
          113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
          123,  124,  125,  126,  127,  146,  129,  130,  131,  132,
          133,  134,  135,  136,  137,  146,  154,    9,   10,  146,
          143,  144,  145,    2,    3,    4,    5,    6,  146,    8,
            9,   10,   11,   12,  146,  148,   28,  148,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,  109,   54,  148,  112,  113,  114,  115,  116,  117,
          118,  148,  148,  148,   66,   54,  148,  148,  148,  148,
          148,  148,  148,  148,    1,  148,  148,  148,  148,   68,
           69,   70,   71,   72,   73,   74,  149,  149,   77,  149,
           28,  150,  150,  149,  149,   84,   85,   86,   87,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,  124,  125,  126,  127,   77,
          129,  130,  131,  132,  133,  134,  135,  136,  137,  149,
           77,  149,   79,  149,  143,  144,  145,    1,    2,    3,
            4,    5,    6,  149,  149,    1,  150,   11,   12,  150,
           14,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,  150,   54,   29,  150,  150,   79,  150,
          150,   82,  130,  131,  150,  150,   66,  150,  150,  150,
          150,  150,  150,   47,   48,  143,  151,  151,  146,   53,
          151,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,  149,   67,   68,   69,   70,   71,  151,  156,
          151,   75,   76,   77,  151,   79,  151,   81,  151,   83,
           84,   85,   86,   79,   88,  151,   90,  151,   92,  140,
          141,   95,  151,  151,  151,   99,  100,  101,  102,  151,
          104,  105,  151,  151,  108,  151,  151,  111,  112,    1,
            2,    3,    4,    5,    6,  119,  120,  121,  151,   11,
           12,  152,   14,  151,  151,  129,  130,  151,  132,  133,
          134,  135,  136,  137,  138,  151,   67,   29,  151,  143,
          144,  145,  146,   79,  148,  149,   82,  151,  151,  153,
          151,  155,  156,  149,  151,   47,   48,  151,  153,  152,
          156,   53,  152,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,  152,   67,   68,   69,   70,   71,
          152,  152,  152,   75,   76,   77,  152,   79,  152,   81,
          152,   83,   84,   85,   86,  152,   88,  128,   90,  152,
           92,  152,  152,   95,  140,  141,  152,   99,  100,  101,
          102,  142,  104,  105,  152,  152,  108,  152,  149,  111,
          112,    1,    2,    3,    4,    5,    6,  119,  120,  121,
          153,   11,   12,  154,   14,  154,  154,  129,  130,  154,
          132,  133,  134,  135,  136,  137,  138,  154,   -1,   29,
           -1,  143,  144,  145,  146,   -1,  148,  149,   -1,  151,
           -1,  153,   -1,  155,  156,   -1,   -1,   47,   48,   -1,
           -1,   -1,   -1,   53,   -1,   55,   56,   57,   58,   59,
           60,   61,   62,   63,   64,   65,   -1,   67,   68,   69,
           70,   71,   -1,   -1,   -1,   75,   76,   77,   -1,   79,
           -1,   81,   -1,   83,   84,   85,   86,   -1,   88,   -1,
           90,   -1,   92,   -1,   -1,   95,   -1,   -1,   -1,   99,
          100,  101,  102,   -1,  104,  105,   -1,   -1,  108,   -1,
           -1,  111,  112,    1,    2,    3,    4,    5,    6,  119,
          120,  121,   -1,   11,   12,   -1,   14,   -1,   -1,  129,
          130,   -1,  132,  133,  134,  135,  136,  137,  138,   -1,
           -1,   29,   -1,  143,  144,  145,  146,   -1,  148,  149,
           -1,  151,   -1,  153,   -1,  155,  156,   -1,   -1,   47,
           48,   -1,   -1,   -1,   -1,   53,   -1,   55,   56,   57,
           58,   59,   60,   61,   62,   63,   64,   65,   -1,   67,
           68,   69,   70,   71,   -1,   -1,   -1,   75,   76,   77,
           -1,   79,   -1,   81,   -1,   83,   84,   85,   86,   -1,
           88,   -1,   90,   -1,   92,   -1,   -1,   95,   -1,   -1,
           -1,   99,  100,  101,  102,   -1,  104,  105,   -1,   -1,
          108,   -1,   -1,  111,  112,    1,    2,    3,    4,    5,
            6,  119,  120,  121,   -1,   11,   12,   -1,   14,   -1,
           -1,  129,  130,   -1,  132,  133,  134,  135,  136,  137,
          138,   -1,   -1,   29,   -1,  143,  144,  145,  146,   -1,
          148,  149,   -1,  151,   -1,  153,   -1,  155,  156,   -1,
           -1,   47,   48,   -1,   -1,   -1,   -1,   53,   -1,   55,
           56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
           -1,   67,   68,   69,   70,   71,   -1,   -1,   -1,   75,
           76,   77,   -1,   79,   -1,   81,   -1,   83,   84,   85,
           86,   -1,   88,   -1,   90,   -1,   92,   -1,   -1,   95,
           -1,   -1,   -1,   99,  100,  101,  102,   -1,  104,  105,
           -1,   -1,  108,   -1,   -1,  111,  112,    1,    2,    3,
            4,    5,    6,  119,  120,  121,   -1,   11,   12,   -1,
           14,   -1,   -1,  129,  130,   -1,  132,  133,  134,  135,
          136,  137,  138,   -1,   -1,   -1,   -1,  143,  144,  145,
          146,   -1,  148,  149,   -1,  151,   -1,  153,   -1,  155,
          156,   -1,   -1,   47,   48,   -1,   -1,   -1,   -1,   53,
           -1,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,   -1,   67,   68,   69,   70,   71,   -1,   -1,
           -1,   75,   76,   77,   -1,   79,   -1,   81,   -1,   83,
           84,   85,   86,   -1,   88,   -1,   90,   -1,   92,   -1,
           -1,   95,   -1,   -1,   -1,   99,  100,  101,  102,   -1,
          104,  105,   -1,   -1,  108,   -1,   -1,  111,  112,   -1,
            2,    3,    4,    5,    6,  119,  120,  121,   79,   11,
           12,   82,   14,   -1,   -1,  129,  130,   -1,  132,  133,
          134,  135,  136,  137,  138,   -1,   -1,   -1,   -1,  143,
          144,  145,  146,   35,  148,  149,   -1,  151,   -1,  153,
           -1,  155,  156,   -1,   35,   47,   48,   -1,   -1,   -1,
           -1,   53,   -1,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,   -1,   67,   68,   69,   70,  140,
          141,   -1,   -1,   75,   76,   77,   67,   79,   -1,   -1,
           28,   83,   -1,   -1,  155,   -1,   77,   -1,   79,   -1,
           -1,   -1,   83,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          102,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          112,   -1,   -1,    2,    3,    4,    5,    6,  120,  121,
           -1,  112,   11,   12,   67,   14,   -1,  129,  130,   77,
          132,  133,  134,  135,  136,  137,  138,   -1,  129,  130,
           -1,  143,  144,  145,  146,  147,   35,   -1,   -1,  151,
          152,  153,  143,  155,  156,  146,   -1,   -1,   47,   48,
          151,    1,   -1,   -1,   53,  156,   55,   56,   57,   58,
           59,   60,   61,   62,   63,   64,   65,   -1,   67,   68,
           69,   70,  130,  131,   -1,  128,   75,   76,   77,   -1,
           79,   -1,   -1,   28,   83,  143,   -1,   -1,  146,  142,
           -1,   -1,   -1,   -1,  152,   -1,  149,   -1,  151,   -1,
           -1,   -1,   -1,  102,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  112,    2,    3,    4,    5,    6,   -1,
           -1,  120,  121,   11,   12,   -1,   14,   77,   -1,   79,
          129,  130,   77,  132,  133,  134,  135,  136,  137,  138,
           -1,   29,   -1,   -1,  143,  144,  145,  146,  147,   -1,
           -1,   -1,  151,   -1,  153,   -1,  155,  156,   -1,   47,
           48,   -1,  112,   -1,   -1,   53,   -1,   55,   56,   57,
           58,   59,   60,   61,   62,   63,   64,   65,   -1,   67,
           68,   69,   70,   -1,   -1,  130,  131,   75,   76,   77,
           -1,   79,   -1,  143,   -1,   83,  146,   -1,  143,   -1,
           -1,  146,   -1,   -1,   -1,   -1,  156,  152,   -1,   -1,
           -1,   -1,   -1,   -1,  102,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,  112,   -1,    2,    3,    4,    5,
            6,   -1,  120,  121,   -1,   11,   12,   -1,   14,   -1,
           -1,  129,  130,   -1,  132,  133,  134,  135,  136,  137,
          138,   -1,   -1,   -1,   -1,  143,  144,  145,  146,   35,
           -1,   -1,   -1,  151,   -1,  153,   -1,  155,  156,   -1,
           -1,   47,   48,   -1,   -1,   -1,   -1,   53,   -1,   55,
           56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
           -1,   67,   68,   69,   70,   -1,   -1,   -1,   -1,   75,
           76,   77,   -1,   79,   -1,   -1,   -1,   83,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,  102,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,  112,   -1,    2,    3,
            4,    5,    6,   -1,  120,  121,   -1,   11,   12,   -1,
           14,   -1,   -1,  129,  130,   -1,  132,  133,  134,  135,
          136,  137,  138,   -1,   -1,   -1,   -1,  143,  144,  145,
          146,   35,   -1,   -1,   -1,  151,   -1,  153,   -1,  155,
          156,   -1,   -1,   47,   48,   -1,   -1,   -1,   -1,   53,
           -1,   55,   56,   57,   58,   59,   60,   61,   62,   63,
           64,   65,   -1,   67,   68,   69,   70,   -1,   -1,   -1,
           -1,   75,   76,   77,   -1,   79,   -1,   -1,   -1,   83,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  102,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  112,   -1,
            2,    3,    4,    5,    6,   -1,  120,  121,   -1,   11,
           12,   -1,   14,   -1,   -1,  129,  130,   -1,  132,  133,
          134,  135,  136,  137,  138,   -1,   -1,   -1,   -1,  143,
          144,  145,  146,   35,   -1,   -1,   -1,  151,   -1,  153,
           -1,  155,  156,   -1,   -1,   47,   48,   -1,   -1,   -1,
           -1,   53,   -1,   55,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   65,   -1,   67,   68,   69,   70,   -1,
           -1,   -1,    1,   75,   76,   77,   -1,   79,   -1,   -1,
           -1,   83,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          102,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          112,    2,    3,    4,    5,    6,   -1,   -1,  120,  121,
           11,   12,   -1,   14,   -1,   -1,   -1,  129,  130,   -1,
          132,  133,  134,  135,  136,  137,  138,   -1,   -1,   -1,
           -1,  143,  144,  145,  146,   -1,   -1,   -1,   77,  151,
           79,  153,   -1,  155,  156,   -1,   47,   48,   -1,   -1,
           -1,   -1,   53,   -1,   55,   56,   57,   58,   59,   60,
           61,   62,   63,   64,   65,   -1,   67,   68,   69,   70,
           -1,   -1,   -1,  112,   75,   76,   77,   78,   79,   -1,
           -1,   -1,   83,   -1,  123,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,  102,   -1,   -1,  143,   -1,   -1,  146,   -1,   -1,
           -1,  112,    2,    3,    4,    5,    6,  156,   -1,  120,
          121,   11,   12,   -1,   14,   -1,   -1,   -1,  129,  130,
           -1,  132,  133,  134,  135,  136,  137,  138,   -1,   -1,
           -1,   -1,  143,  144,  145,  146,   -1,   -1,   -1,   -1,
          151,   -1,  153,   -1,  155,  156,   -1,   47,   48,   -1,
           -1,   -1,   -1,   53,   -1,   55,   56,   57,   58,   59,
           60,   61,   62,   63,   64,   65,   -1,   67,   68,   69,
           70,   -1,   -1,   -1,   -1,   75,   76,   77,   -1,   79,
           -1,   -1,   -1,   83,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,  102,   54,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,  112,   -1,   -1,   66,   -1,   -1,   -1,   -1,
          120,  121,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  129,
          130,   -1,  132,  133,  134,  135,  136,  137,  138,    8,
            9,   10,   -1,  143,  144,  145,  146,   -1,   -1,   -1,
           -1,  151,   -1,  153,   -1,  155,  156,   -1,   -1,   28,
           29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
           49,   50,   51,   52,   -1,   54,    8,    9,   10,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,   -1,   54,   -1,    8,    9,   10,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,   -1,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,  148,
           54,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   28,   -1,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   52,   -1,   54,   -1,   -1,
          152,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,   66,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   28,   -1,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   52,   -1,   54,  152,   -1,
            8,    9,   10,   -1,   -1,   -1,   -1,   -1,   -1,   66,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           28,   -1,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,  152,   54,    8,    9,   10,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,   -1,   54,   -1,  152,    8,    9,   10,   -1,
           -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,   -1,   54,   -1,  152,   -1,    8,    9,   10,   -1,
           -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,  152,   54,    8,    9,   10,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   28,   -1,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
          152,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   28,   -1,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   52,   -1,   54,   -1,   -1,
          152,   -1,    8,    9,   10,   -1,   -1,   -1,   -1,   66,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   28,   -1,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,  152,   54,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,    8,    9,   10,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   28,  150,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,   -1,   54,   -1,
           -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,   -1,
           66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   28,  150,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   28,  150,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
           -1,   -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,  150,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,    8,    9,   10,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   28,  150,   30,   31,   32,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,   45,   46,   47,   48,   49,   50,   51,   52,   -1,
           54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,    8,
            9,   10,   -1,   -1,   13,   -1,  150,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,
           94,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
           49,   50,   51,   52,   -1,   54,    8,    9,   10,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   28,   29,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,   -1,   54,    8,    9,   10,   -1,   -1,   13,   -1,
           -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   28,   -1,   30,   31,   32,   33,   34,
           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
            8,    9,   10,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           28,   -1,   30,   31,   32,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,   -1,   54,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   30,
           31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
           41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
           51,   52,   -1,   54,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   66,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,   -1,   54,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           66,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
           52,   -1,   54,   -1,   -1,   -1,   -1,    7,   -1,   -1,
           -1,   -1,   -1,   -1,   66,   15,   16,   17,   18,   19,
           20,   21,   22,   23,   24,   25,   26,   27,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   49,   50,   51,   52,   -1,   54,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   56,   57,   -1,   -1,
           66,   -1,   -1,   -1,   -1,   -1,   -1,   67,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   36,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   46,   47,   48,   49,   50,   51,   52,   -1,   54,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   56,
           57,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           67,   -1,   -1,   -1,   -1,   67,   -1,   -1,  128,   -1,
           -1,   -1,   -1,   -1,   67,   77,   -1,   79,   -1,   -1,
           -1,   83,  142,   -1,   77,   -1,   79,   -1,   -1,  149,
           83,   -1,  152,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
          112,   54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  112,
           -1,  128,   -1,   66,   -1,   -1,   -1,  129,  130,   -1,
           -1,   -1,   -1,   -1,   -1,  142,   -1,  130,   -1,   -1,
           -1,  143,  149,   -1,  146,   -1,   -1,   -1,   -1,  151,
          143,   -1,   -1,  146,  156,   -1,   -1,   -1,  151,   -1,
           -1,   -1,   -1,  156,
    ];

    protected $actionBase = [
            0,   -1,  156,  312,  461,  610,  757,  757,  757,  757,
          901, 1382, 1270, 1158, 1494, 1046, 1158, 1606, 1606, 1606,
         1718, 1831, 2389, 1942, 2166, 2054, 2278, 2054, 2054, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
         2500, 2500, 2500,  600,  600, 2631,  742, 3355,  450, 3164,
         3635, 2968, 2726, 3065, 3285, 2773, 3234, 2823, 3588, 2872,
         3113, 3541, 3406, 2678, 3018, 3476, 2919, 3682, 3682, 3682,
         3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682,
         3682, 3682, 3682,  888,  141,  297,  -16,  -16,  -16,  -16,
          -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
          -16,  -16,  -16,  -16, 3719, 3719, 3719, 3754, 3788, 3840,
         3834, 2549, 3957, 3957, 3957, 3957, 3957, 3893, 3885, 1020,
         1020, 1020, 1020, 1729, 1729, 3898, 3907, 3907, 3907, 3907,
         3907, 3907, 3907, 3907, 3907, 3907, 3907,  394,  686,  243,
          832,  321,  321, 2351, 1885, 1885, 1772, 1885,  -73, 1885,
         1880,  952, 1777,  475,  152,  470,  313,  470,  963,  963,
          470, 1649,   59,  690,  690,  690,  207,   62,  207,  207,
           29,  999,  207, 1119,  999, 1114, 1054,  207,  207,   95,
           98,  588,  -89,  151,  -32,  151,  -14,  128,  377,  151,
          128,  280,   48,   73,  236,  227,  367,  238,  437,  111,
          375,  275,  114,   86,  -31,  219,  -31,  -31,  327,  117,
          114,  409,  513,  553,  555,  -31,  224,  521,  583,  114,
          374,  451,  114,   87,  459,  459,   53,  467,  114,  124,
          459,  114,  114,  114,  363,  114,  459,  114,  114,  522,
          114, 1057, 1060, 1072,  973,  992,  991,   37,  986, 1127,
          723,  977,  692,  768,  606,  998, 1131,  935,  605,  998,
          605, 1132,  929,  605,  835,  589,  708,  605, 1135, 1026,
          728,  632,  606,  681,  998, 1088,  596,  817,  613,  927,
          148, 1078,  909,  503,  834,  632,  827,  998,  890,   44,
          813, 1143,  767,  605, 1079,  808,  199,  597,  605, 1053,
          605,  605,  605,  831,  605,  632,   74,  811,  528,  605,
          703,  672,  526,  624, 1084,  904,  615,  828,  632,  611,
          967, 1005, 1004, 1001,  830,  984,  727,  795,  636,  698,
          993,  812,  815, 1099, 1093,  703,  945,  613,  693, 1056,
          934,  613,  937, 1100,  697,  624,  613, 1017,  624, 1097,
          360,  616,  632,  721,  818,  819,  762,  739,  804,  624,
          613, 1047,  923,  602,  805,  357,  810,  975,  946,  687,
          595, 1129,  679,  906,  949, 1037,  613,  940,  926,  632,
          707,  894,  938,  695,  526,  814,  605,  614,   72,  272,
          674,  705,  722, 1080,  223,  725,  753,  613,  905,  203,
          159, 1115,  768,  672,  696,  718, 1104,  290,  942,  696,
          762,  599, 1002, 1113,  930,  613,  809,  694, 1019,  941,
         1055,  969,  939,  762,  762,  769,  608,  266, 1112,  803,
          598,  634, 1049,  591,  892, 1034,  498,  612, 1086, 1022,
          615,  355,  727,  749,  613,  682, 1023,  998,  726,  720,
          820,   46,  719,  472,  708,  455,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    ];

    protected $actionDefault = [
            3,32767,32767,32767,32767,32767,32767,32767,32767,   88,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,   88,32767,32767,32767,  489,32767,  489,  489,32767,
           88,32767,  302,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  481,32767,  439,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  302,32767,32767,
        32767,32767,32767,32767,32767,  439,32767,32767,  302,32767,
          439,32767,32767,32767,32767,  439,32767,32767,  439,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  381,32767,32767,32767,32767,32767,  439,
        32767,32767,  481,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  439,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  486,32767,32767,32767,32767,32767,  367,  364,  365,
          236,  204,  440,  252,  368,  298,  250,  301,  126,  261,
          130,  300,  485,  329,  331,  382,  330,  380,  313,  314,
          307,  384,  315,  306,  316,  305,  311,  317,  318,  319,
          322,  320,  321,  312,  360,  361,  359,  327,  328,  304,
          332,  334,  348,  351,  350,  349,  352,  304,  333,  356,
          355,  354,  353,32767,32767,32767,32767,32767,32767,32767,
           88,32767,32767,32767,32767,32767,32767,  284,  284,  284,
          284,  342,  341,32767,  242,  242,  242,  242,  285,  242,
        32767,32767,  433,  358,32767,  335,32767,  337,32767,32767,
          336,32767,32767,  308,  326,  324,32767,32767,32767,32767,
        32767,  413,   88,  405,32767,  411,32767,32767,32767,  441,
          441,32767,32767,32767,32767,32767,32767,32767,32767,   90,
        32767,32767,32767,  408,  441,  441,  441,  441,  441,  174,
          416,32767,32767,32767,32767,   88,   88,32767,32767,32767,
        32767,  496,32767,  169,32767,32767,  399,32767,  223,32767,
        32767,32767,32767,32767,  346,  338,32767,  225,32767,32767,
          339,32767,32767,32767,32767,32767,  340,32767,32767,32767,
        32767,  421,  441,  441,  442,  460,  417,32767,  443,  494,
           82,  453,   84,32767,32767,32767,32767,32767,  347,  455,
          345,32767,32767,  344,32767,  399,  189,  369,32767,32767,
        32767,  174,  434,32767,32767,32767,32767,32767,32767,32767,
          421,32767,32767,  235,32767,  174,32767,  414,32767,  482,
        32767,32767,32767,  377,32767,32767,   89,32767,  375,32767,
          374,  373,  372,32767,  371,  174,   87,32767,  297,  370,
          390,   88,32767,  244,32767,32767,32767,32767,  174,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,   82,32767,
        32767,  209,  209,32767,32767,  390,  409,32767,  176,32767,
        32767,32767,32767,32767,32767,  244,32767,32767,  244,32767,
           87,32767,  174,32767,32767,32767,  401,   84,32767,  244,
        32767,32767,32767,32767,32767,   87,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,   90,32767,32767,  174,
          187,32767,32767,32767,  478,32767,  343,32767,   87,  260,
          494,  278,32767,32767,   87,  117,   84,32767,32767,   87,
           87,32767,   60,32767,  185,32767,32767,   87,32767,  185,
          403,32767,32767,32767,32767,32767,32767,32767,32767,  441,
        32767,32767,32767,  402,   84,32767,32767,   87,32767,32767,
        32767,32767,32767,32767,32767,32767,   87,32767,32767,32767,
           88,   89,   88,   84,32767,  404,32767,  414,   88,32767,
        32767,   87,32767,   87,  189,   87,  249,  393,  127,  505,
          497,   96,  296,  273,  265,  475,  286,  190,  263,  105,
          468,  132,  471,  263,  247,  222,  132,  291,  194,  290,
          109,  132,  293,  289,  166,  288,  292,  266,  480,  191,
          283,  153,  168,  143,  220,  181,  132,  262,  280,  274,
          267,  276,  178,  132,  221,  142,  218,  224,  216,  211,
          154,  197,  180,  193,  287,  295,  200,  110,  196,  387,
          226,  132,  268,  108,  264,  104,  115,  107,  385,  179,
          294,  394,  205,  167,  210,  129,  501,  140,  128,  132,
          155,  277,  209,  132,  207,  208,  213,  214,  209,  132,
          132,  195,  206,  245,  272,  275,  386,  212,  114,  177,
          106,  122,  165,  271,  157,  279,  269,  132,  270,  219,
          170,  234,  132,  392,  391,  395,  139,   16,  116,  123,
          435,  476,  263,  257,  149,  253,  148,  111,   98,  120,
          158,  147,  101,  490,  159,  146,  145,  202,  303,  299,
          150,  388,  415,  419,  397,  396,  325,  438,  491,  152,
          418,   15,   14,   13,   49,   48,   12,   11,   10,    9,
            8,    7,    6,    5,  248,  493,  246,  357,   83,  437,
          379,  138,  131,  136,  135,  134,  137,   95,    3,  323,
          100,   17,  432,  451,  378,  309,  447,  407,  162,   93,
           92,   91,    2,  132,  163,  427,  426,   82,  425,  431,
          430,  429,  428,  182,   94,  422,  151,  456,  424,  423,
          161,  454,  399,   85,  113,   86,  458,  459,  494,    3,
          492,  436,  495,  184,  183,  259,  256,  255,  119,  421,
          103,  102,  132,  125,  175,  160,  376,  310,  389,  461,
          400,  406,  484,    1,   18,  121,  164,  474,  263,  188,
          192,  363,  362,  171,  258,  254,  112,   99,  118,  124,
          500,  237,  243,  233,  239,  241,  240,  201,  410,  466,
          464,  465,  483,  383,  420,  499,  472,  132,  231,  238,
          144,  203,  156,  198,  199,  132,  229,  141,  215,  132,
          217,  463,  502,  462,  449,  450,  452,  448,  398,  186,
          457,   97,  498,  504,  506,  503,  366,  470,   19,   52,
           36,   35,   34,   33,   32,   47,   46,   45,   44,   43,
           55,   54,   53,   51,   38,   31,   30,   29,   28,   27,
           26,   25,   24,   23,   22,   21,   80,   20,   37,   74,
          473,   50,   81,   73,   70,   71,   60,   69,   68,   66,
           67,   65,   64,   57,   56,   59,   75,   58,   62,   61,
           63,   72,   42,   41,   40,   39,   79,   78,   77,   76,
    ];

    protected $goto = [
          166,  166,  146,  148,  180,  151,  172,  151,  151,  202,
          171,  153,  167,  204,  203,  161,  211,  205,  206,  212,
          170,  210,  232,  231,  169,  250,  247,  245,  156,  208,
          200,  149,  173,  165,  138,  140,  135,  162,  144,  152,
          143,  154,  150,  174,  201,  176,  145,  167,  155,  163,
          139,  195,  197,  198,  147,  162,  141,  209,  167,  392,
          162,  190,  194,  185,  183,  162,  137,  787,  162,  383,
          388,  390,  391,  394,  192,  399,  357,  823,  348,  314,
          350,  353,  181,  175,  177,  164,  157,  159,  158,  162,
          167,  160,  140,  184,  182,  179,  142,  178,  136,  193,
          188,  186,  168,  476,  326,  320,  315,  187,  196,  189,
          191,  134,  162,  473,  199,  374,  278,  335,  376,  739,
          463,  486,  504,  444,  557,  515,  740,  430,  535,  307,
            5,  251,  261,  302,  474,  535,  371,  514,  514,  514,
          680,  628,  610,  514,  448,  336,  655,  456,  536,  542,
          631,  800,  227,  800,  800,  833,  695,  603,  546,  514,
          770,  498, 1026,  800,  725,  741,  600,  472,  276,  822,
          321,  199,  404,  381,  568, 1057,  555,  838,  770,  770,
          597,  523,  659,  661,  518,  468,  276,  276,  717,  599,
          715,  474,  643,  533,  829,  647,  565,  338,  338,  338,
          338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
          338, 1238,  439,  347,  365, 1292,  423,  349,  452,  329,
          282,  616,  806,  777,  432,  639,  292,  547,  435,  369,
          694,  687,  514,  331,  331,  779,  779,  779,  779,  779,
          779,  779,  779,  779,  779,  779,  779,  344,  344,  344,
          344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
          344,  229,  356,  809,  552,  648,  691,  407,  804,    0,
            0,    0,  333,  288,  286,  332,  254,  255,  269,  284,
          287,  285,  270,  253,  285,  509,    0,    0,  727,    0,
            0,  514,  836,  836,  578,  514,    0,    0,  807,  512,
          514,    0,  778,  358,    0,    0,  685,    0,  322,    0,
            0,    0,    0,  346,  513,  581,  351,    0,  730,    0,
            0,    0,    0,    0,  674,  502,  272,  690,  686,  684,
          514,  682,  271,  681,  678,    0,  676,  300,  467,    0,
          778,    0,  790,  814,  814,  814,  814,  789,  814,  790,
          814,  342,    0,  814,  789,  828,    0,    0,  604,    6,
          327,    0,  826,  826,    0,  790,    0,  790,  790,  500,
          579,  790,  324,    0,  778,    0,  790,  790,    0,    0,
          766,    0,    0,  584,    0,    0,  574,  228,    0,  623,
            0,  443,    0,  673,    0,  453,    0,    0,  447,  675,
            0,    0,    0,    0,  817,  669,  428,    0,  819,    0,
          776,  821,  663,  607,    0,    0,    0,    0,    0,  776,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  677,  525,    0,    0,    0,    0,    0,    0,
            0,  548,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  433,    0,  689,    0,
          803,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  607,    0,    0,    0,  651,    0,    0,    0,
            0,  679,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  570,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  679,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  679,
    ];

    protected $gotoCheck = [
            0,    0, -608,    0,    0,  134,    0,  142, -136,  -54,
            6,  -85, -266,  163,  124,  117, -103,  -38,    0,    0,
         -198,  -51,    0,   45,    0,  -73,    0,  -58,    0, -267,
          -20,    0,    0,  132,    0,    0, -444,  140,    0,    0,
            0,    0,    0,   58,    0,    0,  228,    0,    0,   60,
          -41,  -42,  150,   59,    0,    0,    0,    0,    0,    0,
          109,    0,  -36,    0,  -23, -320,    0, -237, -277, -411,
            0, -105, -135,    0,    0, -262, -306,    0,  -94,    0,
            0,   79,   20,    0,  -53,    0,  -49,  -50, -134,    0,
          137,    0,  -82,  114,    0, -270,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  120,    0,    0, -268,
            0,    0,  -52,    0,    0,    0, -197,    0, -271,    0,
            0, -148,    0,    0,    0,    0,    0,    0, -133,   34,
          145,  -16,    0,  -32,    0,    0,   64,    0,  144,  -86,
          -78,    0,    0,
    ];

    protected $gotoBase = [
            0,    0, -608,    0,    0,  134,    0,  142, -136,  -54,
            6,  -85, -266,  163,  124,  117, -103,  -38,    0,    0,
         -198,  -51,    0,   45,    0,  -73,    0,  -58,    0, -267,
          -20,    0,    0,  132,    0,    0, -444,  140,    0,    0,
            0,    0,    0,   58,    0,    0,  228,    0,    0,   60,
          -41,  -42,  150,   59,    0,    0,    0,    0,    0,    0,
          109,    0,  -36,    0,  -23, -320,    0, -237, -277, -411,
            0, -105, -135,    0,    0, -262, -306,    0,  -94,    0,
            0,   79,   20,    0,  -53,    0,  -49,  -50, -134,    0,
          137,    0,  -82,  114,    0, -270,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  120,    0,    0, -268,
            0,    0,  -52,    0,    0,    0, -197,    0, -271,    0,
            0, -148,    0,    0,    0,    0,    0,    0, -133,   34,
          145,  -16,    0,  -32,    0,    0,   64,    0,  144,  -86,
          -78,    0,    0,
    ];

    protected $gotoDefault = [
        -32768,  337,  793,    2,  742,  913,  921,  527,  446,  485,
          699,  620,  613,  608,  724,  723,  328,  431,  312,  325,
          372,  352,  386,  795,  517,  764,  531,  668,  490,  783,
          133,  519,  526,  625,    1,  722,  539,  738,-32768,  666,
          317,  520,  837,  417,  583,  830,  503,  330,  318,  688,
          528,  384,  630,  207,  483,  832,  303,  654,  652,  291,
          290,  545,  495,  360,  424,  524,  441,  544,  414,  230,
          488,  737,  799,  455,  489,  831,  281,  624,  633,  596,
          594,  402,  370,  440,  813,  442,  812,  811,  692,  541,
          714,  484,  805,  736,  478,  775,  587,  416,  397,  304,
          577,  590,    4,  653,  481,  482,  556,  238,  396,  605,
          543,  735,  537,  786,  734,  510,  403,  788,  499,  496,
          497,  621,  733,  364,  363,  345,  263,  283,  252,  362,
          491,  242,  341,  820,  761,  293,  671,  379,  792,  683,
          698,  301,  461,
    ];

    protected $ruleToNonTerminal = [
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
            7,    7,    8,    8,    9,   10,   10,   11,   11,   12,
           12,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,   17,   17,   18,   18,   18,   18,   20,   22,
           22,   16,   24,   24,   21,   26,   26,   23,   23,   25,
           25,   27,   27,   19,   28,   28,   29,   31,   32,   32,
           33,   34,   34,   36,   35,   35,   35,   35,   37,   37,
           37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
           37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
           37,   37,   13,   13,   56,   56,   59,   59,   58,   57,
           57,   50,   61,   61,   62,   62,   63,   63,   14,   15,
           15,   15,   66,   66,   66,   67,   67,   70,   70,   68,
           68,   72,   73,   73,   44,   44,   52,   52,   55,   55,
           55,   54,   74,   74,   75,   45,   45,   45,   45,   76,
           76,   77,   77,   78,   78,   42,   42,   38,   38,   79,
           40,   40,   80,   39,   39,   41,   41,   51,   51,   51,
           51,   64,   64,   83,   83,   84,   84,   86,   86,   87,
           87,   87,   85,   85,   65,   65,   88,   88,   89,   89,
           90,   90,   90,   47,   91,   91,   92,   48,   94,   94,
           95,   95,   69,   69,   96,   96,   96,   96,  101,  101,
          102,  102,  103,  103,  103,  103,  103,  104,  105,  105,
          100,  100,   97,   97,   99,   99,  107,  107,  106,  106,
          106,  106,  106,  106,   98,  108,  108,  109,  109,   49,
          110,  110,   43,   43,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
           30,   30,   30,   30,   30,   30,   30,  117,  111,  111,
          116,  116,  119,  120,  120,  121,  122,  122,  122,   71,
           71,   60,   60,   60,  112,  112,  112,  124,  124,  113,
          113,  115,  115,  115,  118,  118,  129,  129,  129,   82,
          131,  131,  131,  114,  114,  114,  114,  114,  114,  114,
          114,  114,  114,  114,  114,  114,  114,  114,  114,   46,
           46,  127,  127,  127,  123,  123,  123,  132,  132,  132,
          132,  132,  132,   53,   53,   53,   93,   93,   93,   93,
          134,  126,  126,  126,  126,  126,  126,  125,  125,  125,
          133,  133,  133,  133,   81,  135,  135,  136,  136,  136,
          136,  136,  130,  137,  137,  138,  138,  138,  138,  138,
          128,  128,  128,  128,  140,  141,  139,  139,  139,  139,
          139,  139,  139,  142,  142,  142,  142,
    ];

    protected $ruleToLength = [
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    1,    1,    0,    1,    0,
            1,    1,    1,    1,    1,    3,    5,    4,    3,    4,
            2,    3,    1,    1,    7,    8,    6,    7,    2,    3,
            1,    2,    3,    1,    2,    3,    1,    1,    3,    1,
            2,    1,    2,    2,    3,    1,    3,    2,    3,    1,
            3,    2,    0,    1,    1,    1,    1,    1,    3,    7,
           10,    5,    7,    9,    5,    3,    3,    3,    3,    3,
            3,    1,    2,    5,    7,    9,    5,    6,    3,    3,
            2,    1,    1,    1,    0,    2,    1,    3,    8,    0,
            4,    2,    1,    3,    0,    1,    0,    1,   10,    7,
            6,    5,    1,    2,    2,    0,    2,    0,    2,    0,
            2,    2,    1,    3,    1,    4,    1,    4,    1,    1,
            4,    2,    1,    3,    3,    3,    4,    4,    5,    0,
            2,    4,    3,    1,    1,    1,    4,    0,    2,    5,
            0,    2,    6,    0,    2,    0,    3,    1,    2,    1,
            1,    2,    0,    1,    3,    4,    6,    1,    2,    1,
            1,    1,    0,    1,    0,    2,    2,    4,    1,    3,
            1,    2,    2,    2,    3,    1,    1,    2,    3,    1,
            1,    3,    2,    0,    3,    4,    9,    3,    1,    3,
            0,    2,    4,    5,    4,    4,    4,    3,    1,    1,
            1,    3,    1,    1,    0,    1,    1,    2,    1,    1,
            1,    1,    1,    1,    2,    1,    3,    1,    3,    2,
            3,    1,    0,    1,    1,    3,    3,    3,    4,    1,
            2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
            4,    3,    4,    4,    2,    2,    4,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    1,    3,
            2,    1,    2,    4,    2,   10,   11,    7,    3,    2,
            0,    4,    2,    1,    3,    2,    2,    2,    4,    1,
            1,    1,    2,    3,    1,    1,    1,    1,    1,    0,
            3,    0,    1,    1,    0,    1,    1,    3,    3,    3,
            4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    3,    2,    3,    3,    0,
            1,    1,    3,    1,    1,    3,    1,    1,    4,    4,
            4,    1,    4,    1,    1,    3,    1,    4,    2,    2,
            3,    1,    4,    4,    3,    3,    3,    1,    3,    1,
            1,    3,    1,    1,    4,    3,    1,    1,    1,    3,
            3,    0,    1,    3,    1,    3,    1,    4,    2,    0,
            2,    2,    1,    2,    1,    1,    1,    4,    3,    3,
            3,    6,    3,    1,    1,    2,    1,
    ];

   protected $productions = [
        '$start : start',
        'start : top_statement_list',
        'top_statement_list_ex : top_statement_list_ex top_statement',
        'top_statement_list_ex : ',
        'top_statement_list : top_statement_list_ex',
        'reserved_non_modifiers : T_INCLUDE',
        'reserved_non_modifiers : T_INCLUDE_ONCE',
        'reserved_non_modifiers : T_EVAL',
        'reserved_non_modifiers : T_REQUIRE',
        'reserved_non_modifiers : T_REQUIRE_ONCE',
        'reserved_non_modifiers : T_LOGICAL_OR',
        'reserved_non_modifiers : T_LOGICAL_XOR',
        'reserved_non_modifiers : T_LOGICAL_AND',
        'reserved_non_modifiers : T_INSTANCEOF',
        'reserved_non_modifiers : T_NEW',
        'reserved_non_modifiers : T_CLONE',
        'reserved_non_modifiers : T_EXIT',
        'reserved_non_modifiers : T_IF',
        'reserved_non_modifiers : T_ELSEIF',
        'reserved_non_modifiers : T_ELSE',
        'reserved_non_modifiers : T_ENDIF',
        'reserved_non_modifiers : T_ECHO',
        'reserved_non_modifiers : T_DO',
        'reserved_non_modifiers : T_WHILE',
        'reserved_non_modifiers : T_ENDWHILE',
        'reserved_non_modifiers : T_FOR',
        'reserved_non_modifiers : T_ENDFOR',
        'reserved_non_modifiers : T_FOREACH',
        'reserved_non_modifiers : T_ENDFOREACH',
        'reserved_non_modifiers : T_DECLARE',
        'reserved_non_modifiers : T_ENDDECLARE',
        'reserved_non_modifiers : T_AS',
        'reserved_non_modifiers : T_TRY',
        'reserved_non_modifiers : T_CATCH',
        'reserved_non_modifiers : T_FINALLY',
        'reserved_non_modifiers : T_THROW',
        'reserved_non_modifiers : T_USE',
        'reserved_non_modifiers : T_INSTEADOF',
        'reserved_non_modifiers : T_GLOBAL',
        'reserved_non_modifiers : T_VAR',
        'reserved_non_modifiers : T_UNSET',
        'reserved_non_modifiers : T_ISSET',
        'reserved_non_modifiers : T_EMPTY',
        'reserved_non_modifiers : T_CONTINUE',
        'reserved_non_modifiers : T_GOTO',
        'reserved_non_modifiers : T_FUNCTION',
        'reserved_non_modifiers : T_CONST',
        'reserved_non_modifiers : T_RETURN',
        'reserved_non_modifiers : T_PRINT',
        'reserved_non_modifiers : T_YIELD',
        'reserved_non_modifiers : T_LIST',
        'reserved_non_modifiers : T_SWITCH',
        'reserved_non_modifiers : T_ENDSWITCH',
        'reserved_non_modifiers : T_CASE',
        'reserved_non_modifiers : T_DEFAULT',
        'reserved_non_modifiers : T_BREAK',
        'reserved_non_modifiers : T_ARRAY',
        'reserved_non_modifiers : T_CALLABLE',
        'reserved_non_modifiers : T_EXTENDS',
        'reserved_non_modifiers : T_IMPLEMENTS',
        'reserved_non_modifiers : T_NAMESPACE',
        'reserved_non_modifiers : T_TRAIT',
        'reserved_non_modifiers : T_INTERFACE',
        'reserved_non_modifiers : T_CLASS',
        'reserved_non_modifiers : T_CLASS_C',
        'reserved_non_modifiers : T_TRAIT_C',
        'reserved_non_modifiers : T_FUNC_C',
        'reserved_non_modifiers : T_METHOD_C',
        'reserved_non_modifiers : T_LINE',
        'reserved_non_modifiers : T_FILE',
        'reserved_non_modifiers : T_DIR',
        'reserved_non_modifiers : T_NS_C',
        'reserved_non_modifiers : T_HALT_COMPILER',
        'semi_reserved : reserved_non_modifiers',
        'semi_reserved : T_STATIC',
        'semi_reserved : T_ABSTRACT',
        'semi_reserved : T_FINAL',
        'semi_reserved : T_PRIVATE',
        'semi_reserved : T_PROTECTED',
        'semi_reserved : T_PUBLIC',
        'identifier : T_STRING',
        'identifier : semi_reserved',
        'namespace_name_parts : T_STRING',
        'namespace_name_parts : namespace_name_parts T_NS_SEPARATOR T_STRING',
        'namespace_name : namespace_name_parts',
        'semi : \';\'',
        'semi : error',
        'no_comma : ',
        'no_comma : \',\'',
        'optional_comma : ',
        'optional_comma : \',\'',
        'top_statement : statement',
        'top_statement : function_declaration_statement',
        'top_statement : class_declaration_statement',
        'top_statement : T_HALT_COMPILER',
        'top_statement : T_NAMESPACE namespace_name semi',
        'top_statement : T_NAMESPACE namespace_name \'{\' top_statement_list \'}\'',
        'top_statement : T_NAMESPACE \'{\' top_statement_list \'}\'',
        'top_statement : T_USE use_declarations semi',
        'top_statement : T_USE use_type use_declarations semi',
        'top_statement : group_use_declaration semi',
        'top_statement : T_CONST constant_declaration_list semi',
        'use_type : T_FUNCTION',
        'use_type : T_CONST',
        'group_use_declaration : T_USE use_type namespace_name_parts T_NS_SEPARATOR \'{\' unprefixed_use_declarations \'}\'',
        'group_use_declaration : T_USE use_type T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR \'{\' unprefixed_use_declarations \'}\'',
        'group_use_declaration : T_USE namespace_name_parts T_NS_SEPARATOR \'{\' inline_use_declarations \'}\'',
        'group_use_declaration : T_USE T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR \'{\' inline_use_declarations \'}\'',
        'unprefixed_use_declarations : non_empty_unprefixed_use_declarations optional_comma',
        'non_empty_unprefixed_use_declarations : non_empty_unprefixed_use_declarations \',\' unprefixed_use_declaration',
        'non_empty_unprefixed_use_declarations : unprefixed_use_declaration',
        'use_declarations : non_empty_use_declarations no_comma',
        'non_empty_use_declarations : non_empty_use_declarations \',\' use_declaration',
        'non_empty_use_declarations : use_declaration',
        'inline_use_declarations : non_empty_inline_use_declarations optional_comma',
        'non_empty_inline_use_declarations : non_empty_inline_use_declarations \',\' inline_use_declaration',
        'non_empty_inline_use_declarations : inline_use_declaration',
        'unprefixed_use_declaration : namespace_name',
        'unprefixed_use_declaration : namespace_name T_AS T_STRING',
        'use_declaration : unprefixed_use_declaration',
        'use_declaration : T_NS_SEPARATOR unprefixed_use_declaration',
        'inline_use_declaration : unprefixed_use_declaration',
        'inline_use_declaration : use_type unprefixed_use_declaration',
        'constant_declaration_list : non_empty_constant_declaration_list no_comma',
        'non_empty_constant_declaration_list : non_empty_constant_declaration_list \',\' constant_declaration',
        'non_empty_constant_declaration_list : constant_declaration',
        'constant_declaration : T_STRING \'=\' expr',
        'class_const_list : non_empty_class_const_list no_comma',
        'non_empty_class_const_list : non_empty_class_const_list \',\' class_const',
        'non_empty_class_const_list : class_const',
        'class_const : identifier \'=\' expr',
        'inner_statement_list_ex : inner_statement_list_ex inner_statement',
        'inner_statement_list_ex : ',
        'inner_statement_list : inner_statement_list_ex',
        'inner_statement : statement',
        'inner_statement : function_declaration_statement',
        'inner_statement : class_declaration_statement',
        'inner_statement : T_HALT_COMPILER',
        'non_empty_statement : \'{\' inner_statement_list \'}\'',
        'non_empty_statement : T_IF \'(\' expr \')\' statement elseif_list else_single',
        'non_empty_statement : T_IF \'(\' expr \')\' \':\' inner_statement_list new_elseif_list new_else_single T_ENDIF \';\'',
        'non_empty_statement : T_WHILE \'(\' expr \')\' while_statement',
        'non_empty_statement : T_DO statement T_WHILE \'(\' expr \')\' \';\'',
        'non_empty_statement : T_FOR \'(\' for_expr \';\' for_expr \';\' for_expr \')\' for_statement',
        'non_empty_statement : T_SWITCH \'(\' expr \')\' switch_case_list',
        'non_empty_statement : T_BREAK optional_expr semi',
        'non_empty_statement : T_CONTINUE optional_expr semi',
        'non_empty_statement : T_RETURN optional_expr semi',
        'non_empty_statement : T_GLOBAL global_var_list semi',
        'non_empty_statement : T_STATIC static_var_list semi',
        'non_empty_statement : T_ECHO expr_list semi',
        'non_empty_statement : T_INLINE_HTML',
        'non_empty_statement : expr semi',
        'non_empty_statement : T_UNSET \'(\' variables_list \')\' semi',
        'non_empty_statement : T_FOREACH \'(\' expr T_AS foreach_variable \')\' foreach_statement',
        'non_empty_statement : T_FOREACH \'(\' expr T_AS variable T_DOUBLE_ARROW foreach_variable \')\' foreach_statement',
        'non_empty_statement : T_DECLARE \'(\' declare_list \')\' declare_statement',
        'non_empty_statement : T_TRY \'{\' inner_statement_list \'}\' catches optional_finally',
        'non_empty_statement : T_THROW expr semi',
        'non_empty_statement : T_GOTO T_STRING semi',
        'non_empty_statement : T_STRING \':\'',
        'non_empty_statement : error',
        'statement : non_empty_statement',
        'statement : \';\'',
        'catches : ',
        'catches : catches catch',
        'name_union : name',
        'name_union : name_union \'|\' name',
        'catch : T_CATCH \'(\' name_union T_VARIABLE \')\' \'{\' inner_statement_list \'}\'',
        'optional_finally : ',
        'optional_finally : T_FINALLY \'{\' inner_statement_list \'}\'',
        'variables_list : non_empty_variables_list no_comma',
        'non_empty_variables_list : variable',
        'non_empty_variables_list : non_empty_variables_list \',\' variable',
        'optional_ref : ',
        'optional_ref : \'&\'',
        'optional_ellipsis : ',
        'optional_ellipsis : T_ELLIPSIS',
        'function_declaration_statement : T_FUNCTION optional_ref T_STRING \'(\' parameter_list \')\' optional_return_type \'{\' inner_statement_list \'}\'',
        'class_declaration_statement : class_entry_type T_STRING extends_from implements_list \'{\' class_statement_list \'}\'',
        'class_declaration_statement : T_INTERFACE T_STRING interface_extends_list \'{\' class_statement_list \'}\'',
        'class_declaration_statement : T_TRAIT T_STRING \'{\' class_statement_list \'}\'',
        'class_entry_type : T_CLASS',
        'class_entry_type : T_ABSTRACT T_CLASS',
        'class_entry_type : T_FINAL T_CLASS',
        'extends_from : ',
        'extends_from : T_EXTENDS class_name',
        'interface_extends_list : ',
        'interface_extends_list : T_EXTENDS class_name_list',
        'implements_list : ',
        'implements_list : T_IMPLEMENTS class_name_list',
        'class_name_list : non_empty_class_name_list no_comma',
        'non_empty_class_name_list : class_name',
        'non_empty_class_name_list : non_empty_class_name_list \',\' class_name',
        'for_statement : statement',
        'for_statement : \':\' inner_statement_list T_ENDFOR \';\'',
        'foreach_statement : statement',
        'foreach_statement : \':\' inner_statement_list T_ENDFOREACH \';\'',
        'declare_statement : non_empty_statement',
        'declare_statement : \';\'',
        'declare_statement : \':\' inner_statement_list T_ENDDECLARE \';\'',
        'declare_list : non_empty_declare_list no_comma',
        'non_empty_declare_list : declare_list_element',
        'non_empty_declare_list : non_empty_declare_list \',\' declare_list_element',
        'declare_list_element : T_STRING \'=\' expr',
        'switch_case_list : \'{\' case_list \'}\'',
        'switch_case_list : \'{\' \';\' case_list \'}\'',
        'switch_case_list : \':\' case_list T_ENDSWITCH \';\'',
        'switch_case_list : \':\' \';\' case_list T_ENDSWITCH \';\'',
        'case_list : ',
        'case_list : case_list case',
        'case : T_CASE expr case_separator inner_statement_list',
        'case : T_DEFAULT case_separator inner_statement_list',
        'case_separator : \':\'',
        'case_separator : \';\'',
        'while_statement : statement',
        'while_statement : \':\' inner_statement_list T_ENDWHILE \';\'',
        'elseif_list : ',
        'elseif_list : elseif_list elseif',
        'elseif : T_ELSEIF \'(\' expr \')\' statement',
        'new_elseif_list : ',
        'new_elseif_list : new_elseif_list new_elseif',
        'new_elseif : T_ELSEIF \'(\' expr \')\' \':\' inner_statement_list',
        'else_single : ',
        'else_single : T_ELSE statement',
        'new_else_single : ',
        'new_else_single : T_ELSE \':\' inner_statement_list',
        'foreach_variable : variable',
        'foreach_variable : \'&\' variable',
        'foreach_variable : list_expr',
        'foreach_variable : array_short_syntax',
        'parameter_list : non_empty_parameter_list no_comma',
        'parameter_list : ',
        'non_empty_parameter_list : parameter',
        'non_empty_parameter_list : non_empty_parameter_list \',\' parameter',
        'parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE',
        'parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE \'=\' expr',
        'type_expr : type',
        'type_expr : \'?\' type',
        'type : name',
        'type : T_ARRAY',
        'type : T_CALLABLE',
        'optional_param_type : ',
        'optional_param_type : type_expr',
        'optional_return_type : ',
        'optional_return_type : \':\' type_expr',
        'argument_list : \'(\' \')\'',
        'argument_list : \'(\' non_empty_argument_list no_comma \')\'',
        'non_empty_argument_list : argument',
        'non_empty_argument_list : non_empty_argument_list \',\' argument',
        'argument : expr',
        'argument : \'&\' variable',
        'argument : T_ELLIPSIS expr',
        'global_var_list : non_empty_global_var_list no_comma',
        'non_empty_global_var_list : non_empty_global_var_list \',\' global_var',
        'non_empty_global_var_list : global_var',
        'global_var : simple_variable',
        'static_var_list : non_empty_static_var_list no_comma',
        'non_empty_static_var_list : non_empty_static_var_list \',\' static_var',
        'non_empty_static_var_list : static_var',
        'static_var : T_VARIABLE',
        'static_var : T_VARIABLE \'=\' expr',
        'class_statement_list : class_statement_list class_statement',
        'class_statement_list : ',
        'class_statement : variable_modifiers property_declaration_list \';\'',
        'class_statement : method_modifiers T_CONST class_const_list \';\'',
        'class_statement : method_modifiers T_FUNCTION optional_ref identifier \'(\' parameter_list \')\' optional_return_type method_body',
        'class_statement : T_USE class_name_list trait_adaptations',
        'trait_adaptations : \';\'',
        'trait_adaptations : \'{\' trait_adaptation_list \'}\'',
        'trait_adaptation_list : ',
        'trait_adaptation_list : trait_adaptation_list trait_adaptation',
        'trait_adaptation : trait_method_reference_fully_qualified T_INSTEADOF class_name_list \';\'',
        'trait_adaptation : trait_method_reference T_AS member_modifier identifier \';\'',
        'trait_adaptation : trait_method_reference T_AS member_modifier \';\'',
        'trait_adaptation : trait_method_reference T_AS T_STRING \';\'',
        'trait_adaptation : trait_method_reference T_AS reserved_non_modifiers \';\'',
        'trait_method_reference_fully_qualified : name T_PAAMAYIM_NEKUDOTAYIM identifier',
        'trait_method_reference : trait_method_reference_fully_qualified',
        'trait_method_reference : identifier',
        'method_body : \';\'',
        'method_body : \'{\' inner_statement_list \'}\'',
        'variable_modifiers : non_empty_member_modifiers',
        'variable_modifiers : T_VAR',
        'method_modifiers : ',
        'method_modifiers : non_empty_member_modifiers',
        'non_empty_member_modifiers : member_modifier',
        'non_empty_member_modifiers : non_empty_member_modifiers member_modifier',
        'member_modifier : T_PUBLIC',
        'member_modifier : T_PROTECTED',
        'member_modifier : T_PRIVATE',
        'member_modifier : T_STATIC',
        'member_modifier : T_ABSTRACT',
        'member_modifier : T_FINAL',
        'property_declaration_list : non_empty_property_declaration_list no_comma',
        'non_empty_property_declaration_list : property_declaration',
        'non_empty_property_declaration_list : non_empty_property_declaration_list \',\' property_declaration',
        'property_declaration : T_VARIABLE',
        'property_declaration : T_VARIABLE \'=\' expr',
        'expr_list : non_empty_expr_list no_comma',
        'non_empty_expr_list : non_empty_expr_list \',\' expr',
        'non_empty_expr_list : expr',
        'for_expr : ',
        'for_expr : expr_list',
        'expr : variable',
        'expr : list_expr \'=\' expr',
        'expr : array_short_syntax \'=\' expr',
        'expr : variable \'=\' expr',
        'expr : variable \'=\' \'&\' variable',
        'expr : new_expr',
        'expr : T_CLONE expr',
        'expr : variable T_PLUS_EQUAL expr',
        'expr : variable T_MINUS_EQUAL expr',
        'expr : variable T_MUL_EQUAL expr',
        'expr : variable T_DIV_EQUAL expr',
        'expr : variable T_CONCAT_EQUAL expr',
        'expr : variable T_MOD_EQUAL expr',
        'expr : variable T_AND_EQUAL expr',
        'expr : variable T_OR_EQUAL expr',
        'expr : variable T_XOR_EQUAL expr',
        'expr : variable T_SL_EQUAL expr',
        'expr : variable T_SR_EQUAL expr',
        'expr : variable T_POW_EQUAL expr',
        'expr : variable T_INC',
        'expr : T_INC variable',
        'expr : variable T_DEC',
        'expr : T_DEC variable',
        'expr : expr T_BOOLEAN_OR expr',
        'expr : expr T_BOOLEAN_AND expr',
        'expr : expr T_LOGICAL_OR expr',
        'expr : expr T_LOGICAL_AND expr',
        'expr : expr T_LOGICAL_XOR expr',
        'expr : expr \'|\' expr',
        'expr : expr \'&\' expr',
        'expr : expr \'^\' expr',
        'expr : expr \'.\' expr',
        'expr : expr \'+\' expr',
        'expr : expr \'-\' expr',
        'expr : expr \'*\' expr',
        'expr : expr \'/\' expr',
        'expr : expr \'%\' expr',
        'expr : expr T_SL expr',
        'expr : expr T_SR expr',
        'expr : expr T_POW expr',
        'expr : \'+\' expr',
        'expr : \'-\' expr',
        'expr : \'!\' expr',
        'expr : \'~\' expr',
        'expr : expr T_IS_IDENTICAL expr',
        'expr : expr T_IS_NOT_IDENTICAL expr',
        'expr : expr T_IS_EQUAL expr',
        'expr : expr T_IS_NOT_EQUAL expr',
        'expr : expr T_SPACESHIP expr',
        'expr : expr \'<\' expr',
        'expr : expr T_IS_SMALLER_OR_EQUAL expr',
        'expr : expr \'>\' expr',
        'expr : expr T_IS_GREATER_OR_EQUAL expr',
        'expr : expr T_INSTANCEOF class_name_reference',
        'expr : \'(\' expr \')\'',
        'expr : expr \'?\' expr \':\' expr',
        'expr : expr \'?\' \':\' expr',
        'expr : expr T_COALESCE expr',
        'expr : T_ISSET \'(\' variables_list \')\'',
        'expr : T_EMPTY \'(\' expr \')\'',
        'expr : T_INCLUDE expr',
        'expr : T_INCLUDE_ONCE expr',
        'expr : T_EVAL \'(\' expr \')\'',
        'expr : T_REQUIRE expr',
        'expr : T_REQUIRE_ONCE expr',
        'expr : T_INT_CAST expr',
        'expr : T_DOUBLE_CAST expr',
        'expr : T_STRING_CAST expr',
        'expr : T_ARRAY_CAST expr',
        'expr : T_OBJECT_CAST expr',
        'expr : T_BOOL_CAST expr',
        'expr : T_UNSET_CAST expr',
        'expr : T_EXIT exit_expr',
        'expr : \'@\' expr',
        'expr : scalar',
        'expr : \'`\' backticks_expr \'`\'',
        'expr : T_PRINT expr',
        'expr : T_YIELD',
        'expr : T_YIELD expr',
        'expr : T_YIELD expr T_DOUBLE_ARROW expr',
        'expr : T_YIELD_FROM expr',
        'expr : T_FUNCTION optional_ref \'(\' parameter_list \')\' lexical_vars optional_return_type \'{\' inner_statement_list \'}\'',
        'expr : T_STATIC T_FUNCTION optional_ref \'(\' parameter_list \')\' lexical_vars optional_return_type \'{\' inner_statement_list \'}\'',
        'anonymous_class : T_CLASS ctor_arguments extends_from implements_list \'{\' class_statement_list \'}\'',
        'new_expr : T_NEW class_name_reference ctor_arguments',
        'new_expr : T_NEW anonymous_class',
        'lexical_vars : ',
        'lexical_vars : T_USE \'(\' lexical_var_list \')\'',
        'lexical_var_list : non_empty_lexical_var_list no_comma',
        'non_empty_lexical_var_list : lexical_var',
        'non_empty_lexical_var_list : non_empty_lexical_var_list \',\' lexical_var',
        'lexical_var : optional_ref T_VARIABLE',
        'function_call : name argument_list',
        'function_call : callable_expr argument_list',
        'function_call : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM member_name argument_list',
        'class_name : T_STATIC',
        'class_name : name',
        'name : namespace_name_parts',
        'name : T_NS_SEPARATOR namespace_name_parts',
        'name : T_NAMESPACE T_NS_SEPARATOR namespace_name_parts',
        'class_name_reference : class_name',
        'class_name_reference : new_variable',
        'class_name_reference : error',
        'class_name_or_var : class_name',
        'class_name_or_var : dereferencable',
        'exit_expr : ',
        'exit_expr : \'(\' optional_expr \')\'',
        'backticks_expr : ',
        'backticks_expr : T_ENCAPSED_AND_WHITESPACE',
        'backticks_expr : encaps_list',
        'ctor_arguments : ',
        'ctor_arguments : argument_list',
        'constant : name',
        'constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM identifier',
        'constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM error',
        'array_short_syntax : \'[\' array_pair_list \']\'',
        'dereferencable_scalar : T_ARRAY \'(\' array_pair_list \')\'',
        'dereferencable_scalar : array_short_syntax',
        'dereferencable_scalar : T_CONSTANT_ENCAPSED_STRING',
        'scalar : T_LNUMBER',
        'scalar : T_DNUMBER',
        'scalar : T_LINE',
        'scalar : T_FILE',
        'scalar : T_DIR',
        'scalar : T_CLASS_C',
        'scalar : T_TRAIT_C',
        'scalar : T_METHOD_C',
        'scalar : T_FUNC_C',
        'scalar : T_NS_C',
        'scalar : dereferencable_scalar',
        'scalar : constant',
        'scalar : T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC',
        'scalar : T_START_HEREDOC T_END_HEREDOC',
        'scalar : \'"\' encaps_list \'"\'',
        'scalar : T_START_HEREDOC encaps_list T_END_HEREDOC',
        'optional_expr : ',
        'optional_expr : expr',
        'dereferencable : variable',
        'dereferencable : \'(\' expr \')\'',
        'dereferencable : dereferencable_scalar',
        'callable_expr : callable_variable',
        'callable_expr : \'(\' expr \')\'',
        'callable_expr : dereferencable_scalar',
        'callable_variable : simple_variable',
        'callable_variable : dereferencable \'[\' optional_expr \']\'',
        'callable_variable : constant \'[\' optional_expr \']\'',
        'callable_variable : dereferencable \'{\' expr \'}\'',
        'callable_variable : function_call',
        'callable_variable : dereferencable T_OBJECT_OPERATOR property_name argument_list',
        'variable : callable_variable',
        'variable : static_member',
        'variable : dereferencable T_OBJECT_OPERATOR property_name',
        'simple_variable : T_VARIABLE',
        'simple_variable : \'$\' \'{\' expr \'}\'',
        'simple_variable : \'$\' simple_variable',
        'simple_variable : \'$\' error',
        'static_member : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM simple_variable',
        'new_variable : simple_variable',
        'new_variable : new_variable \'[\' optional_expr \']\'',
        'new_variable : new_variable \'{\' expr \'}\'',
        'new_variable : new_variable T_OBJECT_OPERATOR property_name',
        'new_variable : class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable',
        'new_variable : new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable',
        'member_name : identifier',
        'member_name : \'{\' expr \'}\'',
        'member_name : simple_variable',
        'property_name : T_STRING',
        'property_name : \'{\' expr \'}\'',
        'property_name : simple_variable',
        'property_name : error',
        'list_expr : T_LIST \'(\' list_expr_elements \')\'',
        'list_expr_elements : list_expr_elements \',\' list_expr_element',
        'list_expr_elements : list_expr_element',
        'list_expr_element : variable',
        'list_expr_element : list_expr',
        'list_expr_element : expr T_DOUBLE_ARROW variable',
        'list_expr_element : expr T_DOUBLE_ARROW list_expr',
        'list_expr_element : ',
        'array_pair_list : inner_array_pair_list',
        'inner_array_pair_list : inner_array_pair_list \',\' array_pair',
        'inner_array_pair_list : array_pair',
        'array_pair : expr T_DOUBLE_ARROW expr',
        'array_pair : expr',
        'array_pair : expr T_DOUBLE_ARROW \'&\' variable',
        'array_pair : \'&\' variable',
        'array_pair : ',
        'encaps_list : encaps_list encaps_var',
        'encaps_list : encaps_list encaps_string_part',
        'encaps_list : encaps_var',
        'encaps_list : encaps_string_part encaps_var',
        'encaps_string_part : T_ENCAPSED_AND_WHITESPACE',
        'encaps_base_var : T_VARIABLE',
        'encaps_var : encaps_base_var',
        'encaps_var : encaps_base_var \'[\' encaps_var_offset \']\'',
        'encaps_var : encaps_base_var T_OBJECT_OPERATOR T_STRING',
        'encaps_var : T_DOLLAR_OPEN_CURLY_BRACES expr \'}\'',
        'encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME \'}\'',
        'encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME \'[\' expr \']\' \'}\'',
        'encaps_var : T_CURLY_OPEN variable \'}\'',
        'encaps_var_offset : T_STRING',
        'encaps_var_offset : T_NUM_STRING',
        'encaps_var_offset : \'-\' T_NUM_STRING',
        'encaps_var_offset : T_VARIABLE',
    ];
    protected function initReduceCallbacks() {
        $this->reduceCallbacks = [
            0 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            1 => function($stackPos) {
                $this->semValue = $this->handleNamespaces($stackPos-(1-1));
            },
            2 => function($stackPos) {
                pushNormalizing($stackPos-(2-1), $stackPos-(2-2));
            },
            3 => function($stackPos) {
                init();
            },
            4 => function($stackPos) {
                makeNop($nop, $this->lookaheadStartAttributes);
            if ($nop !== null) { $stackPos-(1-1)[] = $nop; } $this->semValue = $stackPos-(1-1);
            },
            5 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            6 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            7 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            8 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            9 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            10 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            11 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            12 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            13 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            14 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            15 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            16 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            17 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            18 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            19 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            20 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            21 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            22 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            23 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            24 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            25 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            26 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            27 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            28 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            29 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            30 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            31 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            32 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            33 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            34 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            35 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            36 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            37 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            38 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            39 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            40 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            41 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            42 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            43 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            44 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            45 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            46 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            47 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            48 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            49 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            50 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            51 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            52 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            53 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            54 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            55 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            56 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            57 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            58 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            59 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            60 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            61 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            62 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            63 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            64 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            65 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            66 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            67 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            68 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            69 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            70 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            71 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            72 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            73 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            74 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            75 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            76 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            77 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            78 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            79 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            80 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            81 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            82 => function($stackPos) {
                init($stackPos-(1-1));
            },
            83 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            84 => function($stackPos) {
                $this->semValue = Name[$stackPos-(1-1)];
            },
            85 => function($stackPos) {
                /* nothing */
            },
            86 => function($stackPos) {
                /* nothing */
            },
            87 => function($stackPos) {
                /* nothing */
            },
            88 => function($stackPos) {
                $this->emitError(new Error('A trailing comma is not allowed here', attributes()));
            },
            89 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            90 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            91 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            92 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            93 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            94 => function($stackPos) {
                $this->semValue = Stmt\HaltCompiler[$this->lexer->handleHaltCompiler()];
            },
            95 => function($stackPos) {
                $this->semValue = Stmt\Namespace_[$stackPos-(3-2), null]; $this->checkNamespace($this->semValue);
            },
            96 => function($stackPos) {
                $this->semValue = Stmt\Namespace_[$stackPos-(5-2), $stackPos-(5-4)]; $this->checkNamespace($this->semValue);
            },
            97 => function($stackPos) {
                $this->semValue = Stmt\Namespace_[null, $stackPos-(4-3)]; $this->checkNamespace($this->semValue);
            },
            98 => function($stackPos) {
                $this->semValue = Stmt\Use_[$stackPos-(3-2), Stmt\Use_::TYPE_NORMAL];
            },
            99 => function($stackPos) {
                $this->semValue = Stmt\Use_[$stackPos-(4-3), $stackPos-(4-2)];
            },
            100 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            101 => function($stackPos) {
                $this->semValue = Stmt\Const_[$stackPos-(3-2)];
            },
            102 => function($stackPos) {
                $this->semValue = Stmt\Use_::TYPE_FUNCTION;
            },
            103 => function($stackPos) {
                $this->semValue = Stmt\Use_::TYPE_CONSTANT;
            },
            104 => function($stackPos) {
                $this->semValue = Stmt\GroupUse[new Name($stackPos-(7-3), stackAttributes(#3)), $stackPos-(7-6), $stackPos-(7-2)];
            },
            105 => function($stackPos) {
                $this->semValue = Stmt\GroupUse[new Name($stackPos-(8-4), stackAttributes(#4)), $stackPos-(8-7), $stackPos-(8-2)];
            },
            106 => function($stackPos) {
                $this->semValue = Stmt\GroupUse[new Name($stackPos-(6-2), stackAttributes(#2)), $stackPos-(6-5), Stmt\Use_::TYPE_UNKNOWN];
            },
            107 => function($stackPos) {
                $this->semValue = Stmt\GroupUse[new Name($stackPos-(7-3), stackAttributes(#3)), $stackPos-(7-6), Stmt\Use_::TYPE_UNKNOWN];
            },
            108 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            109 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            110 => function($stackPos) {
                init($stackPos-(1-1));
            },
            111 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            112 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            113 => function($stackPos) {
                init($stackPos-(1-1));
            },
            114 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            115 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            116 => function($stackPos) {
                init($stackPos-(1-1));
            },
            117 => function($stackPos) {
                $this->semValue = Stmt\UseUse[$stackPos-(1-1), null, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($this->semValue, #1);
            },
            118 => function($stackPos) {
                $this->semValue = Stmt\UseUse[$stackPos-(3-1), $stackPos-(3-3), Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($this->semValue, #3);
            },
            119 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            120 => function($stackPos) {
                $this->semValue = $stackPos-(2-2);
            },
            121 => function($stackPos) {
                $this->semValue = $stackPos-(1-1); $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
            },
            122 => function($stackPos) {
                $this->semValue = $stackPos-(2-2); $this->semValue->type = $stackPos-(2-1);
            },
            123 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            124 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            125 => function($stackPos) {
                init($stackPos-(1-1));
            },
            126 => function($stackPos) {
                $this->semValue = Node\Const_[$stackPos-(3-1), $stackPos-(3-3)];
            },
            127 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            128 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            129 => function($stackPos) {
                init($stackPos-(1-1));
            },
            130 => function($stackPos) {
                $this->semValue = Node\Const_[$stackPos-(3-1), $stackPos-(3-3)];
            },
            131 => function($stackPos) {
                pushNormalizing($stackPos-(2-1), $stackPos-(2-2));
            },
            132 => function($stackPos) {
                init();
            },
            133 => function($stackPos) {
                makeNop($nop, $this->lookaheadStartAttributes);
            if ($nop !== null) { $stackPos-(1-1)[] = $nop; } $this->semValue = $stackPos-(1-1);
            },
            134 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            135 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            136 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            137 => function($stackPos) {
                throw new Error('__HALT_COMPILER() can only be used from the outermost scope', attributes());
            },
            138 => function($stackPos) {
                $this->semValue = $stackPos-(3-2); prependLeadingComments($this->semValue);
            },
            139 => function($stackPos) {
                $this->semValue = Stmt\If_[$stackPos-(7-3), ['stmts' => toArray($stackPos-(7-5)), 'elseifs' => $stackPos-(7-6), 'else' => $stackPos-(7-7)]];
            },
            140 => function($stackPos) {
                $this->semValue = Stmt\If_[$stackPos-(10-3), ['stmts' => $stackPos-(10-6), 'elseifs' => $stackPos-(10-7), 'else' => $stackPos-(10-8)]];
            },
            141 => function($stackPos) {
                $this->semValue = Stmt\While_[$stackPos-(5-3), $stackPos-(5-5)];
            },
            142 => function($stackPos) {
                $this->semValue = Stmt\Do_   [$stackPos-(7-5), toArray($stackPos-(7-2))];
            },
            143 => function($stackPos) {
                $this->semValue = Stmt\For_[['init' => $stackPos-(9-3), 'cond' => $stackPos-(9-5), 'loop' => $stackPos-(9-7), 'stmts' => $stackPos-(9-9)]];
            },
            144 => function($stackPos) {
                $this->semValue = Stmt\Switch_[$stackPos-(5-3), $stackPos-(5-5)];
            },
            145 => function($stackPos) {
                $this->semValue = Stmt\Break_[$stackPos-(3-2)];
            },
            146 => function($stackPos) {
                $this->semValue = Stmt\Continue_[$stackPos-(3-2)];
            },
            147 => function($stackPos) {
                $this->semValue = Stmt\Return_[$stackPos-(3-2)];
            },
            148 => function($stackPos) {
                $this->semValue = Stmt\Global_[$stackPos-(3-2)];
            },
            149 => function($stackPos) {
                $this->semValue = Stmt\Static_[$stackPos-(3-2)];
            },
            150 => function($stackPos) {
                $this->semValue = Stmt\Echo_[$stackPos-(3-2)];
            },
            151 => function($stackPos) {
                $this->semValue = Stmt\InlineHTML[$stackPos-(1-1)];
            },
            152 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            153 => function($stackPos) {
                $this->semValue = Stmt\Unset_[$stackPos-(5-3)];
            },
            154 => function($stackPos) {
                $this->semValue = Stmt\Foreach_[$stackPos-(7-3), $stackPos-(7-5)[0], ['keyVar' => null, 'byRef' => $stackPos-(7-5)[1], 'stmts' => $stackPos-(7-7)]];
            },
            155 => function($stackPos) {
                $this->semValue = Stmt\Foreach_[$stackPos-(9-3), $stackPos-(9-7)[0], ['keyVar' => $stackPos-(9-5), 'byRef' => $stackPos-(9-7)[1], 'stmts' => $stackPos-(9-9)]];
            },
            156 => function($stackPos) {
                $this->semValue = Stmt\Declare_[$stackPos-(5-3), $stackPos-(5-5)];
            },
            157 => function($stackPos) {
                $this->semValue = Stmt\TryCatch[$stackPos-(6-3), $stackPos-(6-5), $stackPos-(6-6)]; $this->checkTryCatch($this->semValue);
            },
            158 => function($stackPos) {
                $this->semValue = Stmt\Throw_[$stackPos-(3-2)];
            },
            159 => function($stackPos) {
                $this->semValue = Stmt\Goto_[$stackPos-(3-2)];
            },
            160 => function($stackPos) {
                $this->semValue = Stmt\Label[$stackPos-(2-1)];
            },
            161 => function($stackPos) {
                $this->semValue = array(); /* means: no statement */
            },
            162 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            163 => function($stackPos) {
                makeNop($this->semValue, $this->startAttributeStack[#1]);
            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */
            },
            164 => function($stackPos) {
                init();
            },
            165 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            166 => function($stackPos) {
                init($stackPos-(1-1));
            },
            167 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            168 => function($stackPos) {
                $this->semValue = Stmt\Catch_[$stackPos-(8-3), parseVar($stackPos-(8-4)), $stackPos-(8-7)];
            },
            169 => function($stackPos) {
                $this->semValue = null;
            },
            170 => function($stackPos) {
                $this->semValue = Stmt\Finally_[$stackPos-(4-3)];
            },
            171 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            172 => function($stackPos) {
                init($stackPos-(1-1));
            },
            173 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            174 => function($stackPos) {
                $this->semValue = false;
            },
            175 => function($stackPos) {
                $this->semValue = true;
            },
            176 => function($stackPos) {
                $this->semValue = false;
            },
            177 => function($stackPos) {
                $this->semValue = true;
            },
            178 => function($stackPos) {
                $this->semValue = Stmt\Function_[$stackPos-(10-3), ['byRef' => $stackPos-(10-2), 'params' => $stackPos-(10-5), 'returnType' => $stackPos-(10-7), 'stmts' => $stackPos-(10-9)]];
            },
            179 => function($stackPos) {
                $this->semValue = Stmt\Class_[$stackPos-(7-2), ['type' => $stackPos-(7-1), 'extends' => $stackPos-(7-3), 'implements' => $stackPos-(7-4), 'stmts' => $stackPos-(7-6)]];
            $this->checkClass($this->semValue, #2);
            },
            180 => function($stackPos) {
                $this->semValue = Stmt\Interface_[$stackPos-(6-2), ['extends' => $stackPos-(6-3), 'stmts' => $stackPos-(6-5)]];
            $this->checkInterface($this->semValue, #2);
            },
            181 => function($stackPos) {
                $this->semValue = Stmt\Trait_[$stackPos-(5-2), ['stmts' => $stackPos-(5-4)]];
            },
            182 => function($stackPos) {
                $this->semValue = 0;
            },
            183 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
            },
            184 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_FINAL;
            },
            185 => function($stackPos) {
                $this->semValue = null;
            },
            186 => function($stackPos) {
                $this->semValue = $stackPos-(2-2);
            },
            187 => function($stackPos) {
                $this->semValue = array();
            },
            188 => function($stackPos) {
                $this->semValue = $stackPos-(2-2);
            },
            189 => function($stackPos) {
                $this->semValue = array();
            },
            190 => function($stackPos) {
                $this->semValue = $stackPos-(2-2);
            },
            191 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            192 => function($stackPos) {
                init($stackPos-(1-1));
            },
            193 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            194 => function($stackPos) {
                $this->semValue = toArray($stackPos-(1-1));
            },
            195 => function($stackPos) {
                $this->semValue = $stackPos-(4-2);
            },
            196 => function($stackPos) {
                $this->semValue = toArray($stackPos-(1-1));
            },
            197 => function($stackPos) {
                $this->semValue = $stackPos-(4-2);
            },
            198 => function($stackPos) {
                $this->semValue = toArray($stackPos-(1-1));
            },
            199 => function($stackPos) {
                $this->semValue = null;
            },
            200 => function($stackPos) {
                $this->semValue = $stackPos-(4-2);
            },
            201 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            202 => function($stackPos) {
                init($stackPos-(1-1));
            },
            203 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            204 => function($stackPos) {
                $this->semValue = Stmt\DeclareDeclare[$stackPos-(3-1), $stackPos-(3-3)];
            },
            205 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            206 => function($stackPos) {
                $this->semValue = $stackPos-(4-3);
            },
            207 => function($stackPos) {
                $this->semValue = $stackPos-(4-2);
            },
            208 => function($stackPos) {
                $this->semValue = $stackPos-(5-3);
            },
            209 => function($stackPos) {
                init();
            },
            210 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            211 => function($stackPos) {
                $this->semValue = Stmt\Case_[$stackPos-(4-2), $stackPos-(4-4)];
            },
            212 => function($stackPos) {
                $this->semValue = Stmt\Case_[null, $stackPos-(3-3)];
            },
            213 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            214 => function($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
            },
            215 => function($stackPos) {
                $this->semValue = toArray($stackPos-(1-1));
            },
            216 => function($stackPos) {
                $this->semValue = $stackPos-(4-2);
            },
            217 => function($stackPos) {
                init();
            },
            218 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            219 => function($stackPos) {
                $this->semValue = Stmt\ElseIf_[$stackPos-(5-3), toArray($stackPos-(5-5))];
            },
            220 => function($stackPos) {
                init();
            },
            221 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            222 => function($stackPos) {
                $this->semValue = Stmt\ElseIf_[$stackPos-(6-3), $stackPos-(6-6)];
            },
            223 => function($stackPos) {
                $this->semValue = null;
            },
            224 => function($stackPos) {
                $this->semValue = Stmt\Else_[toArray($stackPos-(2-2))];
            },
            225 => function($stackPos) {
                $this->semValue = null;
            },
            226 => function($stackPos) {
                $this->semValue = Stmt\Else_[$stackPos-(3-3)];
            },
            227 => function($stackPos) {
                $this->semValue = array($stackPos-(1-1), false);
            },
            228 => function($stackPos) {
                $this->semValue = array($stackPos-(2-2), true);
            },
            229 => function($stackPos) {
                $this->semValue = array($stackPos-(1-1), false);
            },
            230 => function($stackPos) {
                $this->semValue = array($stackPos-(1-1), false);
            },
            231 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            232 => function($stackPos) {
                $this->semValue = array();
            },
            233 => function($stackPos) {
                init($stackPos-(1-1));
            },
            234 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            235 => function($stackPos) {
                $this->semValue = Node\Param[parseVar($stackPos-(4-4)), null, $stackPos-(4-1), $stackPos-(4-2), $stackPos-(4-3)]; $this->checkParam($this->semValue);
            },
            236 => function($stackPos) {
                $this->semValue = Node\Param[parseVar($stackPos-(6-4)), $stackPos-(6-6), $stackPos-(6-1), $stackPos-(6-2), $stackPos-(6-3)]; $this->checkParam($this->semValue);
            },
            237 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            238 => function($stackPos) {
                $this->semValue = Node\NullableType[$stackPos-(2-2)];
            },
            239 => function($stackPos) {
                $this->semValue = $this->handleBuiltinTypes($stackPos-(1-1));
            },
            240 => function($stackPos) {
                $this->semValue = 'array';
            },
            241 => function($stackPos) {
                $this->semValue = 'callable';
            },
            242 => function($stackPos) {
                $this->semValue = null;
            },
            243 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            244 => function($stackPos) {
                $this->semValue = null;
            },
            245 => function($stackPos) {
                $this->semValue = $stackPos-(2-2);
            },
            246 => function($stackPos) {
                $this->semValue = array();
            },
            247 => function($stackPos) {
                $this->semValue = $stackPos-(4-2);
            },
            248 => function($stackPos) {
                init($stackPos-(1-1));
            },
            249 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            250 => function($stackPos) {
                $this->semValue = Node\Arg[$stackPos-(1-1), false, false];
            },
            251 => function($stackPos) {
                $this->semValue = Node\Arg[$stackPos-(2-2), true, false];
            },
            252 => function($stackPos) {
                $this->semValue = Node\Arg[$stackPos-(2-2), false, true];
            },
            253 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            254 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            255 => function($stackPos) {
                init($stackPos-(1-1));
            },
            256 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(1-1)];
            },
            257 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            258 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            259 => function($stackPos) {
                init($stackPos-(1-1));
            },
            260 => function($stackPos) {
                $this->semValue = Stmt\StaticVar[parseVar($stackPos-(1-1)), null];
            },
            261 => function($stackPos) {
                $this->semValue = Stmt\StaticVar[parseVar($stackPos-(3-1)), $stackPos-(3-3)];
            },
            262 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            263 => function($stackPos) {
                init();
            },
            264 => function($stackPos) {
                $this->semValue = Stmt\Property[$stackPos-(3-1), $stackPos-(3-2)]; $this->checkProperty($this->semValue, #1);
            },
            265 => function($stackPos) {
                $this->semValue = Stmt\ClassConst[$stackPos-(4-3), $stackPos-(4-1)]; $this->checkClassConst($this->semValue, #1);
            },
            266 => function($stackPos) {
                $this->semValue = Stmt\ClassMethod[$stackPos-(9-4), ['type' => $stackPos-(9-1), 'byRef' => $stackPos-(9-3), 'params' => $stackPos-(9-6), 'returnType' => $stackPos-(9-8), 'stmts' => $stackPos-(9-9)]];
            $this->checkClassMethod($this->semValue, #1);
            },
            267 => function($stackPos) {
                $this->semValue = Stmt\TraitUse[$stackPos-(3-2), $stackPos-(3-3)];
            },
            268 => function($stackPos) {
                $this->semValue = array();
            },
            269 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            270 => function($stackPos) {
                init();
            },
            271 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            272 => function($stackPos) {
                $this->semValue = Stmt\TraitUseAdaptation\Precedence[$stackPos-(4-1)[0], $stackPos-(4-1)[1], $stackPos-(4-3)];
            },
            273 => function($stackPos) {
                $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(5-1)[0], $stackPos-(5-1)[1], $stackPos-(5-3), $stackPos-(5-4)];
            },
            274 => function($stackPos) {
                $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(4-1)[0], $stackPos-(4-1)[1], $stackPos-(4-3), null];
            },
            275 => function($stackPos) {
                $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(4-1)[0], $stackPos-(4-1)[1], null, $stackPos-(4-3)];
            },
            276 => function($stackPos) {
                $this->semValue = Stmt\TraitUseAdaptation\Alias[$stackPos-(4-1)[0], $stackPos-(4-1)[1], null, $stackPos-(4-3)];
            },
            277 => function($stackPos) {
                $this->semValue = array($stackPos-(3-1), $stackPos-(3-3));
            },
            278 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            279 => function($stackPos) {
                $this->semValue = array(null, $stackPos-(1-1));
            },
            280 => function($stackPos) {
                $this->semValue = null;
            },
            281 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            282 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            283 => function($stackPos) {
                $this->semValue = 0;
            },
            284 => function($stackPos) {
                $this->semValue = 0;
            },
            285 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            286 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            287 => function($stackPos) {
                $this->checkModifier($stackPos-(2-1), $stackPos-(2-2), #2); $this->semValue = $stackPos-(2-1) | $stackPos-(2-2);
            },
            288 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
            },
            289 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
            },
            290 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
            },
            291 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_STATIC;
            },
            292 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
            },
            293 => function($stackPos) {
                $this->semValue = Stmt\Class_::MODIFIER_FINAL;
            },
            294 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            295 => function($stackPos) {
                init($stackPos-(1-1));
            },
            296 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            297 => function($stackPos) {
                $this->semValue = Stmt\PropertyProperty[parseVar($stackPos-(1-1)), null];
            },
            298 => function($stackPos) {
                $this->semValue = Stmt\PropertyProperty[parseVar($stackPos-(3-1)), $stackPos-(3-3)];
            },
            299 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            300 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            301 => function($stackPos) {
                init($stackPos-(1-1));
            },
            302 => function($stackPos) {
                $this->semValue = array();
            },
            303 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            304 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            305 => function($stackPos) {
                $this->semValue = Expr\Assign[$stackPos-(3-1), $stackPos-(3-3)];
            },
            306 => function($stackPos) {
                $this->semValue = Expr\Assign[$stackPos-(3-1), $stackPos-(3-3)];
            },
            307 => function($stackPos) {
                $this->semValue = Expr\Assign[$stackPos-(3-1), $stackPos-(3-3)];
            },
            308 => function($stackPos) {
                $this->semValue = Expr\AssignRef[$stackPos-(4-1), $stackPos-(4-4)];
            },
            309 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            310 => function($stackPos) {
                $this->semValue = Expr\Clone_[$stackPos-(2-2)];
            },
            311 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Plus      [$stackPos-(3-1), $stackPos-(3-3)];
            },
            312 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Minus     [$stackPos-(3-1), $stackPos-(3-3)];
            },
            313 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Mul       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            314 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Div       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            315 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Concat    [$stackPos-(3-1), $stackPos-(3-3)];
            },
            316 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Mod       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            317 => function($stackPos) {
                $this->semValue = Expr\AssignOp\BitwiseAnd[$stackPos-(3-1), $stackPos-(3-3)];
            },
            318 => function($stackPos) {
                $this->semValue = Expr\AssignOp\BitwiseOr [$stackPos-(3-1), $stackPos-(3-3)];
            },
            319 => function($stackPos) {
                $this->semValue = Expr\AssignOp\BitwiseXor[$stackPos-(3-1), $stackPos-(3-3)];
            },
            320 => function($stackPos) {
                $this->semValue = Expr\AssignOp\ShiftLeft [$stackPos-(3-1), $stackPos-(3-3)];
            },
            321 => function($stackPos) {
                $this->semValue = Expr\AssignOp\ShiftRight[$stackPos-(3-1), $stackPos-(3-3)];
            },
            322 => function($stackPos) {
                $this->semValue = Expr\AssignOp\Pow       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            323 => function($stackPos) {
                $this->semValue = Expr\PostInc[$stackPos-(2-1)];
            },
            324 => function($stackPos) {
                $this->semValue = Expr\PreInc [$stackPos-(2-2)];
            },
            325 => function($stackPos) {
                $this->semValue = Expr\PostDec[$stackPos-(2-1)];
            },
            326 => function($stackPos) {
                $this->semValue = Expr\PreDec [$stackPos-(2-2)];
            },
            327 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\BooleanOr [$stackPos-(3-1), $stackPos-(3-3)];
            },
            328 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\BooleanAnd[$stackPos-(3-1), $stackPos-(3-3)];
            },
            329 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\LogicalOr [$stackPos-(3-1), $stackPos-(3-3)];
            },
            330 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\LogicalAnd[$stackPos-(3-1), $stackPos-(3-3)];
            },
            331 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\LogicalXor[$stackPos-(3-1), $stackPos-(3-3)];
            },
            332 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\BitwiseOr [$stackPos-(3-1), $stackPos-(3-3)];
            },
            333 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\BitwiseAnd[$stackPos-(3-1), $stackPos-(3-3)];
            },
            334 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\BitwiseXor[$stackPos-(3-1), $stackPos-(3-3)];
            },
            335 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Concat    [$stackPos-(3-1), $stackPos-(3-3)];
            },
            336 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Plus      [$stackPos-(3-1), $stackPos-(3-3)];
            },
            337 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Minus     [$stackPos-(3-1), $stackPos-(3-3)];
            },
            338 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Mul       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            339 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Div       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            340 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Mod       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            341 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\ShiftLeft [$stackPos-(3-1), $stackPos-(3-3)];
            },
            342 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\ShiftRight[$stackPos-(3-1), $stackPos-(3-3)];
            },
            343 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Pow       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            344 => function($stackPos) {
                $this->semValue = Expr\UnaryPlus [$stackPos-(2-2)];
            },
            345 => function($stackPos) {
                $this->semValue = Expr\UnaryMinus[$stackPos-(2-2)];
            },
            346 => function($stackPos) {
                $this->semValue = Expr\BooleanNot[$stackPos-(2-2)];
            },
            347 => function($stackPos) {
                $this->semValue = Expr\BitwiseNot[$stackPos-(2-2)];
            },
            348 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Identical     [$stackPos-(3-1), $stackPos-(3-3)];
            },
            349 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\NotIdentical  [$stackPos-(3-1), $stackPos-(3-3)];
            },
            350 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Equal         [$stackPos-(3-1), $stackPos-(3-3)];
            },
            351 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\NotEqual      [$stackPos-(3-1), $stackPos-(3-3)];
            },
            352 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Spaceship     [$stackPos-(3-1), $stackPos-(3-3)];
            },
            353 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Smaller       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            354 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\SmallerOrEqual[$stackPos-(3-1), $stackPos-(3-3)];
            },
            355 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Greater       [$stackPos-(3-1), $stackPos-(3-3)];
            },
            356 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\GreaterOrEqual[$stackPos-(3-1), $stackPos-(3-3)];
            },
            357 => function($stackPos) {
                $this->semValue = Expr\Instanceof_[$stackPos-(3-1), $stackPos-(3-3)];
            },
            358 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            359 => function($stackPos) {
                $this->semValue = Expr\Ternary[$stackPos-(5-1), $stackPos-(5-3),   $stackPos-(5-5)];
            },
            360 => function($stackPos) {
                $this->semValue = Expr\Ternary[$stackPos-(4-1), null, $stackPos-(4-4)];
            },
            361 => function($stackPos) {
                $this->semValue = Expr\BinaryOp\Coalesce[$stackPos-(3-1), $stackPos-(3-3)];
            },
            362 => function($stackPos) {
                $this->semValue = Expr\Isset_[$stackPos-(4-3)];
            },
            363 => function($stackPos) {
                $this->semValue = Expr\Empty_[$stackPos-(4-3)];
            },
            364 => function($stackPos) {
                $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_INCLUDE];
            },
            365 => function($stackPos) {
                $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_INCLUDE_ONCE];
            },
            366 => function($stackPos) {
                $this->semValue = Expr\Eval_[$stackPos-(4-3)];
            },
            367 => function($stackPos) {
                $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_REQUIRE];
            },
            368 => function($stackPos) {
                $this->semValue = Expr\Include_[$stackPos-(2-2), Expr\Include_::TYPE_REQUIRE_ONCE];
            },
            369 => function($stackPos) {
                $this->semValue = Expr\Cast\Int_    [$stackPos-(2-2)];
            },
            370 => function($stackPos) {
                $this->semValue = Expr\Cast\Double  [$stackPos-(2-2)];
            },
            371 => function($stackPos) {
                $this->semValue = Expr\Cast\String_ [$stackPos-(2-2)];
            },
            372 => function($stackPos) {
                $this->semValue = Expr\Cast\Array_  [$stackPos-(2-2)];
            },
            373 => function($stackPos) {
                $this->semValue = Expr\Cast\Object_ [$stackPos-(2-2)];
            },
            374 => function($stackPos) {
                $this->semValue = Expr\Cast\Bool_   [$stackPos-(2-2)];
            },
            375 => function($stackPos) {
                $this->semValue = Expr\Cast\Unset_  [$stackPos-(2-2)];
            },
            376 => function($stackPos) {
                $attrs = attributes();
            $attrs['kind'] = strtolower($stackPos-(2-1)) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
            $this->semValue = new Expr\Exit_($stackPos-(2-2), $attrs);
            },
            377 => function($stackPos) {
                $this->semValue = Expr\ErrorSuppress[$stackPos-(2-2)];
            },
            378 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            379 => function($stackPos) {
                $this->semValue = Expr\ShellExec[$stackPos-(3-2)];
            },
            380 => function($stackPos) {
                $this->semValue = Expr\Print_[$stackPos-(2-2)];
            },
            381 => function($stackPos) {
                $this->semValue = Expr\Yield_[null, null];
            },
            382 => function($stackPos) {
                $this->semValue = Expr\Yield_[$stackPos-(2-2), null];
            },
            383 => function($stackPos) {
                $this->semValue = Expr\Yield_[$stackPos-(4-4), $stackPos-(4-2)];
            },
            384 => function($stackPos) {
                $this->semValue = Expr\YieldFrom[$stackPos-(2-2)];
            },
            385 => function($stackPos) {
                $this->semValue = Expr\Closure[['static' => false, 'byRef' => $stackPos-(10-2), 'params' => $stackPos-(10-4), 'uses' => $stackPos-(10-6), 'returnType' => $stackPos-(10-7), 'stmts' => $stackPos-(10-9)]];
            },
            386 => function($stackPos) {
                $this->semValue = Expr\Closure[['static' => true, 'byRef' => $stackPos-(11-3), 'params' => $stackPos-(11-5), 'uses' => $stackPos-(11-7), 'returnType' => $stackPos-(11-8), 'stmts' => $stackPos-(11-10)]];
            },
            387 => function($stackPos) {
                $this->semValue = array(Stmt\Class_[null, ['type' => 0, 'extends' => $stackPos-(7-3), 'implements' => $stackPos-(7-4), 'stmts' => $stackPos-(7-6)]], $stackPos-(7-2));
            $this->checkClass($this->semValue[0], -1);
            },
            388 => function($stackPos) {
                $this->semValue = Expr\New_[$stackPos-(3-2), $stackPos-(3-3)];
            },
            389 => function($stackPos) {
                list($class, $ctorArgs) = $stackPos-(2-2); $this->semValue = Expr\New_[$class, $ctorArgs];
            },
            390 => function($stackPos) {
                $this->semValue = array();
            },
            391 => function($stackPos) {
                $this->semValue = $stackPos-(4-3);
            },
            392 => function($stackPos) {
                $this->semValue = $stackPos-(2-1);
            },
            393 => function($stackPos) {
                init($stackPos-(1-1));
            },
            394 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            395 => function($stackPos) {
                $this->semValue = Expr\ClosureUse[parseVar($stackPos-(2-2)), $stackPos-(2-1)];
            },
            396 => function($stackPos) {
                $this->semValue = Expr\FuncCall[$stackPos-(2-1), $stackPos-(2-2)];
            },
            397 => function($stackPos) {
                $this->semValue = Expr\FuncCall[$stackPos-(2-1), $stackPos-(2-2)];
            },
            398 => function($stackPos) {
                $this->semValue = Expr\StaticCall[$stackPos-(4-1), $stackPos-(4-3), $stackPos-(4-4)];
            },
            399 => function($stackPos) {
                $this->semValue = Name[$stackPos-(1-1)];
            },
            400 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            401 => function($stackPos) {
                $this->semValue = Name[$stackPos-(1-1)];
            },
            402 => function($stackPos) {
                $this->semValue = Name\FullyQualified[$stackPos-(2-2)];
            },
            403 => function($stackPos) {
                $this->semValue = Name\Relative[$stackPos-(3-3)];
            },
            404 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            405 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            406 => function($stackPos) {
                $this->semValue = Expr\Error[]; $this->errorState = 2;
            },
            407 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            408 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            409 => function($stackPos) {
                $this->semValue = null;
            },
            410 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            411 => function($stackPos) {
                $this->semValue = array();
            },
            412 => function($stackPos) {
                $this->semValue = array(Scalar\EncapsedStringPart[Scalar\String_::parseEscapeSequences($stackPos-(1-1), '`')]);
            },
            413 => function($stackPos) {
                parseEncapsed($stackPos-(1-1), '`', true); $this->semValue = $stackPos-(1-1);
            },
            414 => function($stackPos) {
                $this->semValue = array();
            },
            415 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            416 => function($stackPos) {
                $this->semValue = Expr\ConstFetch[$stackPos-(1-1)];
            },
            417 => function($stackPos) {
                $this->semValue = Expr\ClassConstFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            418 => function($stackPos) {
                $this->semValue = Expr\ClassConstFetch[$stackPos-(3-1), new Expr\Error(stackAttributes(#3))]; $this->errorState = 2;
            },
            419 => function($stackPos) {
                $attrs = attributes(); $attrs['kind'] = Expr\Array_::KIND_SHORT;
            $this->semValue = new Expr\Array_($stackPos-(3-2), $attrs);
            },
            420 => function($stackPos) {
                $attrs = attributes(); $attrs['kind'] = Expr\Array_::KIND_LONG;
            $this->semValue = new Expr\Array_($stackPos-(4-3), $attrs);
            },
            421 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            422 => function($stackPos) {
                $attrs = attributes(); $attrs['kind'] = strKind($stackPos-(1-1));
            $this->semValue = new Scalar\String_(Scalar\String_::parse($stackPos-(1-1)), $attrs);
            },
            423 => function($stackPos) {
                $this->semValue = $this->parseLNumber($stackPos-(1-1), attributes());
            },
            424 => function($stackPos) {
                $this->semValue = Scalar\DNumber[Scalar\DNumber::parse($stackPos-(1-1))];
            },
            425 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Line[];
            },
            426 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\File[];
            },
            427 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Dir[];
            },
            428 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Class_[];
            },
            429 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Trait_[];
            },
            430 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Method[];
            },
            431 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Function_[];
            },
            432 => function($stackPos) {
                $this->semValue = Scalar\MagicConst\Namespace_[];
            },
            433 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            434 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            435 => function($stackPos) {
                $attrs = attributes(); setDocStringAttrs($attrs, $stackPos-(3-1));
            $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($stackPos-(3-1), $stackPos-(3-2)), $attrs);
            },
            436 => function($stackPos) {
                $attrs = attributes(); setDocStringAttrs($attrs, $stackPos-(2-1));
            $this->semValue = new Scalar\String_('', $attrs);
            },
            437 => function($stackPos) {
                $attrs = attributes(); $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
            parseEncapsed($stackPos-(3-2), '"', true); $this->semValue = new Scalar\Encapsed($stackPos-(3-2), $attrs);
            },
            438 => function($stackPos) {
                $attrs = attributes(); setDocStringAttrs($attrs, $stackPos-(3-1));
            parseEncapsedDoc($stackPos-(3-2), true); $this->semValue = new Scalar\Encapsed($stackPos-(3-2), $attrs);
            },
            439 => function($stackPos) {
                $this->semValue = null;
            },
            440 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            441 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            442 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            443 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            444 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            445 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            446 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            447 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(1-1)];
            },
            448 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)];
            },
            449 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)];
            },
            450 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)];
            },
            451 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            452 => function($stackPos) {
                $this->semValue = Expr\MethodCall[$stackPos-(4-1), $stackPos-(4-3), $stackPos-(4-4)];
            },
            453 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            454 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            455 => function($stackPos) {
                $this->semValue = Expr\PropertyFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            456 => function($stackPos) {
                $this->semValue = parseVar($stackPos-(1-1));
            },
            457 => function($stackPos) {
                $this->semValue = $stackPos-(4-3);
            },
            458 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(2-2)];
            },
            459 => function($stackPos) {
                $this->semValue = Expr\Error[]; $this->errorState = 2;
            },
            460 => function($stackPos) {
                $this->semValue = Expr\StaticPropertyFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            461 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(1-1)];
            },
            462 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)];
            },
            463 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)];
            },
            464 => function($stackPos) {
                $this->semValue = Expr\PropertyFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            465 => function($stackPos) {
                $this->semValue = Expr\StaticPropertyFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            466 => function($stackPos) {
                $this->semValue = Expr\StaticPropertyFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            467 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            468 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            469 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(1-1)];
            },
            470 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            471 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            472 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(1-1)];
            },
            473 => function($stackPos) {
                $this->semValue = Expr\Error[]; $this->errorState = 2;
            },
            474 => function($stackPos) {
                $this->semValue = Expr\List_[$stackPos-(4-3)];
            },
            475 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            476 => function($stackPos) {
                init($stackPos-(1-1));
            },
            477 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(1-1), null, false];
            },
            478 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(1-1), null, false];
            },
            479 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(3-3), $stackPos-(3-1), false];
            },
            480 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(3-3), $stackPos-(3-1), false];
            },
            481 => function($stackPos) {
                $this->semValue = null;
            },
            482 => function($stackPos) {
                $this->semValue = $stackPos-(1-1); $end = count($this->semValue)-1; if ($this->semValue[$end] === null) unset($this->semValue[$end]);
            },
            483 => function($stackPos) {
                push($stackPos-(3-1), $stackPos-(3-3));
            },
            484 => function($stackPos) {
                init($stackPos-(1-1));
            },
            485 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(3-3), $stackPos-(3-1),   false];
            },
            486 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(1-1), null, false];
            },
            487 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(4-4), $stackPos-(4-1),   true];
            },
            488 => function($stackPos) {
                $this->semValue = Expr\ArrayItem[$stackPos-(2-2), null, true];
            },
            489 => function($stackPos) {
                $this->semValue = null;
            },
            490 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            491 => function($stackPos) {
                push($stackPos-(2-1), $stackPos-(2-2));
            },
            492 => function($stackPos) {
                init($stackPos-(1-1));
            },
            493 => function($stackPos) {
                init($stackPos-(2-1), $stackPos-(2-2));
            },
            494 => function($stackPos) {
                $this->semValue = Scalar\EncapsedStringPart[$stackPos-(1-1)];
            },
            495 => function($stackPos) {
                $this->semValue = Expr\Variable[parseVar($stackPos-(1-1))];
            },
            496 => function($stackPos) {
                $this->semValue = $stackPos-(1-1);
            },
            497 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[$stackPos-(4-1), $stackPos-(4-3)];
            },
            498 => function($stackPos) {
                $this->semValue = Expr\PropertyFetch[$stackPos-(3-1), $stackPos-(3-3)];
            },
            499 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(3-2)];
            },
            500 => function($stackPos) {
                $this->semValue = Expr\Variable[$stackPos-(3-2)];
            },
            501 => function($stackPos) {
                $this->semValue = Expr\ArrayDimFetch[Expr\Variable[$stackPos-(6-2)], $stackPos-(6-4)];
            },
            502 => function($stackPos) {
                $this->semValue = $stackPos-(3-2);
            },
            503 => function($stackPos) {
                $this->semValue = Scalar\String_[$stackPos-(1-1)];
            },
            504 => function($stackPos) {
                $this->semValue = $this->parseNumString($stackPos-(1-1), attributes());
            },
            505 => function($stackPos) {
                $this->semValue = $this->parseNumString('-' . $stackPos-(2-2), attributes());
            },
            506 => function($stackPos) {
                $this->semValue = Expr\Variable[parseVar($stackPos-(1-1))];
            },
        ];
    }
}